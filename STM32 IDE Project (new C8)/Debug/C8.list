
C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080038b0  080038b0  000138b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e4  080038e4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080038e4  080038e4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038e4  080038e4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080038ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd8  20000064  08003950  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000103c  08003950  0002103c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a747  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002285  00000000  00000000  0002a817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  0002caa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090f  00000000  00000000  0002d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018acd  00000000  00000000  0002df97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d942  00000000  00000000  00046a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008eb30  00000000  00000000  000543a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003014  00000000  00000000  000e2ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000e5eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08003898 	.word	0x08003898

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08003898 	.word	0x08003898

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2uiz>:
 80006f8:	0042      	lsls	r2, r0, #1
 80006fa:	d20e      	bcs.n	800071a <__aeabi_f2uiz+0x22>
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000700:	d30b      	bcc.n	800071a <__aeabi_f2uiz+0x22>
 8000702:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d409      	bmi.n	8000720 <__aeabi_f2uiz+0x28>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2uiz+0x32>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d102      	bne.n	8000730 <__aeabi_f2uiz+0x38>
 800072a:	f04f 30ff 	mov.w	r0, #4294967295
 800072e:	4770      	bx	lr
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <DC_voidInit>:
#include "../Src/DIO_interface.h"
#include "../Src/RCC_interface.h"
#include "../Src/RCC_private.h"

void DC_voidInit()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    RCC_voidEnablePeripheralClock(APB2_BUS, TIM1_RCC);
 800073c:	210b      	movs	r1, #11
 800073e:	2002      	movs	r0, #2
 8000740:	f000 fa04 	bl	8000b4c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, DIOA_RCC);
 8000744:	2102      	movs	r1, #2
 8000746:	2002      	movs	r0, #2
 8000748:	f000 fa00 	bl	8000b4c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, DC_PORT_RCC);
 800074c:	2103      	movs	r1, #3
 800074e:	2002      	movs	r0, #2
 8000750:	f000 f9fc 	bl	8000b4c <RCC_voidEnablePeripheralClock>

    MDIO_voidSetPinDirection(DC_PORT, DC_IN1_PIN, OUTPUT_SPEED_2MHZ_PP);
 8000754:	2202      	movs	r2, #2
 8000756:	2100      	movs	r1, #0
 8000758:	2002      	movs	r0, #2
 800075a:	f000 f847 	bl	80007ec <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(DC_PORT, DC_IN2_PIN, OUTPUT_SPEED_2MHZ_PP);
 800075e:	2202      	movs	r2, #2
 8000760:	2101      	movs	r1, #1
 8000762:	2002      	movs	r0, #2
 8000764:	f000 f842 	bl	80007ec <MDIO_voidSetPinDirection>

    MDIO_voidSetPinDirection(DIOA, PIN8, OUTPUT_SPEED_50MHZ_AFPP);
 8000768:	220b      	movs	r2, #11
 800076a:	2108      	movs	r1, #8
 800076c:	2001      	movs	r0, #1
 800076e:	f000 f83d 	bl	80007ec <MDIO_voidSetPinDirection>

    TIM1_voidInit();
 8000772:	f000 fa75 	bl	8000c60 <TIM1_voidInit>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <DC_voidSetSpeed>:

void DC_voidSetSpeed(u8 speed)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
    TIM1_voidGeneratePwm(PWM_CHANNEL_1, speed / 100.0f);
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fd9b 	bl	80002c4 <__aeabi_i2f>
 800078e:	4603      	mov	r3, r0
 8000790:	4907      	ldr	r1, [pc, #28]	; (80007b0 <DC_voidSetSpeed+0x34>)
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff fe9e 	bl	80004d4 <__aeabi_fdiv>
 8000798:	4603      	mov	r3, r0
 800079a:	4619      	mov	r1, r3
 800079c:	2001      	movs	r0, #1
 800079e:	f000 fadf 	bl	8000d60 <TIM1_voidGeneratePwm>
    TIM1_voidStart();
 80007a2:	f000 fad3 	bl	8000d4c <TIM1_voidStart>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	42c80000 	.word	0x42c80000

080007b4 <DC_voidStart>:

void DC_voidStart()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    MDIO_voidSetPinValue(DC_PORT, DC_IN1_PIN, DIO_HIGH);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2100      	movs	r1, #0
 80007bc:	2002      	movs	r0, #2
 80007be:	f000 f8f1 	bl	80009a4 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(DC_PORT, DC_IN2_PIN, DIO_LOW);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2101      	movs	r1, #1
 80007c6:	2002      	movs	r0, #2
 80007c8:	f000 f8ec 	bl	80009a4 <MDIO_voidSetPinValue>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <DC_voidStop>:

void DC_voidStop()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
    MDIO_voidSetPinValue(DC_PORT, DC_IN1_PIN, DIO_LOW);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2100      	movs	r1, #0
 80007d8:	2002      	movs	r0, #2
 80007da:	f000 f8e3 	bl	80009a4 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(DC_PORT, DC_IN2_PIN, DIO_LOW);
 80007de:	2200      	movs	r2, #0
 80007e0:	2101      	movs	r1, #1
 80007e2:	2002      	movs	r0, #2
 80007e4:	f000 f8de 	bl	80009a4 <MDIO_voidSetPinValue>
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}

080007ec <MDIO_voidSetPinDirection>:
#include "DIO_private.h"
#include "DIO_config.h"
#include "../Common/bit_math.h"

void MDIO_voidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 u8Copy_u8Mode)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
 80007f6:	460b      	mov	r3, r1
 80007f8:	71bb      	strb	r3, [r7, #6]
 80007fa:	4613      	mov	r3, r2
 80007fc:	717b      	strb	r3, [r7, #5]
	switch (Copy_u8Port)
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b03      	cmp	r3, #3
 8000802:	f000 8082 	beq.w	800090a <MDIO_voidSetPinDirection+0x11e>
 8000806:	2b03      	cmp	r3, #3
 8000808:	f300 80c0 	bgt.w	800098c <MDIO_voidSetPinDirection+0x1a0>
 800080c:	2b01      	cmp	r3, #1
 800080e:	d002      	beq.n	8000816 <MDIO_voidSetPinDirection+0x2a>
 8000810:	2b02      	cmp	r3, #2
 8000812:	d03e      	beq.n	8000892 <MDIO_voidSetPinDirection+0xa6>
			GPIOC->CRH &= ~(0b1111 << 4 * Copy_u8Pin);
			GPIOC->CRH |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
		}
		break;
	}
}
 8000814:	e0ba      	b.n	800098c <MDIO_voidSetPinDirection+0x1a0>
		if (Copy_u8Pin <= 7)
 8000816:	79bb      	ldrb	r3, [r7, #6]
 8000818:	2b07      	cmp	r3, #7
 800081a:	d817      	bhi.n	800084c <MDIO_voidSetPinDirection+0x60>
			GPIOA->CRL &= ~(0b1111 << 4 * Copy_u8Pin);
 800081c:	4b5e      	ldr	r3, [pc, #376]	; (8000998 <MDIO_voidSetPinDirection+0x1ac>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	210f      	movs	r1, #15
 8000826:	fa01 f202 	lsl.w	r2, r1, r2
 800082a:	43d2      	mvns	r2, r2
 800082c:	4611      	mov	r1, r2
 800082e:	4a5a      	ldr	r2, [pc, #360]	; (8000998 <MDIO_voidSetPinDirection+0x1ac>)
 8000830:	400b      	ands	r3, r1
 8000832:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
 8000834:	4b58      	ldr	r3, [pc, #352]	; (8000998 <MDIO_voidSetPinDirection+0x1ac>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	7979      	ldrb	r1, [r7, #5]
 800083a:	79ba      	ldrb	r2, [r7, #6]
 800083c:	0092      	lsls	r2, r2, #2
 800083e:	fa01 f202 	lsl.w	r2, r1, r2
 8000842:	4611      	mov	r1, r2
 8000844:	4a54      	ldr	r2, [pc, #336]	; (8000998 <MDIO_voidSetPinDirection+0x1ac>)
 8000846:	430b      	orrs	r3, r1
 8000848:	6013      	str	r3, [r2, #0]
		break;
 800084a:	e09a      	b.n	8000982 <MDIO_voidSetPinDirection+0x196>
		else if (Copy_u8Pin > 7 && Copy_u8Pin <= 15)
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	2b07      	cmp	r3, #7
 8000850:	f240 8097 	bls.w	8000982 <MDIO_voidSetPinDirection+0x196>
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	2b0f      	cmp	r3, #15
 8000858:	f200 8093 	bhi.w	8000982 <MDIO_voidSetPinDirection+0x196>
			Copy_u8Pin -= 8;
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	3b08      	subs	r3, #8
 8000860:	71bb      	strb	r3, [r7, #6]
			GPIOA->CRH &= ~(0b1111 << 4 * Copy_u8Pin);
 8000862:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <MDIO_voidSetPinDirection+0x1ac>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	79ba      	ldrb	r2, [r7, #6]
 8000868:	0092      	lsls	r2, r2, #2
 800086a:	210f      	movs	r1, #15
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	43d2      	mvns	r2, r2
 8000872:	4611      	mov	r1, r2
 8000874:	4a48      	ldr	r2, [pc, #288]	; (8000998 <MDIO_voidSetPinDirection+0x1ac>)
 8000876:	400b      	ands	r3, r1
 8000878:	6053      	str	r3, [r2, #4]
			GPIOA->CRH |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
 800087a:	4b47      	ldr	r3, [pc, #284]	; (8000998 <MDIO_voidSetPinDirection+0x1ac>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	7979      	ldrb	r1, [r7, #5]
 8000880:	79ba      	ldrb	r2, [r7, #6]
 8000882:	0092      	lsls	r2, r2, #2
 8000884:	fa01 f202 	lsl.w	r2, r1, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a43      	ldr	r2, [pc, #268]	; (8000998 <MDIO_voidSetPinDirection+0x1ac>)
 800088c:	430b      	orrs	r3, r1
 800088e:	6053      	str	r3, [r2, #4]
		break;
 8000890:	e077      	b.n	8000982 <MDIO_voidSetPinDirection+0x196>
		if (Copy_u8Pin <= 7)
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	2b07      	cmp	r3, #7
 8000896:	d817      	bhi.n	80008c8 <MDIO_voidSetPinDirection+0xdc>
			GPIOB->CRL &= ~(0b1111 << 4 * Copy_u8Pin);
 8000898:	4b40      	ldr	r3, [pc, #256]	; (800099c <MDIO_voidSetPinDirection+0x1b0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	0092      	lsls	r2, r2, #2
 80008a0:	210f      	movs	r1, #15
 80008a2:	fa01 f202 	lsl.w	r2, r1, r2
 80008a6:	43d2      	mvns	r2, r2
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a3c      	ldr	r2, [pc, #240]	; (800099c <MDIO_voidSetPinDirection+0x1b0>)
 80008ac:	400b      	ands	r3, r1
 80008ae:	6013      	str	r3, [r2, #0]
			GPIOB->CRL |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
 80008b0:	4b3a      	ldr	r3, [pc, #232]	; (800099c <MDIO_voidSetPinDirection+0x1b0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	7979      	ldrb	r1, [r7, #5]
 80008b6:	79ba      	ldrb	r2, [r7, #6]
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	fa01 f202 	lsl.w	r2, r1, r2
 80008be:	4611      	mov	r1, r2
 80008c0:	4a36      	ldr	r2, [pc, #216]	; (800099c <MDIO_voidSetPinDirection+0x1b0>)
 80008c2:	430b      	orrs	r3, r1
 80008c4:	6013      	str	r3, [r2, #0]
		break;
 80008c6:	e05e      	b.n	8000986 <MDIO_voidSetPinDirection+0x19a>
		else if (Copy_u8Pin > 7 && Copy_u8Pin <= 15)
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	2b07      	cmp	r3, #7
 80008cc:	d95b      	bls.n	8000986 <MDIO_voidSetPinDirection+0x19a>
 80008ce:	79bb      	ldrb	r3, [r7, #6]
 80008d0:	2b0f      	cmp	r3, #15
 80008d2:	d858      	bhi.n	8000986 <MDIO_voidSetPinDirection+0x19a>
			Copy_u8Pin -= 8;
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	3b08      	subs	r3, #8
 80008d8:	71bb      	strb	r3, [r7, #6]
			GPIOB->CRH &= ~(0b1111 << 4 * Copy_u8Pin);
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <MDIO_voidSetPinDirection+0x1b0>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	79ba      	ldrb	r2, [r7, #6]
 80008e0:	0092      	lsls	r2, r2, #2
 80008e2:	210f      	movs	r1, #15
 80008e4:	fa01 f202 	lsl.w	r2, r1, r2
 80008e8:	43d2      	mvns	r2, r2
 80008ea:	4611      	mov	r1, r2
 80008ec:	4a2b      	ldr	r2, [pc, #172]	; (800099c <MDIO_voidSetPinDirection+0x1b0>)
 80008ee:	400b      	ands	r3, r1
 80008f0:	6053      	str	r3, [r2, #4]
			GPIOB->CRH |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
 80008f2:	4b2a      	ldr	r3, [pc, #168]	; (800099c <MDIO_voidSetPinDirection+0x1b0>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	7979      	ldrb	r1, [r7, #5]
 80008f8:	79ba      	ldrb	r2, [r7, #6]
 80008fa:	0092      	lsls	r2, r2, #2
 80008fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000900:	4611      	mov	r1, r2
 8000902:	4a26      	ldr	r2, [pc, #152]	; (800099c <MDIO_voidSetPinDirection+0x1b0>)
 8000904:	430b      	orrs	r3, r1
 8000906:	6053      	str	r3, [r2, #4]
		break;
 8000908:	e03d      	b.n	8000986 <MDIO_voidSetPinDirection+0x19a>
		if (Copy_u8Pin <= 7)
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	2b07      	cmp	r3, #7
 800090e:	d817      	bhi.n	8000940 <MDIO_voidSetPinDirection+0x154>
			GPIOC->CRL &= ~(0b1111 << 4 * Copy_u8Pin);
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <MDIO_voidSetPinDirection+0x1b4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	79ba      	ldrb	r2, [r7, #6]
 8000916:	0092      	lsls	r2, r2, #2
 8000918:	210f      	movs	r1, #15
 800091a:	fa01 f202 	lsl.w	r2, r1, r2
 800091e:	43d2      	mvns	r2, r2
 8000920:	4611      	mov	r1, r2
 8000922:	4a1f      	ldr	r2, [pc, #124]	; (80009a0 <MDIO_voidSetPinDirection+0x1b4>)
 8000924:	400b      	ands	r3, r1
 8000926:	6013      	str	r3, [r2, #0]
			GPIOC->CRL |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MDIO_voidSetPinDirection+0x1b4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	7979      	ldrb	r1, [r7, #5]
 800092e:	79ba      	ldrb	r2, [r7, #6]
 8000930:	0092      	lsls	r2, r2, #2
 8000932:	fa01 f202 	lsl.w	r2, r1, r2
 8000936:	4611      	mov	r1, r2
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <MDIO_voidSetPinDirection+0x1b4>)
 800093a:	430b      	orrs	r3, r1
 800093c:	6013      	str	r3, [r2, #0]
		break;
 800093e:	e024      	b.n	800098a <MDIO_voidSetPinDirection+0x19e>
		else if (Copy_u8Pin > 7 && Copy_u8Pin <= 15)
 8000940:	79bb      	ldrb	r3, [r7, #6]
 8000942:	2b07      	cmp	r3, #7
 8000944:	d921      	bls.n	800098a <MDIO_voidSetPinDirection+0x19e>
 8000946:	79bb      	ldrb	r3, [r7, #6]
 8000948:	2b0f      	cmp	r3, #15
 800094a:	d81e      	bhi.n	800098a <MDIO_voidSetPinDirection+0x19e>
			Copy_u8Pin -= 8;
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	3b08      	subs	r3, #8
 8000950:	71bb      	strb	r3, [r7, #6]
			GPIOC->CRH &= ~(0b1111 << 4 * Copy_u8Pin);
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MDIO_voidSetPinDirection+0x1b4>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	79ba      	ldrb	r2, [r7, #6]
 8000958:	0092      	lsls	r2, r2, #2
 800095a:	210f      	movs	r1, #15
 800095c:	fa01 f202 	lsl.w	r2, r1, r2
 8000960:	43d2      	mvns	r2, r2
 8000962:	4611      	mov	r1, r2
 8000964:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <MDIO_voidSetPinDirection+0x1b4>)
 8000966:	400b      	ands	r3, r1
 8000968:	6053      	str	r3, [r2, #4]
			GPIOC->CRH |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MDIO_voidSetPinDirection+0x1b4>)
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	7979      	ldrb	r1, [r7, #5]
 8000970:	79ba      	ldrb	r2, [r7, #6]
 8000972:	0092      	lsls	r2, r2, #2
 8000974:	fa01 f202 	lsl.w	r2, r1, r2
 8000978:	4611      	mov	r1, r2
 800097a:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <MDIO_voidSetPinDirection+0x1b4>)
 800097c:	430b      	orrs	r3, r1
 800097e:	6053      	str	r3, [r2, #4]
		break;
 8000980:	e003      	b.n	800098a <MDIO_voidSetPinDirection+0x19e>
		break;
 8000982:	bf00      	nop
 8000984:	e002      	b.n	800098c <MDIO_voidSetPinDirection+0x1a0>
		break;
 8000986:	bf00      	nop
 8000988:	e000      	b.n	800098c <MDIO_voidSetPinDirection+0x1a0>
		break;
 800098a:	bf00      	nop
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40010800 	.word	0x40010800
 800099c:	40010c00 	.word	0x40010c00
 80009a0:	40011000 	.word	0x40011000

080009a4 <MDIO_voidSetPinValue>:
void MDIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 u8Copy_u8Value)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
 80009ae:	460b      	mov	r3, r1
 80009b0:	71bb      	strb	r3, [r7, #6]
 80009b2:	4613      	mov	r3, r2
 80009b4:	717b      	strb	r3, [r7, #5]

	switch (Copy_u8Port)
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b03      	cmp	r3, #3
 80009ba:	d040      	beq.n	8000a3e <MDIO_voidSetPinValue+0x9a>
 80009bc:	2b03      	cmp	r3, #3
 80009be:	dc60      	bgt.n	8000a82 <MDIO_voidSetPinValue+0xde>
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d002      	beq.n	80009ca <MDIO_voidSetPinValue+0x26>
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d01d      	beq.n	8000a04 <MDIO_voidSetPinValue+0x60>
		{
			CLR_BIT(GPIOC->ODR, Copy_u8Pin);
		}
		break;
	}
}
 80009c8:	e05b      	b.n	8000a82 <MDIO_voidSetPinValue+0xde>
		if (u8Copy_u8Value == DIO_HIGH)
 80009ca:	797b      	ldrb	r3, [r7, #5]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d10a      	bne.n	80009e6 <MDIO_voidSetPinValue+0x42>
			SET_BIT(GPIOA->ODR, Copy_u8Pin);
 80009d0:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <MDIO_voidSetPinValue+0xe8>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	79ba      	ldrb	r2, [r7, #6]
 80009d6:	2101      	movs	r1, #1
 80009d8:	fa01 f202 	lsl.w	r2, r1, r2
 80009dc:	4611      	mov	r1, r2
 80009de:	4a2b      	ldr	r2, [pc, #172]	; (8000a8c <MDIO_voidSetPinValue+0xe8>)
 80009e0:	430b      	orrs	r3, r1
 80009e2:	60d3      	str	r3, [r2, #12]
		break;
 80009e4:	e048      	b.n	8000a78 <MDIO_voidSetPinValue+0xd4>
		else if (u8Copy_u8Value == DIO_LOW)
 80009e6:	797b      	ldrb	r3, [r7, #5]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d145      	bne.n	8000a78 <MDIO_voidSetPinValue+0xd4>
			CLR_BIT(GPIOA->ODR, Copy_u8Pin);
 80009ec:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <MDIO_voidSetPinValue+0xe8>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	79ba      	ldrb	r2, [r7, #6]
 80009f2:	2101      	movs	r1, #1
 80009f4:	fa01 f202 	lsl.w	r2, r1, r2
 80009f8:	43d2      	mvns	r2, r2
 80009fa:	4611      	mov	r1, r2
 80009fc:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <MDIO_voidSetPinValue+0xe8>)
 80009fe:	400b      	ands	r3, r1
 8000a00:	60d3      	str	r3, [r2, #12]
		break;
 8000a02:	e039      	b.n	8000a78 <MDIO_voidSetPinValue+0xd4>
		if (u8Copy_u8Value == DIO_HIGH)
 8000a04:	797b      	ldrb	r3, [r7, #5]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d10a      	bne.n	8000a20 <MDIO_voidSetPinValue+0x7c>
			SET_BIT(GPIOB->ODR, Copy_u8Pin);
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MDIO_voidSetPinValue+0xec>)
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	79ba      	ldrb	r2, [r7, #6]
 8000a10:	2101      	movs	r1, #1
 8000a12:	fa01 f202 	lsl.w	r2, r1, r2
 8000a16:	4611      	mov	r1, r2
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <MDIO_voidSetPinValue+0xec>)
 8000a1a:	430b      	orrs	r3, r1
 8000a1c:	60d3      	str	r3, [r2, #12]
		break;
 8000a1e:	e02d      	b.n	8000a7c <MDIO_voidSetPinValue+0xd8>
		else if (u8Copy_u8Value == DIO_LOW)
 8000a20:	797b      	ldrb	r3, [r7, #5]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d12a      	bne.n	8000a7c <MDIO_voidSetPinValue+0xd8>
			CLR_BIT(GPIOB->ODR, Copy_u8Pin);
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MDIO_voidSetPinValue+0xec>)
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	79ba      	ldrb	r2, [r7, #6]
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a32:	43d2      	mvns	r2, r2
 8000a34:	4611      	mov	r1, r2
 8000a36:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <MDIO_voidSetPinValue+0xec>)
 8000a38:	400b      	ands	r3, r1
 8000a3a:	60d3      	str	r3, [r2, #12]
		break;
 8000a3c:	e01e      	b.n	8000a7c <MDIO_voidSetPinValue+0xd8>
		if (u8Copy_u8Value == DIO_HIGH)
 8000a3e:	797b      	ldrb	r3, [r7, #5]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10a      	bne.n	8000a5a <MDIO_voidSetPinValue+0xb6>
			SET_BIT(GPIOC->ODR, Copy_u8Pin);
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MDIO_voidSetPinValue+0xf0>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	79ba      	ldrb	r2, [r7, #6]
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a50:	4611      	mov	r1, r2
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <MDIO_voidSetPinValue+0xf0>)
 8000a54:	430b      	orrs	r3, r1
 8000a56:	60d3      	str	r3, [r2, #12]
		break;
 8000a58:	e012      	b.n	8000a80 <MDIO_voidSetPinValue+0xdc>
		else if (u8Copy_u8Value == DIO_LOW)
 8000a5a:	797b      	ldrb	r3, [r7, #5]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10f      	bne.n	8000a80 <MDIO_voidSetPinValue+0xdc>
			CLR_BIT(GPIOC->ODR, Copy_u8Pin);
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MDIO_voidSetPinValue+0xf0>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	79ba      	ldrb	r2, [r7, #6]
 8000a66:	2101      	movs	r1, #1
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	43d2      	mvns	r2, r2
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <MDIO_voidSetPinValue+0xf0>)
 8000a72:	400b      	ands	r3, r1
 8000a74:	60d3      	str	r3, [r2, #12]
		break;
 8000a76:	e003      	b.n	8000a80 <MDIO_voidSetPinValue+0xdc>
		break;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <MDIO_voidSetPinValue+0xde>
		break;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <MDIO_voidSetPinValue+0xde>
		break;
 8000a80:	bf00      	nop
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	40010c00 	.word	0x40010c00
 8000a94:	40011000 	.word	0x40011000

08000a98 <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	71bb      	strb	r3, [r7, #6]

	u8 LOC_u8Result = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]

	switch (Copy_u8Port)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d01a      	beq.n	8000ae8 <MDIO_u8GetPinValue+0x50>
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	dc22      	bgt.n	8000afc <MDIO_u8GetPinValue+0x64>
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d002      	beq.n	8000ac0 <MDIO_u8GetPinValue+0x28>
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d00a      	beq.n	8000ad4 <MDIO_u8GetPinValue+0x3c>
 8000abe:	e01d      	b.n	8000afc <MDIO_u8GetPinValue+0x64>
	{
	case DIOA:
		LOC_u8Result = GET_BIT(GPIOA->IDR, Copy_u8Pin);
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MDIO_u8GetPinValue+0x70>)
 8000ac2:	689a      	ldr	r2, [r3, #8]
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	73fb      	strb	r3, [r7, #15]

		break;
 8000ad2:	e013      	b.n	8000afc <MDIO_u8GetPinValue+0x64>
	case DIOB:

		LOC_u8Result = GET_BIT(GPIOB->IDR, Copy_u8Pin);
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <MDIO_u8GetPinValue+0x74>)
 8000ad6:	689a      	ldr	r2, [r3, #8]
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	fa22 f303 	lsr.w	r3, r2, r3
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]

		break;
 8000ae6:	e009      	b.n	8000afc <MDIO_u8GetPinValue+0x64>
	case DIOC:

		LOC_u8Result = GET_BIT(GPIOC->IDR, Copy_u8Pin);
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MDIO_u8GetPinValue+0x78>)
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	79bb      	ldrb	r3, [r7, #6]
 8000aee:	fa22 f303 	lsr.w	r3, r2, r3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]

		break;
 8000afa:	bf00      	nop
	}
	return LOC_u8Result;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	40010800 	.word	0x40010800
 8000b0c:	40010c00 	.word	0x40010c00
 8000b10:	40011000 	.word	0x40011000

08000b14 <RCC_voidInitSysClock>:
#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void RCC_voidInitSysClock(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	RCC_CR = 0x00000081; /* Enable HSI + Trimming = 0 */
	RCC_CFGR = 0x00000000;

#elif RCC_CLOCK_TYPE == RCC_PLL
#if RCC_PLL_INPUT == RCC_PLL_IN_HSI_DIV_2
	RCC_CFGR |= (0b10 << 0);
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <RCC_voidInitSysClock+0x30>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <RCC_voidInitSysClock+0x30>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= (0b0111 << 18);
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <RCC_voidInitSysClock+0x30>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <RCC_voidInitSysClock+0x30>)
 8000b2a:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000b2e:	6013      	str	r3, [r2, #0]
	// RCC_CFGR|=(0b100<<8);
	// RCC_CFGR|=(0b101<<11);
	RCC_CR |= (1 << 24);
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <RCC_voidInitSysClock+0x34>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <RCC_voidInitSysClock+0x34>)
 8000b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b3a:	6013      	str	r3, [r2, #0]
#endif

#else
#error("You chosed Wrong Clock type")
#endif
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40021004 	.word	0x40021004
 8000b48:	40021000 	.word	0x40021000

08000b4c <RCC_voidEnablePeripheralClock>:

//==============================================================================================================

void RCC_voidEnablePeripheralClock(u8 Copy_u8BusId, u8 Copy_u8PeripheralId)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	460a      	mov	r2, r1
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	71bb      	strb	r3, [r7, #6]

	if (Copy_u8BusId <= 31)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	2b1f      	cmp	r3, #31
 8000b60:	d82a      	bhi.n	8000bb8 <RCC_voidEnablePeripheralClock+0x6c>
	{
		switch (Copy_u8BusId)
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d01c      	beq.n	8000ba2 <RCC_voidEnablePeripheralClock+0x56>
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	dc25      	bgt.n	8000bb8 <RCC_voidEnablePeripheralClock+0x6c>
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <RCC_voidEnablePeripheralClock+0x2a>
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d00b      	beq.n	8000b8c <RCC_voidEnablePeripheralClock+0x40>

	else
	{
		/* Return Error*/
	}
}
 8000b74:	e020      	b.n	8000bb8 <RCC_voidEnablePeripheralClock+0x6c>
			SET_BIT(RCC_AHBENR, Copy_u8PeripheralId);
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <RCC_voidEnablePeripheralClock+0x78>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	79ba      	ldrb	r2, [r7, #6]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b82:	4611      	mov	r1, r2
 8000b84:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <RCC_voidEnablePeripheralClock+0x78>)
 8000b86:	430b      	orrs	r3, r1
 8000b88:	6013      	str	r3, [r2, #0]
			break;
 8000b8a:	e015      	b.n	8000bb8 <RCC_voidEnablePeripheralClock+0x6c>
			SET_BIT(RCC_APB1ENR, Copy_u8PeripheralId);
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <RCC_voidEnablePeripheralClock+0x7c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	79ba      	ldrb	r2, [r7, #6]
 8000b92:	2101      	movs	r1, #1
 8000b94:	fa01 f202 	lsl.w	r2, r1, r2
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <RCC_voidEnablePeripheralClock+0x7c>)
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	6013      	str	r3, [r2, #0]
			break;
 8000ba0:	e00a      	b.n	8000bb8 <RCC_voidEnablePeripheralClock+0x6c>
			SET_BIT(RCC_APB2ENR, Copy_u8PeripheralId);
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <RCC_voidEnablePeripheralClock+0x80>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	79ba      	ldrb	r2, [r7, #6]
 8000ba8:	2101      	movs	r1, #1
 8000baa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <RCC_voidEnablePeripheralClock+0x80>)
 8000bb2:	430b      	orrs	r3, r1
 8000bb4:	6013      	str	r3, [r2, #0]
			break;
 8000bb6:	bf00      	nop
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40021014 	.word	0x40021014
 8000bc8:	4002101c 	.word	0x4002101c
 8000bcc:	40021018 	.word	0x40021018

08000bd0 <SERVO_voidInit>:
#include "../Src/DIO_interface.h"
#include "../Src/RCC_interface.h"
#include "../Src/RCC_private.h"

void SERVO_voidInit()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
    RCC_voidEnablePeripheralClock(APB1_BUS, TIM2_RCC);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff ffb8 	bl	8000b4c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, SERVO_PORT_RCC);
 8000bdc:	2102      	movs	r1, #2
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff ffb4 	bl	8000b4c <RCC_voidEnablePeripheralClock>

    MDIO_voidSetPinDirection(SERVO_PORT, PIN0, OUTPUT_SPEED_50MHZ_AFPP);
 8000be4:	220b      	movs	r2, #11
 8000be6:	2100      	movs	r1, #0
 8000be8:	2001      	movs	r0, #1
 8000bea:	f7ff fdff 	bl	80007ec <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(SERVO_PORT, PIN1, OUTPUT_SPEED_50MHZ_AFPP);
 8000bee:	220b      	movs	r2, #11
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff fdfa 	bl	80007ec <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(SERVO_PORT, PIN2, OUTPUT_SPEED_50MHZ_AFPP);
 8000bf8:	220b      	movs	r2, #11
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff fdf5 	bl	80007ec <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(SERVO_PORT, PIN3, OUTPUT_SPEED_50MHZ_AFPP);
 8000c02:	220b      	movs	r2, #11
 8000c04:	2103      	movs	r1, #3
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fdf0 	bl	80007ec <MDIO_voidSetPinDirection>

    TIM2_voidInit();
 8000c0c:	f000 f8da 	bl	8000dc4 <TIM2_voidInit>
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u8 servoNumber, u16 angle)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	80bb      	strh	r3, [r7, #4]
    TIM2_voidGeneratePwm(servoNumber, (0.094f / 180) * angle + 0.03f);
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fb4c 	bl	80002c4 <__aeabi_i2f>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	490a      	ldr	r1, [pc, #40]	; (8000c58 <SERVO_voidSetAngle+0x44>)
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fb9b 	bl	800036c <__aeabi_fmul>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4908      	ldr	r1, [pc, #32]	; (8000c5c <SERVO_voidSetAngle+0x48>)
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fa8e 	bl	800015c <__addsf3>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 f937 	bl	8000ebc <TIM2_voidGeneratePwm>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	3a08e5bd 	.word	0x3a08e5bd
 8000c5c:	3cf5c28f 	.word	0x3cf5c28f

08000c60 <TIM1_voidInit>:
TIM_MasterConfigTypeDef sMasterConfig = {0};
TIM_OC_InitTypeDef sConfigOC = {0};
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

void TIM1_voidInit()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
    htim11.Instance = TIM1;
 8000c64:	4b33      	ldr	r3, [pc, #204]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000c66:	4a34      	ldr	r2, [pc, #208]	; (8000d38 <TIM1_voidInit+0xd8>)
 8000c68:	601a      	str	r2, [r3, #0]
    htim11.Init.Prescaler = 16;
 8000c6a:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000c6c:	2210      	movs	r2, #16
 8000c6e:	605a      	str	r2, [r3, #4]
    htim11.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c70:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000c72:	2220      	movs	r2, #32
 8000c74:	609a      	str	r2, [r3, #8]
    htim11.Init.Period = 45000;
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000c78:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8000c7c:	60da      	str	r2, [r3, #12]
    htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
    htim11.Init.RepetitionCounter = 0;
 8000c84:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
    htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim11);
 8000c90:	4828      	ldr	r0, [pc, #160]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000c92:	f000 fe5f 	bl	8001954 <HAL_TIM_Base_Init>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c96:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <TIM1_voidInit+0xdc>)
 8000c98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c9c:	601a      	str	r2, [r3, #0]
    HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig);
 8000c9e:	4927      	ldr	r1, [pc, #156]	; (8000d3c <TIM1_voidInit+0xdc>)
 8000ca0:	4824      	ldr	r0, [pc, #144]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000ca2:	f001 f8cb 	bl	8001e3c <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htim11);
 8000ca6:	4823      	ldr	r0, [pc, #140]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000ca8:	f000 ff14 	bl	8001ad4 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <TIM1_voidInit+0xe0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <TIM1_voidInit+0xe0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	605a      	str	r2, [r3, #4]
    HAL_TIMEx_MasterConfigSynchronization(&htim11, &sMasterConfig);
 8000cb8:	4921      	ldr	r1, [pc, #132]	; (8000d40 <TIM1_voidInit+0xe0>)
 8000cba:	481e      	ldr	r0, [pc, #120]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000cbc:	f001 fc2a 	bl	8002514 <HAL_TIMEx_MasterConfigSynchronization>
    sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <TIM1_voidInit+0xe4>)
 8000cc2:	2270      	movs	r2, #112	; 0x70
 8000cc4:	601a      	str	r2, [r3, #0]
    sConfigOC.Pulse = 0;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <TIM1_voidInit+0xe4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <TIM1_voidInit+0xe4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	; (8000d44 <TIM1_voidInit+0xe4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <TIM1_voidInit+0xe4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <TIM1_voidInit+0xe4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <TIM1_voidInit+0xe4>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
    HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1);
 8000cea:	2200      	movs	r2, #0
 8000cec:	4915      	ldr	r1, [pc, #84]	; (8000d44 <TIM1_voidInit+0xe4>)
 8000cee:	4811      	ldr	r0, [pc, #68]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000cf0:	f000 ffe2 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <TIM1_voidInit+0xe8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <TIM1_voidInit+0xe8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <TIM1_voidInit+0xe8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    sBreakDeadTimeConfig.DeadTime = 0;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <TIM1_voidInit+0xe8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <TIM1_voidInit+0xe8>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <TIM1_voidInit+0xe8>)
 8000d14:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d18:	615a      	str	r2, [r3, #20]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <TIM1_voidInit+0xe8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
    HAL_TIMEx_ConfigBreakDeadTime(&htim11, &sBreakDeadTimeConfig);
 8000d20:	4909      	ldr	r1, [pc, #36]	; (8000d48 <TIM1_voidInit+0xe8>)
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000d24:	f001 fc54 	bl	80025d0 <HAL_TIMEx_ConfigBreakDeadTime>
    HAL_TIM_MspPostInit(&htim11);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <TIM1_voidInit+0xd4>)
 8000d2a:	f000 fbe1 	bl	80014f0 <HAL_TIM_MspPostInit>
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000080 	.word	0x20000080
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	200000c8 	.word	0x200000c8
 8000d40:	200000d8 	.word	0x200000d8
 8000d44:	200000e0 	.word	0x200000e0
 8000d48:	200000fc 	.word	0x200000fc

08000d4c <TIM1_voidStart>:

void TIM1_voidStart()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000d50:	2100      	movs	r1, #0
 8000d52:	4802      	ldr	r0, [pc, #8]	; (8000d5c <TIM1_voidStart+0x10>)
 8000d54:	f000 ff0e 	bl	8001b74 <HAL_TIM_PWM_Start>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000080 	.word	0x20000080

08000d60 <TIM1_voidGeneratePwm>:
{
    return TIM1_CNT & MASK_16_BITS;
}

void TIM1_voidGeneratePwm(u8 channel, f32 dutyCycle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
    u16 compareValue = 45000 * (1 - dutyCycle) - 1;
 8000d6c:	6839      	ldr	r1, [r7, #0]
 8000d6e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000d72:	f7ff f9f1 	bl	8000158 <__aeabi_fsub>
 8000d76:	4603      	mov	r3, r0
 8000d78:	490f      	ldr	r1, [pc, #60]	; (8000db8 <TIM1_voidGeneratePwm+0x58>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff faf6 	bl	800036c <__aeabi_fmul>
 8000d80:	4603      	mov	r3, r0
 8000d82:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff f9e6 	bl	8000158 <__aeabi_fsub>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fcb2 	bl	80006f8 <__aeabi_f2uiz>
 8000d94:	4603      	mov	r3, r0
 8000d96:	81fb      	strh	r3, [r7, #14]
    switch (channel)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d108      	bne.n	8000db0 <TIM1_voidGeneratePwm+0x50>
    {
    case PWM_CHANNEL_1:
        sConfigOC.Pulse = compareValue;
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <TIM1_voidGeneratePwm+0x5c>)
 8000da2:	6053      	str	r3, [r2, #4]
        HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1);
 8000da4:	2200      	movs	r2, #0
 8000da6:	4905      	ldr	r1, [pc, #20]	; (8000dbc <TIM1_voidGeneratePwm+0x5c>)
 8000da8:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <TIM1_voidGeneratePwm+0x60>)
 8000daa:	f000 ff85 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
        break;
 8000dae:	bf00      	nop
    }
}
 8000db0:	bf00      	nop
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	472fc800 	.word	0x472fc800
 8000dbc:	200000e0 	.word	0x200000e0
 8000dc0:	20000080 	.word	0x20000080

08000dc4 <TIM2_voidInit>:
TIM_MasterConfigTypeDef sMasterConfig2 = {0};
TIM_OC_InitTypeDef sConfigOC2 = {0};
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig2 = {0};

void TIM2_voidInit()
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
	htim22.Instance = TIM2;
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000de2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de6:	601a      	str	r2, [r3, #0]
	htim22.Init.Prescaler = 16;
 8000de8:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000dea:	2210      	movs	r2, #16
 8000dec:	605a      	str	r2, [r3, #4]
	htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dee:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
	htim22.Init.Period = 45000;
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000df6:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8000dfa:	60da      	str	r2, [r3, #12]
	htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
	htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e02:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim22);
 8000e08:	481f      	ldr	r0, [pc, #124]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000e0a:	f000 fda3 	bl	8001954 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e12:	60bb      	str	r3, [r7, #8]
	HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig);
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481b      	ldr	r0, [pc, #108]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000e1c:	f001 f80e 	bl	8001e3c <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim22);
 8000e20:	4819      	ldr	r0, [pc, #100]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000e22:	f000 fe57 	bl	8001ad4 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig);
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4815      	ldr	r0, [pc, #84]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000e34:	f001 fb6e 	bl	8002514 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC2.OCMode = TIM_OCMODE_PWM2;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <TIM2_voidInit+0xc8>)
 8000e3a:	2270      	movs	r2, #112	; 0x70
 8000e3c:	601a      	str	r2, [r3, #0]
	sConfigOC2.Pulse = 0;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <TIM2_voidInit+0xc8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	605a      	str	r2, [r3, #4]
	sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <TIM2_voidInit+0xc8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
	sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <TIM2_voidInit+0xc8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
	HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_1);
 8000e50:	2200      	movs	r2, #0
 8000e52:	490e      	ldr	r1, [pc, #56]	; (8000e8c <TIM2_voidInit+0xc8>)
 8000e54:	480c      	ldr	r0, [pc, #48]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000e56:	f000 ff2f 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_2);
 8000e5a:	2204      	movs	r2, #4
 8000e5c:	490b      	ldr	r1, [pc, #44]	; (8000e8c <TIM2_voidInit+0xc8>)
 8000e5e:	480a      	ldr	r0, [pc, #40]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000e60:	f000 ff2a 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_3);
 8000e64:	2208      	movs	r2, #8
 8000e66:	4909      	ldr	r1, [pc, #36]	; (8000e8c <TIM2_voidInit+0xc8>)
 8000e68:	4807      	ldr	r0, [pc, #28]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000e6a:	f000 ff25 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_4);
 8000e6e:	220c      	movs	r2, #12
 8000e70:	4906      	ldr	r1, [pc, #24]	; (8000e8c <TIM2_voidInit+0xc8>)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000e74:	f000 ff20 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim22);
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <TIM2_voidInit+0xc4>)
 8000e7a:	f000 fb39 	bl	80014f0 <HAL_TIM_MspPostInit>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000011c 	.word	0x2000011c
 8000e8c:	20000164 	.word	0x20000164

08000e90 <TIM2_voidStart>:

void TIM2_voidStart()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_1);
 8000e94:	2100      	movs	r1, #0
 8000e96:	4808      	ldr	r0, [pc, #32]	; (8000eb8 <TIM2_voidStart+0x28>)
 8000e98:	f000 fe6c 	bl	8001b74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2);
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	4806      	ldr	r0, [pc, #24]	; (8000eb8 <TIM2_voidStart+0x28>)
 8000ea0:	f000 fe68 	bl	8001b74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_3);
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <TIM2_voidStart+0x28>)
 8000ea8:	f000 fe64 	bl	8001b74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_4);
 8000eac:	210c      	movs	r1, #12
 8000eae:	4802      	ldr	r0, [pc, #8]	; (8000eb8 <TIM2_voidStart+0x28>)
 8000eb0:	f000 fe60 	bl	8001b74 <HAL_TIM_PWM_Start>
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000011c 	.word	0x2000011c

08000ebc <TIM2_voidGeneratePwm>:
{
	return TIMER_2->TIM_CNT;
}

void TIM2_voidGeneratePwm(u8 channel, f32 dutyCycle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
	u16 compareValue = 45000 * (1 - dutyCycle) - 1;
 8000ec8:	6839      	ldr	r1, [r7, #0]
 8000eca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000ece:	f7ff f943 	bl	8000158 <__aeabi_fsub>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	491e      	ldr	r1, [pc, #120]	; (8000f50 <TIM2_voidGeneratePwm+0x94>)
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fa48 	bl	800036c <__aeabi_fmul>
 8000edc:	4603      	mov	r3, r0
 8000ede:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff f938 	bl	8000158 <__aeabi_fsub>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fc04 	bl	80006f8 <__aeabi_f2uiz>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	81fb      	strh	r3, [r7, #14]
	sConfigOC2.Pulse = compareValue;
 8000ef4:	89fb      	ldrh	r3, [r7, #14]
 8000ef6:	4a17      	ldr	r2, [pc, #92]	; (8000f54 <TIM2_voidGeneratePwm+0x98>)
 8000ef8:	6053      	str	r3, [r2, #4]
	switch (channel)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d822      	bhi.n	8000f48 <TIM2_voidGeneratePwm+0x8c>
 8000f02:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <TIM2_voidGeneratePwm+0x4c>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f25 	.word	0x08000f25
 8000f10:	08000f31 	.word	0x08000f31
 8000f14:	08000f3d 	.word	0x08000f3d
	{
	case PWM_CHANNEL_1:
		HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_1);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	490e      	ldr	r1, [pc, #56]	; (8000f54 <TIM2_voidGeneratePwm+0x98>)
 8000f1c:	480e      	ldr	r0, [pc, #56]	; (8000f58 <TIM2_voidGeneratePwm+0x9c>)
 8000f1e:	f000 fecb 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
		break;
 8000f22:	e011      	b.n	8000f48 <TIM2_voidGeneratePwm+0x8c>
	case PWM_CHANNEL_2:
		HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_2);
 8000f24:	2204      	movs	r2, #4
 8000f26:	490b      	ldr	r1, [pc, #44]	; (8000f54 <TIM2_voidGeneratePwm+0x98>)
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <TIM2_voidGeneratePwm+0x9c>)
 8000f2a:	f000 fec5 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
		break;
 8000f2e:	e00b      	b.n	8000f48 <TIM2_voidGeneratePwm+0x8c>
	case PWM_CHANNEL_3:
		HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_3);
 8000f30:	2208      	movs	r2, #8
 8000f32:	4908      	ldr	r1, [pc, #32]	; (8000f54 <TIM2_voidGeneratePwm+0x98>)
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <TIM2_voidGeneratePwm+0x9c>)
 8000f36:	f000 febf 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
		break;
 8000f3a:	e005      	b.n	8000f48 <TIM2_voidGeneratePwm+0x8c>
	case PWM_CHANNEL_4:
		HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_4);
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	4905      	ldr	r1, [pc, #20]	; (8000f54 <TIM2_voidGeneratePwm+0x98>)
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <TIM2_voidGeneratePwm+0x9c>)
 8000f42:	f000 feb9 	bl	8001cb8 <HAL_TIM_PWM_ConfigChannel>
		break;
 8000f46:	bf00      	nop
	}
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	472fc800 	.word	0x472fc800
 8000f54:	20000164 	.word	0x20000164
 8000f58:	2000011c 	.word	0x2000011c

08000f5c <TIM3_voidInit>:
TIM_HandleTypeDef htim33;
TIM_ClockConfigTypeDef sClockSourceConfig3 = {0};
TIM_MasterConfigTypeDef sMasterConfig3 = {0};

void TIM3_voidInit()
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
    htim33.Instance = TIM3;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <TIM3_voidInit+0x58>)
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <TIM3_voidInit+0x5c>)
 8000f64:	601a      	str	r2, [r3, #0]
    htim33.Init.Prescaler = 72;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <TIM3_voidInit+0x58>)
 8000f68:	2248      	movs	r2, #72	; 0x48
 8000f6a:	605a      	str	r2, [r3, #4]
    htim33.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <TIM3_voidInit+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
    htim33.Init.Period = 65535;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <TIM3_voidInit+0x58>)
 8000f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f78:	60da      	str	r2, [r3, #12]
    htim33.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <TIM3_voidInit+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
    htim33.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <TIM3_voidInit+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim33);
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <TIM3_voidInit+0x58>)
 8000f88:	f000 fce4 	bl	8001954 <HAL_TIM_Base_Init>
    sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <TIM3_voidInit+0x60>)
 8000f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f92:	601a      	str	r2, [r3, #0]
    HAL_TIM_ConfigClockSource(&htim33, &sClockSourceConfig3);
 8000f94:	4909      	ldr	r1, [pc, #36]	; (8000fbc <TIM3_voidInit+0x60>)
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <TIM3_voidInit+0x58>)
 8000f98:	f000 ff50 	bl	8001e3c <HAL_TIM_ConfigClockSource>
    sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <TIM3_voidInit+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
    sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <TIM3_voidInit+0x64>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	605a      	str	r2, [r3, #4]
    HAL_TIMEx_MasterConfigSynchronization(&htim33, &sMasterConfig3);
 8000fa8:	4905      	ldr	r1, [pc, #20]	; (8000fc0 <TIM3_voidInit+0x64>)
 8000faa:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <TIM3_voidInit+0x58>)
 8000fac:	f001 fab2 	bl	8002514 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000180 	.word	0x20000180
 8000fb8:	40000400 	.word	0x40000400
 8000fbc:	200001c8 	.word	0x200001c8
 8000fc0:	200001d8 	.word	0x200001d8

08000fc4 <TIM3_voidStart>:

void TIM3_voidStart()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(&htim33);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <TIM3_voidStart+0x10>)
 8000fca:	f000 fd13 	bl	80019f4 <HAL_TIM_Base_Start>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000180 	.word	0x20000180

08000fd8 <TIM3_voidStop>:

void TIM3_voidStop()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Stop(&htim33);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <TIM3_voidStop+0x10>)
 8000fde:	f000 fd53 	bl	8001a88 <HAL_TIM_Base_Stop>
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000180 	.word	0x20000180

08000fec <TIM3_voidSetTimerValue>:

void TIM3_voidSetTimerValue(u16 value)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80fb      	strh	r3, [r7, #6]
    TIM3_CNT = value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <TIM3_voidSetTimerValue+0x1c>)
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40000424 	.word	0x40000424

0800100c <TIM3_u16GetTimerValue>:

u16 TIM3_u16GetTimerValue()
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
    return TIM3_CNT & MASK_16_BITS;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <TIM3_u16GetTimerValue+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	b29b      	uxth	r3, r3
}
 8001016:	4618      	mov	r0, r3
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40000424 	.word	0x40000424

08001024 <TIM3_voidDelay>:

void TIM3_voidDelay(f32 delayTime)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    f32 tickTime = TIM3_PRESCALER / (f32)CLOCK;
 800102c:	4b50      	ldr	r3, [pc, #320]	; (8001170 <TIM3_voidDelay+0x14c>)
 800102e:	61bb      	str	r3, [r7, #24]
    f32 overflowTime = 65536 * tickTime;
 8001030:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8001034:	69b8      	ldr	r0, [r7, #24]
 8001036:	f7ff f999 	bl	800036c <__aeabi_fmul>
 800103a:	4603      	mov	r3, r0
 800103c:	617b      	str	r3, [r7, #20]
    if (delayTime >= overflowTime)
 800103e:	6979      	ldr	r1, [r7, #20]
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fb45 	bl	80006d0 <__aeabi_fcmpge>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d06a      	beq.n	8001122 <TIM3_voidDelay+0xfe>
    {
        u32 numOfOverflows = delayTime / overflowTime, n = 0;
 800104c:	6979      	ldr	r1, [r7, #20]
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fa40 	bl	80004d4 <__aeabi_fdiv>
 8001054:	4603      	mov	r3, r0
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fb4e 	bl	80006f8 <__aeabi_f2uiz>
 800105c:	4603      	mov	r3, r0
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
        f32 fraction = delayTime - numOfOverflows * overflowTime;
 8001064:	6938      	ldr	r0, [r7, #16]
 8001066:	f7ff f929 	bl	80002bc <__aeabi_ui2f>
 800106a:	4603      	mov	r3, r0
 800106c:	6979      	ldr	r1, [r7, #20]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f97c 	bl	800036c <__aeabi_fmul>
 8001074:	4603      	mov	r3, r0
 8001076:	4619      	mov	r1, r3
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff f86d 	bl	8000158 <__aeabi_fsub>
 800107e:	4603      	mov	r3, r0
 8001080:	60fb      	str	r3, [r7, #12]
        TIM3_voidSetTimerValue(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff ffb2 	bl	8000fec <TIM3_voidSetTimerValue>
        while (n < numOfOverflows)
 8001088:	e013      	b.n	80010b2 <TIM3_voidDelay+0x8e>
        {
            TIM3_voidStart();
 800108a:	f7ff ff9b 	bl	8000fc4 <TIM3_voidStart>
            while (!GET_BIT(TIM3_SR, 0))
 800108e:	bf00      	nop
 8001090:	4b38      	ldr	r3, [pc, #224]	; (8001174 <TIM3_voidDelay+0x150>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	2b00      	cmp	r3, #0
 800109a:	d0f9      	beq.n	8001090 <TIM3_voidDelay+0x6c>
                ;
            TIM3_voidStop();
 800109c:	f7ff ff9c 	bl	8000fd8 <TIM3_voidStop>
            CLR_BIT(TIM3_SR, 0);
 80010a0:	4b34      	ldr	r3, [pc, #208]	; (8001174 <TIM3_voidDelay+0x150>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a33      	ldr	r2, [pc, #204]	; (8001174 <TIM3_voidDelay+0x150>)
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	6013      	str	r3, [r2, #0]
            n++;
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	3301      	adds	r3, #1
 80010b0:	61fb      	str	r3, [r7, #28]
        while (n < numOfOverflows)
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3e7      	bcc.n	800108a <TIM3_voidDelay+0x66>
        }
        if (fraction)
 80010ba:	f04f 0100 	mov.w	r1, #0
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f7ff fae8 	bl	8000694 <__aeabi_fcmpeq>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d000      	beq.n	80010cc <TIM3_voidDelay+0xa8>
        while (!GET_BIT(TIM3_SR, 0))
            ;
        TIM3_voidStop();
        CLR_BIT(TIM3_SR, 0);
    }
}
 80010ca:	e04d      	b.n	8001168 <TIM3_voidDelay+0x144>
            TIM3_voidSetTimerValue(65536 - 65536 * (fraction / 10));
 80010cc:	492a      	ldr	r1, [pc, #168]	; (8001178 <TIM3_voidDelay+0x154>)
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f7ff fa00 	bl	80004d4 <__aeabi_fdiv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f946 	bl	800036c <__aeabi_fmul>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 408f 	mov.w	r0, #1199570944	; 0x47800000
 80010e8:	f7ff f836 	bl	8000158 <__aeabi_fsub>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fb02 	bl	80006f8 <__aeabi_f2uiz>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff77 	bl	8000fec <TIM3_voidSetTimerValue>
            TIM3_voidStart();
 80010fe:	f7ff ff61 	bl	8000fc4 <TIM3_voidStart>
            while (!GET_BIT(TIM3_SR, 0))
 8001102:	bf00      	nop
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <TIM3_voidDelay+0x150>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f9      	beq.n	8001104 <TIM3_voidDelay+0xe0>
            TIM3_voidStop();
 8001110:	f7ff ff62 	bl	8000fd8 <TIM3_voidStop>
            CLR_BIT(TIM3_SR, 0);
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <TIM3_voidDelay+0x150>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a16      	ldr	r2, [pc, #88]	; (8001174 <TIM3_voidDelay+0x150>)
 800111a:	f023 0301 	bic.w	r3, r3, #1
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	e022      	b.n	8001168 <TIM3_voidDelay+0x144>
        TIM3_voidSetTimerValue((overflowTime - delayTime) / tickTime);
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	6978      	ldr	r0, [r7, #20]
 8001126:	f7ff f817 	bl	8000158 <__aeabi_fsub>
 800112a:	4603      	mov	r3, r0
 800112c:	69b9      	ldr	r1, [r7, #24]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f9d0 	bl	80004d4 <__aeabi_fdiv>
 8001134:	4603      	mov	r3, r0
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fade 	bl	80006f8 <__aeabi_f2uiz>
 800113c:	4603      	mov	r3, r0
 800113e:	b29b      	uxth	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff53 	bl	8000fec <TIM3_voidSetTimerValue>
        TIM3_voidStart();
 8001146:	f7ff ff3d 	bl	8000fc4 <TIM3_voidStart>
        while (!GET_BIT(TIM3_SR, 0))
 800114a:	bf00      	nop
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <TIM3_voidDelay+0x150>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f9      	beq.n	800114c <TIM3_voidDelay+0x128>
        TIM3_voidStop();
 8001158:	f7ff ff3e 	bl	8000fd8 <TIM3_voidStop>
        CLR_BIT(TIM3_SR, 0);
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <TIM3_voidDelay+0x150>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <TIM3_voidDelay+0x150>)
 8001162:	f023 0301 	bic.w	r3, r3, #1
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	3720      	adds	r7, #32
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	360637bd 	.word	0x360637bd
 8001174:	40000410 	.word	0x40000410
 8001178:	41200000 	.word	0x41200000

0800117c <ULTRASONIC_voidInit>:
#include "../Src/DIO_interface.h"
#include "../Src/RCC_interface.h"
#include "../Src/RCC_private.h"

void ULTRASONIC_voidInit()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
    RCC_voidEnablePeripheralClock(APB1_BUS, TIM3_RCC);
 8001180:	2101      	movs	r1, #1
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff fce2 	bl	8000b4c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, ULTRASONIC_PORT_RCC);
 8001188:	2102      	movs	r1, #2
 800118a:	2002      	movs	r0, #2
 800118c:	f7ff fcde 	bl	8000b4c <RCC_voidEnablePeripheralClock>
    TIM3_voidInit();
 8001190:	f7ff fee4 	bl	8000f5c <TIM3_voidInit>
    MDIO_voidSetPinDirection(ULTRASONIC_PORT, ULTRASONIC_TRIG, OUTPUT_SPEED_2MHZ_PP);
 8001194:	2202      	movs	r2, #2
 8001196:	2104      	movs	r1, #4
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fb27 	bl	80007ec <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(ULTRASONIC_PORT, ULTRASONIC_ECHO, INPUT_PULLUP_PULLDOWN);
 800119e:	2208      	movs	r2, #8
 80011a0:	2105      	movs	r1, #5
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff fb22 	bl	80007ec <MDIO_voidSetPinDirection>
    MDIO_voidSetPinValue(ULTRASONIC_PORT, ULTRASONIC_ECHO, DIO_LOW);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2105      	movs	r1, #5
 80011ac:	2001      	movs	r0, #1
 80011ae:	f7ff fbf9 	bl	80009a4 <MDIO_voidSetPinValue>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <ULTRASONIC_f32GetDistance>:

f32 ULTRASONIC_f32GetDistance()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    MDIO_voidSetPinValue(ULTRASONIC_PORT, ULTRASONIC_TRIG, DIO_HIGH);
 80011bc:	2201      	movs	r2, #1
 80011be:	2104      	movs	r1, #4
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff fbef 	bl	80009a4 <MDIO_voidSetPinValue>
    TIM3_voidDelay(0.000015f);
 80011c6:	481e      	ldr	r0, [pc, #120]	; (8001240 <ULTRASONIC_f32GetDistance+0x88>)
 80011c8:	f7ff ff2c 	bl	8001024 <TIM3_voidDelay>
    MDIO_voidSetPinValue(ULTRASONIC_PORT, ULTRASONIC_TRIG, DIO_LOW);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2104      	movs	r1, #4
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff fbe7 	bl	80009a4 <MDIO_voidSetPinValue>
    while (!MDIO_u8GetPinValue(ULTRASONIC_PORT, ULTRASONIC_ECHO))
 80011d6:	bf00      	nop
 80011d8:	2105      	movs	r1, #5
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff fc5c 	bl	8000a98 <MDIO_u8GetPinValue>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f8      	beq.n	80011d8 <ULTRASONIC_f32GetDistance+0x20>
        ;
    TIM3_voidSetTimerValue(0);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff ff00 	bl	8000fec <TIM3_voidSetTimerValue>
    TIM3_voidStart();
 80011ec:	f7ff feea 	bl	8000fc4 <TIM3_voidStart>
    while (MDIO_u8GetPinValue(ULTRASONIC_PORT, ULTRASONIC_ECHO))
 80011f0:	e007      	b.n	8001202 <ULTRASONIC_f32GetDistance+0x4a>
        if (TIM3_u16GetTimerValue() > 11764)
 80011f2:	f7ff ff0b 	bl	800100c <TIM3_u16GetTimerValue>
 80011f6:	4603      	mov	r3, r0
 80011f8:	461a      	mov	r2, r3
 80011fa:	f642 53f4 	movw	r3, #11764	; 0x2df4
 80011fe:	429a      	cmp	r2, r3
 8001200:	d807      	bhi.n	8001212 <ULTRASONIC_f32GetDistance+0x5a>
    while (MDIO_u8GetPinValue(ULTRASONIC_PORT, ULTRASONIC_ECHO))
 8001202:	2105      	movs	r1, #5
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff fc47 	bl	8000a98 <MDIO_u8GetPinValue>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f0      	bne.n	80011f2 <ULTRASONIC_f32GetDistance+0x3a>
 8001210:	e000      	b.n	8001214 <ULTRASONIC_f32GetDistance+0x5c>
            break;
 8001212:	bf00      	nop
    TIM3_voidStop();
 8001214:	f7ff fee0 	bl	8000fd8 <TIM3_voidStop>
    return 340.0f * TIM3_u16GetTimerValue() * 0.000001f;
 8001218:	f7ff fef8 	bl	800100c <TIM3_u16GetTimerValue>
 800121c:	4603      	mov	r3, r0
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f850 	bl	80002c4 <__aeabi_i2f>
 8001224:	4603      	mov	r3, r0
 8001226:	4907      	ldr	r1, [pc, #28]	; (8001244 <ULTRASONIC_f32GetDistance+0x8c>)
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f89f 	bl	800036c <__aeabi_fmul>
 800122e:	4603      	mov	r3, r0
 8001230:	4905      	ldr	r1, [pc, #20]	; (8001248 <ULTRASONIC_f32GetDistance+0x90>)
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f89a 	bl	800036c <__aeabi_fmul>
 8001238:	4603      	mov	r3, r0
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	377ba882 	.word	0x377ba882
 8001244:	43aa0000 	.word	0x43aa0000
 8001248:	358637bd 	.word	0x358637bd

0800124c <USART_voidInit>:
#include "USART_interface.h"
#include "USART_private.h"
#include "../Common/bit_math.h"

void USART_voidInit()
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
    USART_CR1 = USART_CR1_MASK;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <USART_voidInit+0x28>)
 8001252:	f242 4220 	movw	r2, #9248	; 0x2420
 8001256:	601a      	str	r2, [r3, #0]
    USART_BRR = USART_BAUD_9600_MASK;
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <USART_voidInit+0x2c>)
 800125a:	f640 62a6 	movw	r2, #3750	; 0xea6
 800125e:	601a      	str	r2, [r3, #0]
    USART_RX_ENABLE();
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <USART_voidInit+0x28>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a03      	ldr	r2, [pc, #12]	; (8001274 <USART_voidInit+0x28>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	4001380c 	.word	0x4001380c
 8001278:	40013808 	.word	0x40013808

0800127c <appInit>:
static f32 distance = 4.0f;
static s8 speed = INITIAL_SPEED;
static volatile u8 data = EMPTY_DATA, angle = INITIAL_ANGLE, angle_temp = INITIAL_ANGLE;

void appInit()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
    RCC_voidInitSysClock();
 8001280:	f7ff fc48 	bl	8000b14 <RCC_voidInitSysClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, DIOA_RCC);
 8001284:	2102      	movs	r1, #2
 8001286:	2002      	movs	r0, #2
 8001288:	f7ff fc60 	bl	8000b4c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, DIOB_RCC);
 800128c:	2103      	movs	r1, #3
 800128e:	2002      	movs	r0, #2
 8001290:	f7ff fc5c 	bl	8000b4c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, USART1_RCC);
 8001294:	210e      	movs	r1, #14
 8001296:	2002      	movs	r0, #2
 8001298:	f7ff fc58 	bl	8000b4c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, TIM1_RCC);
 800129c:	210b      	movs	r1, #11
 800129e:	2002      	movs	r0, #2
 80012a0:	f7ff fc54 	bl	8000b4c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB1_BUS, TIM2_RCC);
 80012a4:	2100      	movs	r1, #0
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff fc50 	bl	8000b4c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB1_BUS, TIM3_RCC);
 80012ac:	2101      	movs	r1, #1
 80012ae:	2001      	movs	r0, #1
 80012b0:	f7ff fc4c 	bl	8000b4c <RCC_voidEnablePeripheralClock>

    MDIO_voidSetPinDirection(DIOA, PIN10, INPUT_FLOATING);
 80012b4:	2204      	movs	r2, #4
 80012b6:	210a      	movs	r1, #10
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff fa97 	bl	80007ec <MDIO_voidSetPinDirection>

    USART_voidInit();
 80012be:	f7ff ffc5 	bl	800124c <USART_voidInit>
    DC_voidInit();
 80012c2:	f7ff fa39 	bl	8000738 <DC_voidInit>
    SERVO_voidInit();
 80012c6:	f7ff fc83 	bl	8000bd0 <SERVO_voidInit>
    ULTRASONIC_voidInit();
 80012ca:	f7ff ff57 	bl	800117c <ULTRASONIC_voidInit>

    SERVO_voidSetAngle(SERVO_STEERING, INITIAL_ANGLE);
 80012ce:	215a      	movs	r1, #90	; 0x5a
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff fc9f 	bl	8000c14 <SERVO_voidSetAngle>
//    TIM3_voidDelay(5.0f);
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <getDistance>:
    } while (driver == EMPTY_DATA);
//    TIM2_voidStart();
}

void getDistance()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 200;
 80012e2:	23c8      	movs	r3, #200	; 0xc8
 80012e4:	607b      	str	r3, [r7, #4]
    xLastWakeTime = xTaskGetTickCount();
 80012e6:	f001 fd27 	bl	8002d38 <xTaskGetTickCount>
 80012ea:	4603      	mov	r3, r0
 80012ec:	603b      	str	r3, [r7, #0]
    while (1)
    {
        distance = ULTRASONIC_f32GetDistance();
 80012ee:	f7ff ff63 	bl	80011b8 <ULTRASONIC_f32GetDistance>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <getDistance+0x28>)
 80012f6:	6013      	str	r3, [r2, #0]
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80012f8:	463b      	mov	r3, r7
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 fba3 	bl	8002a48 <vTaskDelayUntil>
        distance = ULTRASONIC_f32GetDistance();
 8001302:	e7f4      	b.n	80012ee <getDistance+0x12>
 8001304:	20000000 	.word	0x20000000

08001308 <updateSpeedAndDirection>:
    }
}

void updateSpeedAndDirection()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 100;
 800130e:	2364      	movs	r3, #100	; 0x64
 8001310:	607b      	str	r3, [r7, #4]
    xLastWakeTime = xTaskGetTickCount();
 8001312:	f001 fd11 	bl	8002d38 <xTaskGetTickCount>
 8001316:	4603      	mov	r3, r0
 8001318:	603b      	str	r3, [r7, #0]
    while (1)
    {
        // processing distance and changing speed
        if (distance <= ACC_THRESHOLD)
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <updateSpeedAndDirection+0xe4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f9ca 	bl	80006bc <__aeabi_fcmple>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d009      	beq.n	8001342 <updateSpeedAndDirection+0x3a>
            speed -= 10;
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <updateSpeedAndDirection+0xe8>)
 8001330:	f993 3000 	ldrsb.w	r3, [r3]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	3b0a      	subs	r3, #10
 8001338:	b2db      	uxtb	r3, r3
 800133a:	b25a      	sxtb	r2, r3
 800133c:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <updateSpeedAndDirection+0xe8>)
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	e016      	b.n	8001370 <updateSpeedAndDirection+0x68>
        else if (distance <= AEB_THRESHOLD)
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <updateSpeedAndDirection+0xe4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f9b6 	bl	80006bc <__aeabi_fcmple>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <updateSpeedAndDirection+0x56>
            speed = 0;
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <updateSpeedAndDirection+0xe8>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e008      	b.n	8001370 <updateSpeedAndDirection+0x68>
        else
            speed += 5;
 800135e:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <updateSpeedAndDirection+0xe8>)
 8001360:	f993 3000 	ldrsb.w	r3, [r3]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	3305      	adds	r3, #5
 8001368:	b2db      	uxtb	r3, r3
 800136a:	b25a      	sxtb	r2, r3
 800136c:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <updateSpeedAndDirection+0xe8>)
 800136e:	701a      	strb	r2, [r3, #0]

        // keeping speed in the range [0, MAX_SPEED]
        if (speed > MAX_SPEED)
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <updateSpeedAndDirection+0xe8>)
 8001372:	f993 3000 	ldrsb.w	r3, [r3]
 8001376:	2b3c      	cmp	r3, #60	; 0x3c
 8001378:	dd03      	ble.n	8001382 <updateSpeedAndDirection+0x7a>
            speed = MAX_SPEED;
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <updateSpeedAndDirection+0xe8>)
 800137c:	223c      	movs	r2, #60	; 0x3c
 800137e:	701a      	strb	r2, [r3, #0]
 8001380:	e007      	b.n	8001392 <updateSpeedAndDirection+0x8a>
        else if (speed < 0)
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <updateSpeedAndDirection+0xe8>)
 8001384:	f993 3000 	ldrsb.w	r3, [r3]
 8001388:	2b00      	cmp	r3, #0
 800138a:	da02      	bge.n	8001392 <updateSpeedAndDirection+0x8a>
            speed = 0;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <updateSpeedAndDirection+0xe8>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]

        // applying speed changes
        if (speed)
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <updateSpeedAndDirection+0xe8>)
 8001394:	f993 3000 	ldrsb.w	r3, [r3]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d009      	beq.n	80013b0 <updateSpeedAndDirection+0xa8>
        {
            DC_voidStart();
 800139c:	f7ff fa0a 	bl	80007b4 <DC_voidStart>
            DC_voidSetSpeed(speed);
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <updateSpeedAndDirection+0xe8>)
 80013a2:	f993 3000 	ldrsb.w	r3, [r3]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f9e7 	bl	800077c <DC_voidSetSpeed>
 80013ae:	e001      	b.n	80013b4 <updateSpeedAndDirection+0xac>
        }
        else
            DC_voidStop();
 80013b0:	f7ff fa0e 	bl	80007d0 <DC_voidStop>

        // adjusting steering angle
        if (angle_temp != angle)
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <updateSpeedAndDirection+0xec>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <updateSpeedAndDirection+0xf0>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d00c      	beq.n	80013de <updateSpeedAndDirection+0xd6>
		{
			angle = angle_temp;
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <updateSpeedAndDirection+0xec>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <updateSpeedAndDirection+0xf0>)
 80013cc:	701a      	strb	r2, [r3, #0]
			SERVO_voidSetAngle(SERVO_STEERING, angle);
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <updateSpeedAndDirection+0xf0>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff fc1b 	bl	8000c14 <SERVO_voidSetAngle>
		}

        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80013de:	463b      	mov	r3, r7
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fb30 	bl	8002a48 <vTaskDelayUntil>
        if (distance <= ACC_THRESHOLD)
 80013e8:	e797      	b.n	800131a <updateSpeedAndDirection+0x12>
 80013ea:	bf00      	nop
 80013ec:	20000000 	.word	0x20000000
 80013f0:	20000004 	.word	0x20000004
 80013f4:	20000006 	.word	0x20000006
 80013f8:	20000005 	.word	0x20000005

080013fc <main>:
#include "../../Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
#include "../../Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
#include "DC_interface.h"

int main()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af02      	add	r7, sp, #8
    appInit();
 8001402:	f7ff ff3b 	bl	800127c <appInit>
//    applyDriverProfile();
    TIM2_voidStart();
 8001406:	f7ff fd43 	bl	8000e90 <TIM2_voidStart>
    DC_voidSetSpeed(INITIAL_SPEED);
 800140a:	201e      	movs	r0, #30
 800140c:	f7ff f9b6 	bl	800077c <DC_voidSetSpeed>
    DC_voidStart();
 8001410:	f7ff f9d0 	bl	80007b4 <DC_voidStart>

    xTaskCreate(getDistance, "Measuring Distance", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
 8001414:	2300      	movs	r3, #0
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	2304      	movs	r3, #4
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2300      	movs	r3, #0
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	4908      	ldr	r1, [pc, #32]	; (8001444 <main+0x48>)
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <main+0x4c>)
 8001424:	f001 f9d4 	bl	80027d0 <xTaskCreate>
    xTaskCreate(updateSpeedAndDirection, "Managing AEB and ACC", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 8001428:	2300      	movs	r3, #0
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	2303      	movs	r3, #3
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2300      	movs	r3, #0
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	4905      	ldr	r1, [pc, #20]	; (800144c <main+0x50>)
 8001436:	4806      	ldr	r0, [pc, #24]	; (8001450 <main+0x54>)
 8001438:	f001 f9ca 	bl	80027d0 <xTaskCreate>
//    xTaskCreate(receiveUartFrame, "Receiving Frames from ESP32", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
//    xTaskCreate(steeringControl, "Direction Control", configMINIMAL_STACK_SIZE, NULL, 1, NULL);

    vTaskStartScheduler();
 800143c:	f001 fb82 	bl	8002b44 <vTaskStartScheduler>
    while (1)
 8001440:	e7fe      	b.n	8001440 <main+0x44>
 8001442:	bf00      	nop
 8001444:	080038b0 	.word	0x080038b0
 8001448:	080012dd 	.word	0x080012dd
 800144c:	080038c4 	.word	0x080038c4
 8001450:	08001309 	.word	0x08001309

08001454 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001454:	b480      	push	{r7}
 8001456:	b085      	sub	sp, #20
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a12      	ldr	r2, [pc, #72]	; (80014ac <HAL_TIM_PWM_MspInit+0x58>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d10c      	bne.n	8001480 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <HAL_TIM_PWM_MspInit+0x5c>)
 800146c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001470:	6193      	str	r3, [r2, #24]
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800147e:	e010      	b.n	80014a2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM2)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001488:	d10b      	bne.n	80014a2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_TIM_PWM_MspInit+0x5c>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40012c00 	.word	0x40012c00
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <HAL_TIM_Base_MspInit+0x34>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10b      	bne.n	80014de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_TIM_Base_MspInit+0x38>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_TIM_Base_MspInit+0x38>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	61d3      	str	r3, [r2, #28]
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_TIM_Base_MspInit+0x38>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	40000400 	.word	0x40000400
 80014ec:	40021000 	.word	0x40021000

080014f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <HAL_TIM_MspPostInit+0x98>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d119      	bne.n	8001544 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_TIM_MspPostInit+0x9c>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a1d      	ldr	r2, [pc, #116]	; (800158c <HAL_TIM_MspPostInit+0x9c>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_TIM_MspPostInit+0x9c>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2302      	movs	r3, #2
 8001534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	4619      	mov	r1, r3
 800153c:	4814      	ldr	r0, [pc, #80]	; (8001590 <HAL_TIM_MspPostInit+0xa0>)
 800153e:	f000 f885 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001542:	e01c      	b.n	800157e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM2)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800154c:	d117      	bne.n	800157e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_TIM_MspPostInit+0x9c>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	4a0e      	ldr	r2, [pc, #56]	; (800158c <HAL_TIM_MspPostInit+0x9c>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6193      	str	r3, [r2, #24]
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <HAL_TIM_MspPostInit+0x9c>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001566:	230f      	movs	r3, #15
 8001568:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2302      	movs	r3, #2
 8001570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_TIM_MspPostInit+0xa0>)
 800157a:	f000 f867 	bl	800164c <HAL_GPIO_Init>
}
 800157e:	bf00      	nop
 8001580:	3720      	adds	r7, #32
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40012c00 	.word	0x40012c00
 800158c:	40021000 	.word	0x40021000
 8001590:	40010800 	.word	0x40010800

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr

080015be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c2:	f000 f831 	bl	8001628 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015c6:	f001 ff1f 	bl	8003408 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}

080015ce <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
	...

080015dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015dc:	f7ff fff7 	bl	80015ce <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015e2:	490c      	ldr	r1, [pc, #48]	; (8001614 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e8:	e002      	b.n	80015f0 <LoopCopyDataInit>

080015ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ee:	3304      	adds	r3, #4

080015f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f4:	d3f9      	bcc.n	80015ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015f8:	4c09      	ldr	r4, [pc, #36]	; (8001620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015fc:	e001      	b.n	8001602 <LoopFillZerobss>

080015fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001600:	3204      	adds	r2, #4

08001602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001604:	d3fb      	bcc.n	80015fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001606:	f002 f923 	bl	8003850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160a:	f7ff fef7 	bl	80013fc <main>
  bx lr
 800160e:	4770      	bx	lr
  ldr r0, =_sdata
 8001610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001614:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001618:	080038ec 	.word	0x080038ec
  ldr r2, =_sbss
 800161c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001620:	2000103c 	.word	0x2000103c

08001624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_2_IRQHandler>
	...

08001628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <HAL_IncTick+0x1c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_IncTick+0x20>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a03      	ldr	r2, [pc, #12]	; (8001648 <HAL_IncTick+0x20>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	2000000c 	.word	0x2000000c
 8001648:	200001e0 	.word	0x200001e0

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b08b      	sub	sp, #44	; 0x2c
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165e:	e169      	b.n	8001934 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001660:	2201      	movs	r2, #1
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	429a      	cmp	r2, r3
 800167a:	f040 8158 	bne.w	800192e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4a9a      	ldr	r2, [pc, #616]	; (80018ec <HAL_GPIO_Init+0x2a0>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d05e      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 8001688:	4a98      	ldr	r2, [pc, #608]	; (80018ec <HAL_GPIO_Init+0x2a0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d875      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 800168e:	4a98      	ldr	r2, [pc, #608]	; (80018f0 <HAL_GPIO_Init+0x2a4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d058      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 8001694:	4a96      	ldr	r2, [pc, #600]	; (80018f0 <HAL_GPIO_Init+0x2a4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d86f      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 800169a:	4a96      	ldr	r2, [pc, #600]	; (80018f4 <HAL_GPIO_Init+0x2a8>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d052      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 80016a0:	4a94      	ldr	r2, [pc, #592]	; (80018f4 <HAL_GPIO_Init+0x2a8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d869      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016a6:	4a94      	ldr	r2, [pc, #592]	; (80018f8 <HAL_GPIO_Init+0x2ac>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d04c      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 80016ac:	4a92      	ldr	r2, [pc, #584]	; (80018f8 <HAL_GPIO_Init+0x2ac>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d863      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016b2:	4a92      	ldr	r2, [pc, #584]	; (80018fc <HAL_GPIO_Init+0x2b0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d046      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 80016b8:	4a90      	ldr	r2, [pc, #576]	; (80018fc <HAL_GPIO_Init+0x2b0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d85d      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016be:	2b12      	cmp	r3, #18
 80016c0:	d82a      	bhi.n	8001718 <HAL_GPIO_Init+0xcc>
 80016c2:	2b12      	cmp	r3, #18
 80016c4:	d859      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016c6:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <HAL_GPIO_Init+0x80>)
 80016c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016cc:	08001747 	.word	0x08001747
 80016d0:	08001721 	.word	0x08001721
 80016d4:	08001733 	.word	0x08001733
 80016d8:	08001775 	.word	0x08001775
 80016dc:	0800177b 	.word	0x0800177b
 80016e0:	0800177b 	.word	0x0800177b
 80016e4:	0800177b 	.word	0x0800177b
 80016e8:	0800177b 	.word	0x0800177b
 80016ec:	0800177b 	.word	0x0800177b
 80016f0:	0800177b 	.word	0x0800177b
 80016f4:	0800177b 	.word	0x0800177b
 80016f8:	0800177b 	.word	0x0800177b
 80016fc:	0800177b 	.word	0x0800177b
 8001700:	0800177b 	.word	0x0800177b
 8001704:	0800177b 	.word	0x0800177b
 8001708:	0800177b 	.word	0x0800177b
 800170c:	0800177b 	.word	0x0800177b
 8001710:	08001729 	.word	0x08001729
 8001714:	0800173d 	.word	0x0800173d
 8001718:	4a79      	ldr	r2, [pc, #484]	; (8001900 <HAL_GPIO_Init+0x2b4>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800171e:	e02c      	b.n	800177a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	623b      	str	r3, [r7, #32]
          break;
 8001726:	e029      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	3304      	adds	r3, #4
 800172e:	623b      	str	r3, [r7, #32]
          break;
 8001730:	e024      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	3308      	adds	r3, #8
 8001738:	623b      	str	r3, [r7, #32]
          break;
 800173a:	e01f      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	330c      	adds	r3, #12
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	e01a      	b.n	800177c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800174e:	2304      	movs	r3, #4
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e013      	b.n	800177c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d105      	bne.n	8001768 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800175c:	2308      	movs	r3, #8
 800175e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	611a      	str	r2, [r3, #16]
          break;
 8001766:	e009      	b.n	800177c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001768:	2308      	movs	r3, #8
 800176a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	615a      	str	r2, [r3, #20]
          break;
 8001772:	e003      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
          break;
 8001778:	e000      	b.n	800177c <HAL_GPIO_Init+0x130>
          break;
 800177a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2bff      	cmp	r3, #255	; 0xff
 8001780:	d801      	bhi.n	8001786 <HAL_GPIO_Init+0x13a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	e001      	b.n	800178a <HAL_GPIO_Init+0x13e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3304      	adds	r3, #4
 800178a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2bff      	cmp	r3, #255	; 0xff
 8001790:	d802      	bhi.n	8001798 <HAL_GPIO_Init+0x14c>
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	e002      	b.n	800179e <HAL_GPIO_Init+0x152>
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	3b08      	subs	r3, #8
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	210f      	movs	r1, #15
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	6a39      	ldr	r1, [r7, #32]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80b1 	beq.w	800192e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017cc:	4b4d      	ldr	r3, [pc, #308]	; (8001904 <HAL_GPIO_Init+0x2b8>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a4c      	ldr	r2, [pc, #304]	; (8001904 <HAL_GPIO_Init+0x2b8>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <HAL_GPIO_Init+0x2b8>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017e4:	4a48      	ldr	r2, [pc, #288]	; (8001908 <HAL_GPIO_Init+0x2bc>)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a40      	ldr	r2, [pc, #256]	; (800190c <HAL_GPIO_Init+0x2c0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d013      	beq.n	8001838 <HAL_GPIO_Init+0x1ec>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a3f      	ldr	r2, [pc, #252]	; (8001910 <HAL_GPIO_Init+0x2c4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d00d      	beq.n	8001834 <HAL_GPIO_Init+0x1e8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a3e      	ldr	r2, [pc, #248]	; (8001914 <HAL_GPIO_Init+0x2c8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d007      	beq.n	8001830 <HAL_GPIO_Init+0x1e4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a3d      	ldr	r2, [pc, #244]	; (8001918 <HAL_GPIO_Init+0x2cc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d101      	bne.n	800182c <HAL_GPIO_Init+0x1e0>
 8001828:	2303      	movs	r3, #3
 800182a:	e006      	b.n	800183a <HAL_GPIO_Init+0x1ee>
 800182c:	2304      	movs	r3, #4
 800182e:	e004      	b.n	800183a <HAL_GPIO_Init+0x1ee>
 8001830:	2302      	movs	r3, #2
 8001832:	e002      	b.n	800183a <HAL_GPIO_Init+0x1ee>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_GPIO_Init+0x1ee>
 8001838:	2300      	movs	r3, #0
 800183a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800183c:	f002 0203 	and.w	r2, r2, #3
 8001840:	0092      	lsls	r2, r2, #2
 8001842:	4093      	lsls	r3, r2
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800184a:	492f      	ldr	r1, [pc, #188]	; (8001908 <HAL_GPIO_Init+0x2bc>)
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001864:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_GPIO_Init+0x2d0>)
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	492c      	ldr	r1, [pc, #176]	; (800191c <HAL_GPIO_Init+0x2d0>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	608b      	str	r3, [r1, #8]
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001872:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_GPIO_Init+0x2d0>)
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	43db      	mvns	r3, r3
 800187a:	4928      	ldr	r1, [pc, #160]	; (800191c <HAL_GPIO_Init+0x2d0>)
 800187c:	4013      	ands	r3, r2
 800187e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_GPIO_Init+0x2d0>)
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	4922      	ldr	r1, [pc, #136]	; (800191c <HAL_GPIO_Init+0x2d0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	60cb      	str	r3, [r1, #12]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_GPIO_Init+0x2d0>)
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	491e      	ldr	r1, [pc, #120]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4918      	ldr	r1, [pc, #96]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4914      	ldr	r1, [pc, #80]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d021      	beq.n	8001920 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018dc:	4b0f      	ldr	r3, [pc, #60]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	490e      	ldr	r1, [pc, #56]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	e021      	b.n	800192e <HAL_GPIO_Init+0x2e2>
 80018ea:	bf00      	nop
 80018ec:	10320000 	.word	0x10320000
 80018f0:	10310000 	.word	0x10310000
 80018f4:	10220000 	.word	0x10220000
 80018f8:	10210000 	.word	0x10210000
 80018fc:	10120000 	.word	0x10120000
 8001900:	10110000 	.word	0x10110000
 8001904:	40021000 	.word	0x40021000
 8001908:	40010000 	.word	0x40010000
 800190c:	40010800 	.word	0x40010800
 8001910:	40010c00 	.word	0x40010c00
 8001914:	40011000 	.word	0x40011000
 8001918:	40011400 	.word	0x40011400
 800191c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_GPIO_Init+0x304>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	43db      	mvns	r3, r3
 8001928:	4909      	ldr	r1, [pc, #36]	; (8001950 <HAL_GPIO_Init+0x304>)
 800192a:	4013      	ands	r3, r2
 800192c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	3301      	adds	r3, #1
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	fa22 f303 	lsr.w	r3, r2, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	f47f ae8e 	bne.w	8001660 <HAL_GPIO_Init+0x14>
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	372c      	adds	r7, #44	; 0x2c
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40010400 	.word	0x40010400

08001954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e041      	b.n	80019ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d106      	bne.n	8001980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff fd9a 	bl	80014b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3304      	adds	r3, #4
 8001990:	4619      	mov	r1, r3
 8001992:	4610      	mov	r0, r2
 8001994:	f000 fb1a 	bl	8001fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d001      	beq.n	8001a0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e032      	b.n	8001a72 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a18      	ldr	r2, [pc, #96]	; (8001a7c <HAL_TIM_Base_Start+0x88>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00e      	beq.n	8001a3c <HAL_TIM_Base_Start+0x48>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a26:	d009      	beq.n	8001a3c <HAL_TIM_Base_Start+0x48>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <HAL_TIM_Base_Start+0x8c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d004      	beq.n	8001a3c <HAL_TIM_Base_Start+0x48>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_TIM_Base_Start+0x90>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d111      	bne.n	8001a60 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d010      	beq.n	8001a70 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f042 0201 	orr.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a5e:	e007      	b.n	8001a70 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0201 	orr.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	40012c00 	.word	0x40012c00
 8001a80:	40000400 	.word	0x40000400
 8001a84:	40000800 	.word	0x40000800

08001a88 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6a1a      	ldr	r2, [r3, #32]
 8001a96:	f241 1311 	movw	r3, #4369	; 0x1111
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10f      	bne.n	8001ac0 <HAL_TIM_Base_Stop+0x38>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6a1a      	ldr	r2, [r3, #32]
 8001aa6:	f240 4344 	movw	r3, #1092	; 0x444
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d107      	bne.n	8001ac0 <HAL_TIM_Base_Stop+0x38>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0201 	bic.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e041      	b.n	8001b6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d106      	bne.n	8001b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fcaa 	bl	8001454 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4610      	mov	r0, r2
 8001b14:	f000 fa5a 	bl	8001fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_TIM_PWM_Start+0x24>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e022      	b.n	8001bde <HAL_TIM_PWM_Start+0x6a>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d109      	bne.n	8001bb2 <HAL_TIM_PWM_Start+0x3e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	e015      	b.n	8001bde <HAL_TIM_PWM_Start+0x6a>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d109      	bne.n	8001bcc <HAL_TIM_PWM_Start+0x58>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e008      	b.n	8001bde <HAL_TIM_PWM_Start+0x6a>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e05e      	b.n	8001ca4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d104      	bne.n	8001bf6 <HAL_TIM_PWM_Start+0x82>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bf4:	e013      	b.n	8001c1e <HAL_TIM_PWM_Start+0xaa>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2b04      	cmp	r3, #4
 8001bfa:	d104      	bne.n	8001c06 <HAL_TIM_PWM_Start+0x92>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c04:	e00b      	b.n	8001c1e <HAL_TIM_PWM_Start+0xaa>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d104      	bne.n	8001c16 <HAL_TIM_PWM_Start+0xa2>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c14:	e003      	b.n	8001c1e <HAL_TIM_PWM_Start+0xaa>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2201      	movs	r2, #1
 8001c24:	6839      	ldr	r1, [r7, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 fc50 	bl	80024cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_TIM_PWM_Start+0x138>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d107      	bne.n	8001c46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_TIM_PWM_Start+0x138>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00e      	beq.n	8001c6e <HAL_TIM_PWM_Start+0xfa>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c58:	d009      	beq.n	8001c6e <HAL_TIM_PWM_Start+0xfa>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <HAL_TIM_PWM_Start+0x13c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d004      	beq.n	8001c6e <HAL_TIM_PWM_Start+0xfa>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <HAL_TIM_PWM_Start+0x140>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d111      	bne.n	8001c92 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b06      	cmp	r3, #6
 8001c7e:	d010      	beq.n	8001ca2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c90:	e007      	b.n	8001ca2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40012c00 	.word	0x40012c00
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800

08001cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	e0ae      	b.n	8001e34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	f200 809f 	bhi.w	8001e24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ce6:	a201      	add	r2, pc, #4	; (adr r2, 8001cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cec:	08001d21 	.word	0x08001d21
 8001cf0:	08001e25 	.word	0x08001e25
 8001cf4:	08001e25 	.word	0x08001e25
 8001cf8:	08001e25 	.word	0x08001e25
 8001cfc:	08001d61 	.word	0x08001d61
 8001d00:	08001e25 	.word	0x08001e25
 8001d04:	08001e25 	.word	0x08001e25
 8001d08:	08001e25 	.word	0x08001e25
 8001d0c:	08001da3 	.word	0x08001da3
 8001d10:	08001e25 	.word	0x08001e25
 8001d14:	08001e25 	.word	0x08001e25
 8001d18:	08001e25 	.word	0x08001e25
 8001d1c:	08001de3 	.word	0x08001de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f9b2 	bl	8002090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0208 	orr.w	r2, r2, #8
 8001d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0204 	bic.w	r2, r2, #4
 8001d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6999      	ldr	r1, [r3, #24]
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	619a      	str	r2, [r3, #24]
      break;
 8001d5e:	e064      	b.n	8001e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f9f8 	bl	800215c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699a      	ldr	r2, [r3, #24]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6999      	ldr	r1, [r3, #24]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	021a      	lsls	r2, r3, #8
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	619a      	str	r2, [r3, #24]
      break;
 8001da0:	e043      	b.n	8001e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68b9      	ldr	r1, [r7, #8]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fa41 	bl	8002230 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	69da      	ldr	r2, [r3, #28]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0208 	orr.w	r2, r2, #8
 8001dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	69da      	ldr	r2, [r3, #28]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0204 	bic.w	r2, r2, #4
 8001dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69d9      	ldr	r1, [r3, #28]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	61da      	str	r2, [r3, #28]
      break;
 8001de0:	e023      	b.n	8001e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 fa8b 	bl	8002304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69da      	ldr	r2, [r3, #28]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69d9      	ldr	r1, [r3, #28]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	021a      	lsls	r2, r3, #8
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	61da      	str	r2, [r3, #28]
      break;
 8001e22:	e002      	b.n	8001e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	75fb      	strb	r3, [r7, #23]
      break;
 8001e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_TIM_ConfigClockSource+0x1c>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e0b4      	b.n	8001fc2 <HAL_TIM_ConfigClockSource+0x186>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e90:	d03e      	beq.n	8001f10 <HAL_TIM_ConfigClockSource+0xd4>
 8001e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e96:	f200 8087 	bhi.w	8001fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8001e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e9e:	f000 8086 	beq.w	8001fae <HAL_TIM_ConfigClockSource+0x172>
 8001ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea6:	d87f      	bhi.n	8001fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ea8:	2b70      	cmp	r3, #112	; 0x70
 8001eaa:	d01a      	beq.n	8001ee2 <HAL_TIM_ConfigClockSource+0xa6>
 8001eac:	2b70      	cmp	r3, #112	; 0x70
 8001eae:	d87b      	bhi.n	8001fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8001eb0:	2b60      	cmp	r3, #96	; 0x60
 8001eb2:	d050      	beq.n	8001f56 <HAL_TIM_ConfigClockSource+0x11a>
 8001eb4:	2b60      	cmp	r3, #96	; 0x60
 8001eb6:	d877      	bhi.n	8001fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8001eb8:	2b50      	cmp	r3, #80	; 0x50
 8001eba:	d03c      	beq.n	8001f36 <HAL_TIM_ConfigClockSource+0xfa>
 8001ebc:	2b50      	cmp	r3, #80	; 0x50
 8001ebe:	d873      	bhi.n	8001fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ec0:	2b40      	cmp	r3, #64	; 0x40
 8001ec2:	d058      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0x13a>
 8001ec4:	2b40      	cmp	r3, #64	; 0x40
 8001ec6:	d86f      	bhi.n	8001fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ec8:	2b30      	cmp	r3, #48	; 0x30
 8001eca:	d064      	beq.n	8001f96 <HAL_TIM_ConfigClockSource+0x15a>
 8001ecc:	2b30      	cmp	r3, #48	; 0x30
 8001ece:	d86b      	bhi.n	8001fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d060      	beq.n	8001f96 <HAL_TIM_ConfigClockSource+0x15a>
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d867      	bhi.n	8001fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d05c      	beq.n	8001f96 <HAL_TIM_ConfigClockSource+0x15a>
 8001edc:	2b10      	cmp	r3, #16
 8001ede:	d05a      	beq.n	8001f96 <HAL_TIM_ConfigClockSource+0x15a>
 8001ee0:	e062      	b.n	8001fa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ef2:	f000 facc 	bl	800248e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	609a      	str	r2, [r3, #8]
      break;
 8001f0e:	e04f      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f20:	f000 fab5 	bl	800248e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f32:	609a      	str	r2, [r3, #8]
      break;
 8001f34:	e03c      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f42:	461a      	mov	r2, r3
 8001f44:	f000 fa2c 	bl	80023a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2150      	movs	r1, #80	; 0x50
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 fa83 	bl	800245a <TIM_ITRx_SetConfig>
      break;
 8001f54:	e02c      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f62:	461a      	mov	r2, r3
 8001f64:	f000 fa4a 	bl	80023fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2160      	movs	r1, #96	; 0x60
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fa73 	bl	800245a <TIM_ITRx_SetConfig>
      break;
 8001f74:	e01c      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f82:	461a      	mov	r2, r3
 8001f84:	f000 fa0c 	bl	80023a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2140      	movs	r1, #64	; 0x40
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fa63 	bl	800245a <TIM_ITRx_SetConfig>
      break;
 8001f94:	e00c      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	f000 fa5a 	bl	800245a <TIM_ITRx_SetConfig>
      break;
 8001fa6:	e003      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
      break;
 8001fac:	e000      	b.n	8001fb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a29      	ldr	r2, [pc, #164]	; (8002084 <TIM_Base_SetConfig+0xb8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00b      	beq.n	8001ffc <TIM_Base_SetConfig+0x30>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fea:	d007      	beq.n	8001ffc <TIM_Base_SetConfig+0x30>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a26      	ldr	r2, [pc, #152]	; (8002088 <TIM_Base_SetConfig+0xbc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d003      	beq.n	8001ffc <TIM_Base_SetConfig+0x30>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a25      	ldr	r2, [pc, #148]	; (800208c <TIM_Base_SetConfig+0xc0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d108      	bne.n	800200e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <TIM_Base_SetConfig+0xb8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00b      	beq.n	800202e <TIM_Base_SetConfig+0x62>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201c:	d007      	beq.n	800202e <TIM_Base_SetConfig+0x62>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <TIM_Base_SetConfig+0xbc>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d003      	beq.n	800202e <TIM_Base_SetConfig+0x62>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a18      	ldr	r2, [pc, #96]	; (800208c <TIM_Base_SetConfig+0xc0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d108      	bne.n	8002040 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a07      	ldr	r2, [pc, #28]	; (8002084 <TIM_Base_SetConfig+0xb8>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d103      	bne.n	8002074 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	615a      	str	r2, [r3, #20]
}
 800207a:	bf00      	nop
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40000400 	.word	0x40000400
 800208c:	40000800 	.word	0x40000800

08002090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f023 0201 	bic.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0303 	bic.w	r3, r3, #3
 80020c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f023 0302 	bic.w	r3, r3, #2
 80020d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <TIM_OC1_SetConfig+0xc8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d10c      	bne.n	8002106 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f023 0308 	bic.w	r3, r3, #8
 80020f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a13      	ldr	r2, [pc, #76]	; (8002158 <TIM_OC1_SetConfig+0xc8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d111      	bne.n	8002132 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800211c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	4313      	orrs	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	621a      	str	r2, [r3, #32]
}
 800214c:	bf00      	nop
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40012c00 	.word	0x40012c00

0800215c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	f023 0210 	bic.w	r2, r3, #16
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800218a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f023 0320 	bic.w	r3, r3, #32
 80021a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a1d      	ldr	r2, [pc, #116]	; (800222c <TIM_OC2_SetConfig+0xd0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d10d      	bne.n	80021d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a14      	ldr	r2, [pc, #80]	; (800222c <TIM_OC2_SetConfig+0xd0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d113      	bne.n	8002208 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	621a      	str	r2, [r3, #32]
}
 8002222:	bf00      	nop
 8002224:	371c      	adds	r7, #28
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40012c00 	.word	0x40012c00

08002230 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0303 	bic.w	r3, r3, #3
 8002266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <TIM_OC3_SetConfig+0xd0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10d      	bne.n	80022aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002294:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <TIM_OC3_SetConfig+0xd0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d113      	bne.n	80022da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	621a      	str	r2, [r3, #32]
}
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40012c00 	.word	0x40012c00

08002304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002304:	b480      	push	{r7}
 8002306:	b087      	sub	sp, #28
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a1b      	ldr	r3, [r3, #32]
 8002312:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800233a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4313      	orrs	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800234e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	031b      	lsls	r3, r3, #12
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a0f      	ldr	r2, [pc, #60]	; (800239c <TIM_OC4_SetConfig+0x98>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d109      	bne.n	8002378 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800236a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	019b      	lsls	r3, r3, #6
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	621a      	str	r2, [r3, #32]
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40012c00 	.word	0x40012c00

080023a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f023 0201 	bic.w	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f023 030a 	bic.w	r3, r3, #10
 80023dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	621a      	str	r2, [r3, #32]
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	f023 0210 	bic.w	r2, r3, #16
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	031b      	lsls	r3, r3, #12
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002438:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	621a      	str	r2, [r3, #32]
}
 8002450:	bf00      	nop
 8002452:	371c      	adds	r7, #28
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800245a:	b480      	push	{r7}
 800245c:	b085      	sub	sp, #20
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	f043 0307 	orr.w	r3, r3, #7
 800247c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800248e:	b480      	push	{r7}
 8002490:	b087      	sub	sp, #28
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	021a      	lsls	r2, r3, #8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	609a      	str	r2, [r3, #8]
}
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr

080024cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	2201      	movs	r2, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a1a      	ldr	r2, [r3, #32]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	401a      	ands	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6a1a      	ldr	r2, [r3, #32]
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 031f 	and.w	r3, r3, #31
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	621a      	str	r2, [r3, #32]
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002528:	2302      	movs	r3, #2
 800252a:	e046      	b.n	80025ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002552:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00e      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002578:	d009      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d004      	beq.n	800258e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a10      	ldr	r2, [pc, #64]	; (80025cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d10c      	bne.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4313      	orrs	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800

080025d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e03d      	b.n	8002668 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	4313      	orrs	r3, r2
 8002600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4313      	orrs	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4313      	orrs	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f103 0208 	add.w	r2, r3, #8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f04f 32ff 	mov.w	r2, #4294967295
 800268a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0208 	add.w	r2, r3, #8
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f103 0208 	add.w	r2, r3, #8
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	601a      	str	r2, [r3, #0]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d103      	bne.n	800272e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	e00c      	b.n	8002748 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3308      	adds	r3, #8
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	e002      	b.n	800273c <vListInsert+0x2e>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	429a      	cmp	r2, r3
 8002746:	d2f6      	bcs.n	8002736 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6892      	ldr	r2, [r2, #8]
 8002794:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6852      	ldr	r2, [r2, #4]
 800279e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d103      	bne.n	80027b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	1e5a      	subs	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af04      	add	r7, sp, #16
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fe53 	bl	8003490 <pvPortMalloc>
 80027ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00e      	beq.n	8002810 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027f2:	2098      	movs	r0, #152	; 0x98
 80027f4:	f000 fe4c 	bl	8003490 <pvPortMalloc>
 80027f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	631a      	str	r2, [r3, #48]	; 0x30
 8002806:	e005      	b.n	8002814 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002808:	6978      	ldr	r0, [r7, #20]
 800280a:	f000 ff05 	bl	8003618 <vPortFree>
 800280e:	e001      	b.n	8002814 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d013      	beq.n	8002842 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	2300      	movs	r3, #0
 800281e:	9303      	str	r3, [sp, #12]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	9302      	str	r3, [sp, #8]
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f80f 	bl	8002854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002836:	69f8      	ldr	r0, [r7, #28]
 8002838:	f000 f89c 	bl	8002974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800283c:	2301      	movs	r3, #1
 800283e:	61bb      	str	r3, [r7, #24]
 8002840:	e002      	b.n	8002848 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002842:	f04f 33ff 	mov.w	r3, #4294967295
 8002846:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002848:	69bb      	ldr	r3, [r7, #24]
	}
 800284a:	4618      	mov	r0, r3
 800284c:	3720      	adds	r7, #32
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
	...

08002854 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800286c:	3b01      	subs	r3, #1
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f023 0307 	bic.w	r3, r3, #7
 800287a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002898:	bf00      	nop
 800289a:	e7fe      	b.n	800289a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800289c:	2300      	movs	r3, #0
 800289e:	61fb      	str	r3, [r7, #28]
 80028a0:	e012      	b.n	80028c8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	4413      	add	r3, r2
 80028a8:	7819      	ldrb	r1, [r3, #0]
 80028aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	3334      	adds	r3, #52	; 0x34
 80028b2:	460a      	mov	r2, r1
 80028b4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b0f      	cmp	r3, #15
 80028cc:	d9e9      	bls.n	80028a2 <prvInitialiseNewTask+0x4e>
 80028ce:	e000      	b.n	80028d2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80028d0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d901      	bls.n	80028e4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028e0:	2306      	movs	r3, #6
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
		pxNewTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	3304      	adds	r3, #4
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fede 	bl	80026b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	3318      	adds	r3, #24
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fed9 	bl	80026b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002902:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	f1c3 0207 	rsb	r2, r3, #7
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002916:	2200      	movs	r2, #0
 8002918:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002926:	3344      	adds	r3, #68	; 0x44
 8002928:	224c      	movs	r2, #76	; 0x4c
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f000 ff87 	bl	8003840 <memset>
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <prvInitialiseNewTask+0x114>)
 8002936:	649a      	str	r2, [r3, #72]	; 0x48
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	4a0c      	ldr	r2, [pc, #48]	; (800296c <prvInitialiseNewTask+0x118>)
 800293c:	64da      	str	r2, [r3, #76]	; 0x4c
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <prvInitialiseNewTask+0x11c>)
 8002942:	651a      	str	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	68f9      	ldr	r1, [r7, #12]
 8002948:	69b8      	ldr	r0, [r7, #24]
 800294a:	f000 fbef 	bl	800312c <pxPortInitialiseStack>
 800294e:	4602      	mov	r2, r0
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800295e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002960:	bf00      	nop
 8002962:	3720      	adds	r7, #32
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000f04 	.word	0x20000f04
 800296c:	20000f6c 	.word	0x20000f6c
 8002970:	20000fd4 	.word	0x20000fd4

08002974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800297c:	f000 fcc6 	bl	800330c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002980:	4b2a      	ldr	r3, [pc, #168]	; (8002a2c <prvAddNewTaskToReadyList+0xb8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3301      	adds	r3, #1
 8002986:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <prvAddNewTaskToReadyList+0xb8>)
 8002988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800298a:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <prvAddNewTaskToReadyList+0xbc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002992:	4a27      	ldr	r2, [pc, #156]	; (8002a30 <prvAddNewTaskToReadyList+0xbc>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002998:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <prvAddNewTaskToReadyList+0xb8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d110      	bne.n	80029c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029a0:	f000 fb10 	bl	8002fc4 <prvInitialiseTaskLists>
 80029a4:	e00d      	b.n	80029c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029a6:	4b23      	ldr	r3, [pc, #140]	; (8002a34 <prvAddNewTaskToReadyList+0xc0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <prvAddNewTaskToReadyList+0xbc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d802      	bhi.n	80029c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029bc:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <prvAddNewTaskToReadyList+0xbc>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <prvAddNewTaskToReadyList+0xc4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3301      	adds	r3, #1
 80029c8:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <prvAddNewTaskToReadyList+0xc4>)
 80029ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	2201      	movs	r2, #1
 80029d2:	409a      	lsls	r2, r3
 80029d4:	4b19      	ldr	r3, [pc, #100]	; (8002a3c <prvAddNewTaskToReadyList+0xc8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4313      	orrs	r3, r2
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <prvAddNewTaskToReadyList+0xc8>)
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <prvAddNewTaskToReadyList+0xcc>)
 80029ec:	441a      	add	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3304      	adds	r3, #4
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f7ff fe67 	bl	80026c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029fa:	f000 fcb7 	bl	800336c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <prvAddNewTaskToReadyList+0xc0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00e      	beq.n	8002a24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <prvAddNewTaskToReadyList+0xbc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <prvAddNewTaskToReadyList+0xd0>)
 8002a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200002b8 	.word	0x200002b8
 8002a30:	200001e4 	.word	0x200001e4
 8002a34:	200002c4 	.word	0x200002c4
 8002a38:	200002d4 	.word	0x200002d4
 8002a3c:	200002c0 	.word	0x200002c0
 8002a40:	200001e8 	.word	0x200001e8
 8002a44:	e000ed04 	.word	0xe000ed04

08002a48 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <vTaskDelayUntil+0x2a>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	617b      	str	r3, [r7, #20]
}
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <vTaskDelayUntil+0x46>
	__asm volatile
 8002a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	613b      	str	r3, [r7, #16]
}
 8002a8a:	bf00      	nop
 8002a8c:	e7fe      	b.n	8002a8c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <vTaskDelayUntil+0xf0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <vTaskDelayUntil+0x64>
	__asm volatile
 8002a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9a:	f383 8811 	msr	BASEPRI, r3
 8002a9e:	f3bf 8f6f 	isb	sy
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	60fb      	str	r3, [r7, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	e7fe      	b.n	8002aaa <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8002aac:	f000 f89a 	bl	8002be4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <vTaskDelayUntil+0xf4>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	4413      	add	r3, r2
 8002abe:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a3a      	ldr	r2, [r7, #32]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d20b      	bcs.n	8002ae2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d211      	bcs.n	8002af8 <vTaskDelayUntil+0xb0>
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d90d      	bls.n	8002af8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002adc:	2301      	movs	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae0:	e00a      	b.n	8002af8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d303      	bcc.n	8002af4 <vTaskDelayUntil+0xac>
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d901      	bls.n	8002af8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8002af4:	2301      	movs	r3, #1
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d006      	beq.n	8002b12 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fab9 	bl	8003084 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8002b12:	f000 f875 	bl	8002c00 <xTaskResumeAll>
 8002b16:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <vTaskDelayUntil+0xf8>)
 8002b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b2e:	bf00      	nop
 8002b30:	3728      	adds	r7, #40	; 0x28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200002e0 	.word	0x200002e0
 8002b3c:	200002bc 	.word	0x200002bc
 8002b40:	e000ed04 	.word	0xe000ed04

08002b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <vTaskStartScheduler+0x80>)
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	2300      	movs	r3, #0
 8002b54:	2280      	movs	r2, #128	; 0x80
 8002b56:	491c      	ldr	r1, [pc, #112]	; (8002bc8 <vTaskStartScheduler+0x84>)
 8002b58:	481c      	ldr	r0, [pc, #112]	; (8002bcc <vTaskStartScheduler+0x88>)
 8002b5a:	f7ff fe39 	bl	80027d0 <xTaskCreate>
 8002b5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d11b      	bne.n	8002b9e <vTaskStartScheduler+0x5a>
	__asm volatile
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	60bb      	str	r3, [r7, #8]
}
 8002b78:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <vTaskStartScheduler+0x8c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3344      	adds	r3, #68	; 0x44
 8002b80:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <vTaskStartScheduler+0x90>)
 8002b82:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <vTaskStartScheduler+0x94>)
 8002b86:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <vTaskStartScheduler+0x98>)
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <vTaskStartScheduler+0x9c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b98:	f000 fb46 	bl	8003228 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b9c:	e00e      	b.n	8002bbc <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba4:	d10a      	bne.n	8002bbc <vTaskStartScheduler+0x78>
	__asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	607b      	str	r3, [r7, #4]
}
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <vTaskStartScheduler+0x76>
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	200002dc 	.word	0x200002dc
 8002bc8:	080038dc 	.word	0x080038dc
 8002bcc:	08002f95 	.word	0x08002f95
 8002bd0:	200001e4 	.word	0x200001e4
 8002bd4:	20000060 	.word	0x20000060
 8002bd8:	200002d8 	.word	0x200002d8
 8002bdc:	200002c4 	.word	0x200002c4
 8002be0:	200002bc 	.word	0x200002bc

08002be4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <vTaskSuspendAll+0x18>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3301      	adds	r3, #1
 8002bee:	4a03      	ldr	r2, [pc, #12]	; (8002bfc <vTaskSuspendAll+0x18>)
 8002bf0:	6013      	str	r3, [r2, #0]
}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	200002e0 	.word	0x200002e0

08002c00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c0e:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <xTaskResumeAll+0x114>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10a      	bne.n	8002c2c <xTaskResumeAll+0x2c>
	__asm volatile
 8002c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1a:	f383 8811 	msr	BASEPRI, r3
 8002c1e:	f3bf 8f6f 	isb	sy
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	603b      	str	r3, [r7, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	e7fe      	b.n	8002c2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c2c:	f000 fb6e 	bl	800330c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c30:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <xTaskResumeAll+0x114>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	4a37      	ldr	r2, [pc, #220]	; (8002d14 <xTaskResumeAll+0x114>)
 8002c38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c3a:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <xTaskResumeAll+0x114>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d161      	bne.n	8002d06 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c42:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <xTaskResumeAll+0x118>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d05d      	beq.n	8002d06 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c4a:	e02e      	b.n	8002caa <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c4c:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <xTaskResumeAll+0x11c>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3318      	adds	r3, #24
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fd90 	bl	800277e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3304      	adds	r3, #4
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fd8b 	bl	800277e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <xTaskResumeAll+0x120>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <xTaskResumeAll+0x120>)
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <xTaskResumeAll+0x124>)
 8002c88:	441a      	add	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4610      	mov	r0, r2
 8002c92:	f7ff fd19 	bl	80026c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <xTaskResumeAll+0x128>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d302      	bcc.n	8002caa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002ca4:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <xTaskResumeAll+0x12c>)
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <xTaskResumeAll+0x11c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1cc      	bne.n	8002c4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002cb8:	f000 f9c0 	bl	800303c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002cbc:	4b1c      	ldr	r3, [pc, #112]	; (8002d30 <xTaskResumeAll+0x130>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002cc8:	f000 f844 	bl	8002d54 <xTaskIncrementTick>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <xTaskResumeAll+0x12c>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1f1      	bne.n	8002cc8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <xTaskResumeAll+0x130>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <xTaskResumeAll+0x12c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d009      	beq.n	8002d06 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002cf6:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <xTaskResumeAll+0x134>)
 8002cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d06:	f000 fb31 	bl	800336c <vPortExitCritical>

	return xAlreadyYielded;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200002e0 	.word	0x200002e0
 8002d18:	200002b8 	.word	0x200002b8
 8002d1c:	200002a4 	.word	0x200002a4
 8002d20:	200002c0 	.word	0x200002c0
 8002d24:	200001e8 	.word	0x200001e8
 8002d28:	200001e4 	.word	0x200001e4
 8002d2c:	200002cc 	.word	0x200002cc
 8002d30:	200002c8 	.word	0x200002c8
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <xTaskGetTickCount+0x18>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002d44:	687b      	ldr	r3, [r7, #4]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	200002bc 	.word	0x200002bc

08002d54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d5e:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <xTaskIncrementTick+0x150>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 808d 	bne.w	8002e82 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d68:	4b4f      	ldr	r3, [pc, #316]	; (8002ea8 <xTaskIncrementTick+0x154>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d70:	4a4d      	ldr	r2, [pc, #308]	; (8002ea8 <xTaskIncrementTick+0x154>)
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d120      	bne.n	8002dbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d7c:	4b4b      	ldr	r3, [pc, #300]	; (8002eac <xTaskIncrementTick+0x158>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <xTaskIncrementTick+0x48>
	__asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	603b      	str	r3, [r7, #0]
}
 8002d98:	bf00      	nop
 8002d9a:	e7fe      	b.n	8002d9a <xTaskIncrementTick+0x46>
 8002d9c:	4b43      	ldr	r3, [pc, #268]	; (8002eac <xTaskIncrementTick+0x158>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <xTaskIncrementTick+0x15c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a41      	ldr	r2, [pc, #260]	; (8002eac <xTaskIncrementTick+0x158>)
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4a41      	ldr	r2, [pc, #260]	; (8002eb0 <xTaskIncrementTick+0x15c>)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	4b40      	ldr	r3, [pc, #256]	; (8002eb4 <xTaskIncrementTick+0x160>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	4a3f      	ldr	r2, [pc, #252]	; (8002eb4 <xTaskIncrementTick+0x160>)
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	f000 f93f 	bl	800303c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dbe:	4b3e      	ldr	r3, [pc, #248]	; (8002eb8 <xTaskIncrementTick+0x164>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d34d      	bcc.n	8002e64 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dc8:	4b38      	ldr	r3, [pc, #224]	; (8002eac <xTaskIncrementTick+0x158>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <xTaskIncrementTick+0x82>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <xTaskIncrementTick+0x84>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <xTaskIncrementTick+0x164>)
 8002dde:	f04f 32ff 	mov.w	r2, #4294967295
 8002de2:	601a      	str	r2, [r3, #0]
					break;
 8002de4:	e03e      	b.n	8002e64 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002de6:	4b31      	ldr	r3, [pc, #196]	; (8002eac <xTaskIncrementTick+0x158>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d203      	bcs.n	8002e06 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <xTaskIncrementTick+0x164>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6013      	str	r3, [r2, #0]
						break;
 8002e04:	e02e      	b.n	8002e64 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fcb7 	bl	800277e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d004      	beq.n	8002e22 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	3318      	adds	r3, #24
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fcae 	bl	800277e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	2201      	movs	r2, #1
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <xTaskIncrementTick+0x168>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <xTaskIncrementTick+0x168>)
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4a1f      	ldr	r2, [pc, #124]	; (8002ec0 <xTaskIncrementTick+0x16c>)
 8002e42:	441a      	add	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	3304      	adds	r3, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f7ff fc3c 	bl	80026c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <xTaskIncrementTick+0x170>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d3b4      	bcc.n	8002dc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e62:	e7b1      	b.n	8002dc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <xTaskIncrementTick+0x170>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6a:	4915      	ldr	r1, [pc, #84]	; (8002ec0 <xTaskIncrementTick+0x16c>)
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d907      	bls.n	8002e8c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e004      	b.n	8002e8c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <xTaskIncrementTick+0x174>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	4a0f      	ldr	r2, [pc, #60]	; (8002ec8 <xTaskIncrementTick+0x174>)
 8002e8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <xTaskIncrementTick+0x178>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002e94:	2301      	movs	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e98:	697b      	ldr	r3, [r7, #20]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200002e0 	.word	0x200002e0
 8002ea8:	200002bc 	.word	0x200002bc
 8002eac:	2000029c 	.word	0x2000029c
 8002eb0:	200002a0 	.word	0x200002a0
 8002eb4:	200002d0 	.word	0x200002d0
 8002eb8:	200002d8 	.word	0x200002d8
 8002ebc:	200002c0 	.word	0x200002c0
 8002ec0:	200001e8 	.word	0x200001e8
 8002ec4:	200001e4 	.word	0x200001e4
 8002ec8:	200002c8 	.word	0x200002c8
 8002ecc:	200002cc 	.word	0x200002cc

08002ed0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ed6:	4b29      	ldr	r3, [pc, #164]	; (8002f7c <vTaskSwitchContext+0xac>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <vTaskSwitchContext+0xb0>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ee4:	e044      	b.n	8002f70 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <vTaskSwitchContext+0xb0>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <vTaskSwitchContext+0xb4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002efa:	7afb      	ldrb	r3, [r7, #11]
 8002efc:	f1c3 031f 	rsb	r3, r3, #31
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	4921      	ldr	r1, [pc, #132]	; (8002f88 <vTaskSwitchContext+0xb8>)
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <vTaskSwitchContext+0x5c>
	__asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	607b      	str	r3, [r7, #4]
}
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <vTaskSwitchContext+0x5a>
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <vTaskSwitchContext+0xb8>)
 8002f38:	4413      	add	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	3308      	adds	r3, #8
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d104      	bne.n	8002f5c <vTaskSwitchContext+0x8c>
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <vTaskSwitchContext+0xbc>)
 8002f64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <vTaskSwitchContext+0xbc>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3344      	adds	r3, #68	; 0x44
 8002f6c:	4a08      	ldr	r2, [pc, #32]	; (8002f90 <vTaskSwitchContext+0xc0>)
 8002f6e:	6013      	str	r3, [r2, #0]
}
 8002f70:	bf00      	nop
 8002f72:	371c      	adds	r7, #28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	200002e0 	.word	0x200002e0
 8002f80:	200002cc 	.word	0x200002cc
 8002f84:	200002c0 	.word	0x200002c0
 8002f88:	200001e8 	.word	0x200001e8
 8002f8c:	200001e4 	.word	0x200001e4
 8002f90:	20000060 	.word	0x20000060

08002f94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f9c:	f000 f848 	bl	8003030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <prvIdleTask+0x28>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d9f9      	bls.n	8002f9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <prvIdleTask+0x2c>)
 8002faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002fb8:	e7f0      	b.n	8002f9c <prvIdleTask+0x8>
 8002fba:	bf00      	nop
 8002fbc:	200001e8 	.word	0x200001e8
 8002fc0:	e000ed04 	.word	0xe000ed04

08002fc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fca:	2300      	movs	r3, #0
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	e00c      	b.n	8002fea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4a0f      	ldr	r2, [pc, #60]	; (8003018 <prvInitialiseTaskLists+0x54>)
 8002fdc:	4413      	add	r3, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fb47 	bl	8002672 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d9ef      	bls.n	8002fd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ff0:	480a      	ldr	r0, [pc, #40]	; (800301c <prvInitialiseTaskLists+0x58>)
 8002ff2:	f7ff fb3e 	bl	8002672 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ff6:	480a      	ldr	r0, [pc, #40]	; (8003020 <prvInitialiseTaskLists+0x5c>)
 8002ff8:	f7ff fb3b 	bl	8002672 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ffc:	4809      	ldr	r0, [pc, #36]	; (8003024 <prvInitialiseTaskLists+0x60>)
 8002ffe:	f7ff fb38 	bl	8002672 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <prvInitialiseTaskLists+0x64>)
 8003004:	4a05      	ldr	r2, [pc, #20]	; (800301c <prvInitialiseTaskLists+0x58>)
 8003006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <prvInitialiseTaskLists+0x68>)
 800300a:	4a05      	ldr	r2, [pc, #20]	; (8003020 <prvInitialiseTaskLists+0x5c>)
 800300c:	601a      	str	r2, [r3, #0]
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200001e8 	.word	0x200001e8
 800301c:	20000274 	.word	0x20000274
 8003020:	20000288 	.word	0x20000288
 8003024:	200002a4 	.word	0x200002a4
 8003028:	2000029c 	.word	0x2000029c
 800302c:	200002a0 	.word	0x200002a0

08003030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0

			prvDeleteTCB( pxTCB );
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003042:	4b0e      	ldr	r3, [pc, #56]	; (800307c <prvResetNextTaskUnblockTime+0x40>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <prvResetNextTaskUnblockTime+0x14>
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <prvResetNextTaskUnblockTime+0x16>
 8003050:	2300      	movs	r3, #0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <prvResetNextTaskUnblockTime+0x44>)
 8003058:	f04f 32ff 	mov.w	r2, #4294967295
 800305c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800305e:	e008      	b.n	8003072 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <prvResetNextTaskUnblockTime+0x40>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a04      	ldr	r2, [pc, #16]	; (8003080 <prvResetNextTaskUnblockTime+0x44>)
 8003070:	6013      	str	r3, [r2, #0]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr
 800307c:	2000029c 	.word	0x2000029c
 8003080:	200002d8 	.word	0x200002d8

08003084 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800308e:	4b21      	ldr	r3, [pc, #132]	; (8003114 <prvAddCurrentTaskToDelayedList+0x90>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003094:	4b20      	ldr	r3, [pc, #128]	; (8003118 <prvAddCurrentTaskToDelayedList+0x94>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3304      	adds	r3, #4
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fb6f 	bl	800277e <uxListRemove>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80030a6:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <prvAddCurrentTaskToDelayedList+0x94>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	2201      	movs	r2, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43da      	mvns	r2, r3
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <prvAddCurrentTaskToDelayedList+0x98>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4013      	ands	r3, r2
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <prvAddCurrentTaskToDelayedList+0x98>)
 80030bc:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <prvAddCurrentTaskToDelayedList+0x94>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d209      	bcs.n	80030ea <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <prvAddCurrentTaskToDelayedList+0x9c>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <prvAddCurrentTaskToDelayedList+0x94>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3304      	adds	r3, #4
 80030e0:	4619      	mov	r1, r3
 80030e2:	4610      	mov	r0, r2
 80030e4:	f7ff fb13 	bl	800270e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80030e8:	e010      	b.n	800310c <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <prvAddCurrentTaskToDelayedList+0xa0>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <prvAddCurrentTaskToDelayedList+0x94>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3304      	adds	r3, #4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f7ff fb09 	bl	800270e <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <prvAddCurrentTaskToDelayedList+0xa4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	429a      	cmp	r2, r3
 8003104:	d202      	bcs.n	800310c <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 8003106:	4a08      	ldr	r2, [pc, #32]	; (8003128 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6013      	str	r3, [r2, #0]
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	200002bc 	.word	0x200002bc
 8003118:	200001e4 	.word	0x200001e4
 800311c:	200002c0 	.word	0x200002c0
 8003120:	200002a0 	.word	0x200002a0
 8003124:	2000029c 	.word	0x2000029c
 8003128:	200002d8 	.word	0x200002d8

0800312c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	3b04      	subs	r3, #4
 800313c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3b04      	subs	r3, #4
 800314a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f023 0201 	bic.w	r2, r3, #1
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3b04      	subs	r3, #4
 800315a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800315c:	4a08      	ldr	r2, [pc, #32]	; (8003180 <pxPortInitialiseStack+0x54>)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3b14      	subs	r3, #20
 8003166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3b20      	subs	r3, #32
 8003172:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003174:	68fb      	ldr	r3, [r7, #12]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	08003185 	.word	0x08003185

08003184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800318a:	2300      	movs	r3, #0
 800318c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <prvTaskExitError+0x54>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d00a      	beq.n	80031ae <prvTaskExitError+0x2a>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	60fb      	str	r3, [r7, #12]
}
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <prvTaskExitError+0x28>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	60bb      	str	r3, [r7, #8]
}
 80031c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80031c2:	bf00      	nop
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0fc      	beq.n	80031c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000010 	.word	0x20000010
 80031dc:	00000000 	.word	0x00000000

080031e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <pxCurrentTCBConst2>)
 80031e2:	6819      	ldr	r1, [r3, #0]
 80031e4:	6808      	ldr	r0, [r1, #0]
 80031e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80031ea:	f380 8809 	msr	PSP, r0
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f04f 0000 	mov.w	r0, #0
 80031f6:	f380 8811 	msr	BASEPRI, r0
 80031fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80031fe:	4770      	bx	lr

08003200 <pxCurrentTCBConst2>:
 8003200:	200001e4 	.word	0x200001e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop

08003208 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003208:	4806      	ldr	r0, [pc, #24]	; (8003224 <prvPortStartFirstTask+0x1c>)
 800320a:	6800      	ldr	r0, [r0, #0]
 800320c:	6800      	ldr	r0, [r0, #0]
 800320e:	f380 8808 	msr	MSP, r0
 8003212:	b662      	cpsie	i
 8003214:	b661      	cpsie	f
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	df00      	svc	0
 8003220:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003222:	bf00      	nop
 8003224:	e000ed08 	.word	0xe000ed08

08003228 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800322e:	4b32      	ldr	r3, [pc, #200]	; (80032f8 <xPortStartScheduler+0xd0>)
 8003230:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	b2db      	uxtb	r3, r3
 8003238:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	22ff      	movs	r2, #255	; 0xff
 800323e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b2a      	ldr	r3, [pc, #168]	; (80032fc <xPortStartScheduler+0xd4>)
 8003254:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <xPortStartScheduler+0xd8>)
 8003258:	2207      	movs	r2, #7
 800325a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800325c:	e009      	b.n	8003272 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800325e:	4b28      	ldr	r3, [pc, #160]	; (8003300 <xPortStartScheduler+0xd8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3b01      	subs	r3, #1
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <xPortStartScheduler+0xd8>)
 8003266:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	2b80      	cmp	r3, #128	; 0x80
 800327c:	d0ef      	beq.n	800325e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <xPortStartScheduler+0xd8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f1c3 0307 	rsb	r3, r3, #7
 8003286:	2b04      	cmp	r3, #4
 8003288:	d00a      	beq.n	80032a0 <xPortStartScheduler+0x78>
	__asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	60bb      	str	r3, [r7, #8]
}
 800329c:	bf00      	nop
 800329e:	e7fe      	b.n	800329e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80032a0:	4b17      	ldr	r3, [pc, #92]	; (8003300 <xPortStartScheduler+0xd8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	4a16      	ldr	r2, [pc, #88]	; (8003300 <xPortStartScheduler+0xd8>)
 80032a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <xPortStartScheduler+0xd8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032b2:	4a13      	ldr	r2, [pc, #76]	; (8003300 <xPortStartScheduler+0xd8>)
 80032b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80032be:	4b11      	ldr	r3, [pc, #68]	; (8003304 <xPortStartScheduler+0xdc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a10      	ldr	r2, [pc, #64]	; (8003304 <xPortStartScheduler+0xdc>)
 80032c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80032ca:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <xPortStartScheduler+0xdc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <xPortStartScheduler+0xdc>)
 80032d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80032d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80032d6:	f000 f8b9 	bl	800344c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <xPortStartScheduler+0xe0>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80032e0:	f7ff ff92 	bl	8003208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80032e4:	f7ff fdf4 	bl	8002ed0 <vTaskSwitchContext>
	prvTaskExitError();
 80032e8:	f7ff ff4c 	bl	8003184 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	e000e400 	.word	0xe000e400
 80032fc:	200002e4 	.word	0x200002e4
 8003300:	200002e8 	.word	0x200002e8
 8003304:	e000ed20 	.word	0xe000ed20
 8003308:	20000010 	.word	0x20000010

0800330c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	607b      	str	r3, [r7, #4]
}
 8003324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <vPortEnterCritical+0x58>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <vPortEnterCritical+0x58>)
 800332e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <vPortEnterCritical+0x58>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d10f      	bne.n	8003358 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <vPortEnterCritical+0x5c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <vPortEnterCritical+0x4c>
	__asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	603b      	str	r3, [r7, #0]
}
 8003354:	bf00      	nop
 8003356:	e7fe      	b.n	8003356 <vPortEnterCritical+0x4a>
	}
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000010 	.word	0x20000010
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <vPortExitCritical+0x4c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10a      	bne.n	8003390 <vPortExitCritical+0x24>
	__asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	607b      	str	r3, [r7, #4]
}
 800338c:	bf00      	nop
 800338e:	e7fe      	b.n	800338e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <vPortExitCritical+0x4c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3b01      	subs	r3, #1
 8003396:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <vPortExitCritical+0x4c>)
 8003398:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800339a:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <vPortExitCritical+0x4c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <vPortExitCritical+0x42>
 80033a2:	2300      	movs	r3, #0
 80033a4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80033ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	20000010 	.word	0x20000010
 80033bc:	00000000 	.word	0x00000000

080033c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80033c0:	f3ef 8009 	mrs	r0, PSP
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	4b0d      	ldr	r3, [pc, #52]	; (8003400 <pxCurrentTCBConst>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033d0:	6010      	str	r0, [r2, #0]
 80033d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80033d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80033da:	f380 8811 	msr	BASEPRI, r0
 80033de:	f7ff fd77 	bl	8002ed0 <vTaskSwitchContext>
 80033e2:	f04f 0000 	mov.w	r0, #0
 80033e6:	f380 8811 	msr	BASEPRI, r0
 80033ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	6808      	ldr	r0, [r1, #0]
 80033f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033f6:	f380 8809 	msr	PSP, r0
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	4770      	bx	lr

08003400 <pxCurrentTCBConst>:
 8003400:	200001e4 	.word	0x200001e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop

08003408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
	__asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	607b      	str	r3, [r7, #4]
}
 8003420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003422:	f7ff fc97 	bl	8002d54 <xTaskIncrementTick>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <xPortSysTickHandler+0x40>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	2300      	movs	r3, #0
 8003436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	f383 8811 	msr	BASEPRI, r3
}
 800343e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <vPortSetupTimerInterrupt+0x30>)
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <vPortSetupTimerInterrupt+0x34>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <vPortSetupTimerInterrupt+0x38>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a09      	ldr	r2, [pc, #36]	; (8003488 <vPortSetupTimerInterrupt+0x3c>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	099b      	lsrs	r3, r3, #6
 8003468:	4a08      	ldr	r2, [pc, #32]	; (800348c <vPortSetupTimerInterrupt+0x40>)
 800346a:	3b01      	subs	r3, #1
 800346c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800346e:	4b03      	ldr	r3, [pc, #12]	; (800347c <vPortSetupTimerInterrupt+0x30>)
 8003470:	2207      	movs	r2, #7
 8003472:	601a      	str	r2, [r3, #0]
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	e000e010 	.word	0xe000e010
 8003480:	e000e018 	.word	0xe000e018
 8003484:	20000008 	.word	0x20000008
 8003488:	10624dd3 	.word	0x10624dd3
 800348c:	e000e014 	.word	0xe000e014

08003490 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800349c:	f7ff fba2 	bl	8002be4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80034a0:	4b58      	ldr	r3, [pc, #352]	; (8003604 <pvPortMalloc+0x174>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80034a8:	f000 f910 	bl	80036cc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80034ac:	4b56      	ldr	r3, [pc, #344]	; (8003608 <pvPortMalloc+0x178>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 808e 	bne.w	80035d6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01d      	beq.n	80034fc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80034c0:	2208      	movs	r2, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d014      	beq.n	80034fc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f023 0307 	bic.w	r3, r3, #7
 80034d8:	3308      	adds	r3, #8
 80034da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <pvPortMalloc+0x6c>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	617b      	str	r3, [r7, #20]
}
 80034f8:	bf00      	nop
 80034fa:	e7fe      	b.n	80034fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d069      	beq.n	80035d6 <pvPortMalloc+0x146>
 8003502:	4b42      	ldr	r3, [pc, #264]	; (800360c <pvPortMalloc+0x17c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	429a      	cmp	r2, r3
 800350a:	d864      	bhi.n	80035d6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800350c:	4b40      	ldr	r3, [pc, #256]	; (8003610 <pvPortMalloc+0x180>)
 800350e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003510:	4b3f      	ldr	r3, [pc, #252]	; (8003610 <pvPortMalloc+0x180>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003516:	e004      	b.n	8003522 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	429a      	cmp	r2, r3
 800352a:	d903      	bls.n	8003534 <pvPortMalloc+0xa4>
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f1      	bne.n	8003518 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003534:	4b33      	ldr	r3, [pc, #204]	; (8003604 <pvPortMalloc+0x174>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353a:	429a      	cmp	r2, r3
 800353c:	d04b      	beq.n	80035d6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2208      	movs	r2, #8
 8003544:	4413      	add	r3, r2
 8003546:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	1ad2      	subs	r2, r2, r3
 8003558:	2308      	movs	r3, #8
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	429a      	cmp	r2, r3
 800355e:	d91f      	bls.n	80035a0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <pvPortMalloc+0xf8>
	__asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	613b      	str	r3, [r7, #16]
}
 8003584:	bf00      	nop
 8003586:	e7fe      	b.n	8003586 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	1ad2      	subs	r2, r2, r3
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800359a:	69b8      	ldr	r0, [r7, #24]
 800359c:	f000 f8f8 	bl	8003790 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80035a0:	4b1a      	ldr	r3, [pc, #104]	; (800360c <pvPortMalloc+0x17c>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <pvPortMalloc+0x17c>)
 80035ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80035ae:	4b17      	ldr	r3, [pc, #92]	; (800360c <pvPortMalloc+0x17c>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	4b18      	ldr	r3, [pc, #96]	; (8003614 <pvPortMalloc+0x184>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d203      	bcs.n	80035c2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80035ba:	4b14      	ldr	r3, [pc, #80]	; (800360c <pvPortMalloc+0x17c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a15      	ldr	r2, [pc, #84]	; (8003614 <pvPortMalloc+0x184>)
 80035c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <pvPortMalloc+0x178>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80035d6:	f7ff fb13 	bl	8002c00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <pvPortMalloc+0x16a>
	__asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	60fb      	str	r3, [r7, #12]
}
 80035f6:	bf00      	nop
 80035f8:	e7fe      	b.n	80035f8 <pvPortMalloc+0x168>
	return pvReturn;
 80035fa:	69fb      	ldr	r3, [r7, #28]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3728      	adds	r7, #40	; 0x28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	20000ef4 	.word	0x20000ef4
 8003608:	20000f00 	.word	0x20000f00
 800360c:	20000ef8 	.word	0x20000ef8
 8003610:	20000eec 	.word	0x20000eec
 8003614:	20000efc 	.word	0x20000efc

08003618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d048      	beq.n	80036bc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800362a:	2308      	movs	r3, #8
 800362c:	425b      	negs	r3, r3
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4413      	add	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <vPortFree+0xac>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <vPortFree+0x44>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	60fb      	str	r3, [r7, #12]
}
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00a      	beq.n	800367a <vPortFree+0x62>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	60bb      	str	r3, [r7, #8]
}
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <vPortFree+0xac>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d019      	beq.n	80036bc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d115      	bne.n	80036bc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <vPortFree+0xac>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	43db      	mvns	r3, r3
 800369a:	401a      	ands	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80036a0:	f7ff faa0 	bl	8002be4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <vPortFree+0xb0>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4413      	add	r3, r2
 80036ae:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <vPortFree+0xb0>)
 80036b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80036b2:	6938      	ldr	r0, [r7, #16]
 80036b4:	f000 f86c 	bl	8003790 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80036b8:	f7ff faa2 	bl	8002c00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80036bc:	bf00      	nop
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20000f00 	.word	0x20000f00
 80036c8:	20000ef8 	.word	0x20000ef8

080036cc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80036d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036d6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80036d8:	4b27      	ldr	r3, [pc, #156]	; (8003778 <prvHeapInit+0xac>)
 80036da:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00c      	beq.n	8003700 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	3307      	adds	r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0307 	bic.w	r3, r3, #7
 80036f2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <prvHeapInit+0xac>)
 80036fc:	4413      	add	r3, r2
 80036fe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003704:	4a1d      	ldr	r2, [pc, #116]	; (800377c <prvHeapInit+0xb0>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800370a:	4b1c      	ldr	r3, [pc, #112]	; (800377c <prvHeapInit+0xb0>)
 800370c:	2200      	movs	r2, #0
 800370e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	4413      	add	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003718:	2208      	movs	r2, #8
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0307 	bic.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a15      	ldr	r2, [pc, #84]	; (8003780 <prvHeapInit+0xb4>)
 800372c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800372e:	4b14      	ldr	r3, [pc, #80]	; (8003780 <prvHeapInit+0xb4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003736:	4b12      	ldr	r3, [pc, #72]	; (8003780 <prvHeapInit+0xb4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	1ad2      	subs	r2, r2, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <prvHeapInit+0xb4>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <prvHeapInit+0xb8>)
 800375a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4a09      	ldr	r2, [pc, #36]	; (8003788 <prvHeapInit+0xbc>)
 8003762:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <prvHeapInit+0xc0>)
 8003766:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800376a:	601a      	str	r2, [r3, #0]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	200002ec 	.word	0x200002ec
 800377c:	20000eec 	.word	0x20000eec
 8003780:	20000ef4 	.word	0x20000ef4
 8003784:	20000efc 	.word	0x20000efc
 8003788:	20000ef8 	.word	0x20000ef8
 800378c:	20000f00 	.word	0x20000f00

08003790 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003798:	4b27      	ldr	r3, [pc, #156]	; (8003838 <prvInsertBlockIntoFreeList+0xa8>)
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	e002      	b.n	80037a4 <prvInsertBlockIntoFreeList+0x14>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d8f7      	bhi.n	800379e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4413      	add	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d108      	bne.n	80037d2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	441a      	add	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	441a      	add	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d118      	bne.n	8003818 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <prvInsertBlockIntoFreeList+0xac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d00d      	beq.n	800380e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e008      	b.n	8003820 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <prvInsertBlockIntoFreeList+0xac>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e003      	b.n	8003820 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d002      	beq.n	800382e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	bc80      	pop	{r7}
 8003836:	4770      	bx	lr
 8003838:	20000eec 	.word	0x20000eec
 800383c:	20000ef4 	.word	0x20000ef4

08003840 <memset>:
 8003840:	4603      	mov	r3, r0
 8003842:	4402      	add	r2, r0
 8003844:	4293      	cmp	r3, r2
 8003846:	d100      	bne.n	800384a <memset+0xa>
 8003848:	4770      	bx	lr
 800384a:	f803 1b01 	strb.w	r1, [r3], #1
 800384e:	e7f9      	b.n	8003844 <memset+0x4>

08003850 <__libc_init_array>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	2600      	movs	r6, #0
 8003854:	4d0c      	ldr	r5, [pc, #48]	; (8003888 <__libc_init_array+0x38>)
 8003856:	4c0d      	ldr	r4, [pc, #52]	; (800388c <__libc_init_array+0x3c>)
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	42a6      	cmp	r6, r4
 800385e:	d109      	bne.n	8003874 <__libc_init_array+0x24>
 8003860:	f000 f81a 	bl	8003898 <_init>
 8003864:	2600      	movs	r6, #0
 8003866:	4d0a      	ldr	r5, [pc, #40]	; (8003890 <__libc_init_array+0x40>)
 8003868:	4c0a      	ldr	r4, [pc, #40]	; (8003894 <__libc_init_array+0x44>)
 800386a:	1b64      	subs	r4, r4, r5
 800386c:	10a4      	asrs	r4, r4, #2
 800386e:	42a6      	cmp	r6, r4
 8003870:	d105      	bne.n	800387e <__libc_init_array+0x2e>
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	f855 3b04 	ldr.w	r3, [r5], #4
 8003878:	4798      	blx	r3
 800387a:	3601      	adds	r6, #1
 800387c:	e7ee      	b.n	800385c <__libc_init_array+0xc>
 800387e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003882:	4798      	blx	r3
 8003884:	3601      	adds	r6, #1
 8003886:	e7f2      	b.n	800386e <__libc_init_array+0x1e>
 8003888:	080038e4 	.word	0x080038e4
 800388c:	080038e4 	.word	0x080038e4
 8003890:	080038e4 	.word	0x080038e4
 8003894:	080038e8 	.word	0x080038e8

08003898 <_init>:
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	bf00      	nop
 800389c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800389e:	bc08      	pop	{r3}
 80038a0:	469e      	mov	lr, r3
 80038a2:	4770      	bx	lr

080038a4 <_fini>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	bf00      	nop
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr
