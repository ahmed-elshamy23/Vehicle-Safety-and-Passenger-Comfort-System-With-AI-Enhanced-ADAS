
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023dc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080024ec  080024ec  000124ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002538  08002538  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002538  08002538  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002538  08002538  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002538  08002538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800253c  0800253c  0001253c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd8  20000068  080025a8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001040  080025a8  00021040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d96f  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028e4  00000000  00000000  0002da43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00004d78  00000000  00000000  00030327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a18  00000000  00000000  000350a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008b7  00000000  00000000  00035ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000186e6  00000000  00000000  0003636f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fdf5  00000000  00000000  0004ea55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008c7f2  00000000  00000000  0005e84a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001e20  00000000  00000000  000eb03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  000ece5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080024d4 	.word	0x080024d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080024d4 	.word	0x080024d4

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003be:	2afd      	cmp	r2, #253	; 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	; 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	; 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	; 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2uiz>:
 80006f8:	0042      	lsls	r2, r0, #1
 80006fa:	d20e      	bcs.n	800071a <__aeabi_f2uiz+0x22>
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000700:	d30b      	bcc.n	800071a <__aeabi_f2uiz+0x22>
 8000702:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d409      	bmi.n	8000720 <__aeabi_f2uiz+0x28>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2uiz+0x32>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d102      	bne.n	8000730 <__aeabi_f2uiz+0x38>
 800072a:	f04f 30ff 	mov.w	r0, #4294967295
 800072e:	4770      	bx	lr
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <DC_voidInit>:
#include "../Src/DIO_interface.h"
#include "../Src/RCC_interface.h"
#include "../Src/RCC_private.h"

void DC_voidInit()
{
 8000738:	b508      	push	{r3, lr}
    RCC_voidEnablePeripheralClock(APB2_BUS, TIM1_RCC);
 800073a:	210b      	movs	r1, #11
 800073c:	2002      	movs	r0, #2
 800073e:	f000 f8fd 	bl	800093c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, DIOA_RCC);
 8000742:	2102      	movs	r1, #2
 8000744:	4608      	mov	r0, r1
 8000746:	f000 f8f9 	bl	800093c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, DC_PORT_RCC);
 800074a:	2103      	movs	r1, #3
 800074c:	2002      	movs	r0, #2
 800074e:	f000 f8f5 	bl	800093c <RCC_voidEnablePeripheralClock>

    MDIO_voidSetPinDirection(DC_PORT, DC_IN1_PIN, OUTPUT_SPEED_2MHZ_PP);
 8000752:	2202      	movs	r2, #2
 8000754:	2100      	movs	r1, #0
 8000756:	4610      	mov	r0, r2
 8000758:	f000 f838 	bl	80007cc <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(DC_PORT, DC_IN2_PIN, OUTPUT_SPEED_2MHZ_PP);
 800075c:	2202      	movs	r2, #2
 800075e:	2101      	movs	r1, #1
 8000760:	4610      	mov	r0, r2
 8000762:	f000 f833 	bl	80007cc <MDIO_voidSetPinDirection>

    MDIO_voidSetPinDirection(DIOA, PIN8, OUTPUT_SPEED_50MHZ_AFPP);
 8000766:	220b      	movs	r2, #11
 8000768:	2108      	movs	r1, #8
 800076a:	2001      	movs	r0, #1
 800076c:	f000 f82e 	bl	80007cc <MDIO_voidSetPinDirection>

    TIM1_voidInit();
}
 8000770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TIM1_voidInit();
 8000774:	f000 b938 	b.w	80009e8 <TIM1_voidInit>

08000778 <DC_voidSetSpeed>:

void DC_voidSetSpeed(u8 speed)
{
 8000778:	b508      	push	{r3, lr}
    TIM1_voidGeneratePwm(PWM_CHANNEL_1, speed / 100.0f);
 800077a:	f7ff fda3 	bl	80002c4 <__aeabi_i2f>
 800077e:	4905      	ldr	r1, [pc, #20]	; (8000794 <DC_voidSetSpeed+0x1c>)
 8000780:	f7ff fea8 	bl	80004d4 <__aeabi_fdiv>
 8000784:	4601      	mov	r1, r0
 8000786:	2001      	movs	r0, #1
 8000788:	f000 f982 	bl	8000a90 <TIM1_voidGeneratePwm>
    TIM1_voidStart();
}
 800078c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TIM1_voidStart();
 8000790:	f000 b978 	b.w	8000a84 <TIM1_voidStart>
 8000794:	42c80000 	.word	0x42c80000

08000798 <DC_voidStart>:

void DC_voidStart()
{
 8000798:	b508      	push	{r3, lr}
    MDIO_voidSetPinValue(DC_PORT, DC_IN1_PIN, DIO_HIGH);
 800079a:	2201      	movs	r2, #1
 800079c:	2100      	movs	r1, #0
 800079e:	2002      	movs	r0, #2
 80007a0:	f000 f870 	bl	8000884 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(DC_PORT, DC_IN2_PIN, DIO_LOW);
}
 80007a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MDIO_voidSetPinValue(DC_PORT, DC_IN2_PIN, DIO_LOW);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2101      	movs	r1, #1
 80007ac:	2002      	movs	r0, #2
 80007ae:	f000 b869 	b.w	8000884 <MDIO_voidSetPinValue>

080007b2 <DC_voidStop>:

void DC_voidStop()
{
    MDIO_voidSetPinValue(DC_PORT, DC_IN1_PIN, DIO_LOW);
 80007b2:	2200      	movs	r2, #0
{
 80007b4:	b508      	push	{r3, lr}
    MDIO_voidSetPinValue(DC_PORT, DC_IN1_PIN, DIO_LOW);
 80007b6:	4611      	mov	r1, r2
 80007b8:	2002      	movs	r0, #2
 80007ba:	f000 f863 	bl	8000884 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(DC_PORT, DC_IN2_PIN, DIO_LOW);
 80007be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MDIO_voidSetPinValue(DC_PORT, DC_IN2_PIN, DIO_LOW);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2101      	movs	r1, #1
 80007c6:	2002      	movs	r0, #2
 80007c8:	f000 b85c 	b.w	8000884 <MDIO_voidSetPinValue>

080007cc <MDIO_voidSetPinDirection>:
#include "DIO_config.h"
#include "../Common/bit_math.h"

void MDIO_voidSetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 u8Copy_u8Mode)
{
	switch (Copy_u8Port)
 80007cc:	2802      	cmp	r0, #2
{
 80007ce:	b510      	push	{r4, lr}
	switch (Copy_u8Port)
 80007d0:	d026      	beq.n	8000820 <MDIO_voidSetPinDirection+0x54>
 80007d2:	2803      	cmp	r0, #3
 80007d4:	d03a      	beq.n	800084c <MDIO_voidSetPinDirection+0x80>
 80007d6:	2801      	cmp	r0, #1
 80007d8:	d121      	bne.n	800081e <MDIO_voidSetPinDirection+0x52>
	{
	case DIOA:
		if (Copy_u8Pin <= 7)
 80007da:	2907      	cmp	r1, #7
 80007dc:	d80d      	bhi.n	80007fa <MDIO_voidSetPinDirection+0x2e>
		{
			GPIOA->CRL &= ~(0b1111 << 4 * Copy_u8Pin);
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <MDIO_voidSetPinDirection+0xac>)
		break;

	case DIOB:
		if (Copy_u8Pin <= 7)
		{
			GPIOB->CRL &= ~(0b1111 << 4 * Copy_u8Pin);
 80007e0:	240f      	movs	r4, #15
 80007e2:	6818      	ldr	r0, [r3, #0]
 80007e4:	0089      	lsls	r1, r1, #2
 80007e6:	408c      	lsls	r4, r1
 80007e8:	ea20 0004 	bic.w	r0, r0, r4
 80007ec:	6018      	str	r0, [r3, #0]
			GPIOB->CRL |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
 80007ee:	6818      	ldr	r0, [r3, #0]
 80007f0:	fa02 f101 	lsl.w	r1, r2, r1
 80007f4:	4301      	orrs	r1, r0
 80007f6:	6019      	str	r1, [r3, #0]
 80007f8:	e011      	b.n	800081e <MDIO_voidSetPinDirection+0x52>
		else if (Copy_u8Pin > 7 && Copy_u8Pin <= 15)
 80007fa:	f1a1 0308 	sub.w	r3, r1, #8
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b07      	cmp	r3, #7
 8000802:	d80c      	bhi.n	800081e <MDIO_voidSetPinDirection+0x52>
			GPIOA->CRH &= ~(0b1111 << 4 * Copy_u8Pin);
 8000804:	240f      	movs	r4, #15
 8000806:	491c      	ldr	r1, [pc, #112]	; (8000878 <MDIO_voidSetPinDirection+0xac>)
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	6848      	ldr	r0, [r1, #4]
 800080c:	409c      	lsls	r4, r3
 800080e:	ea20 0004 	bic.w	r0, r0, r4
 8000812:	6048      	str	r0, [r1, #4]
			GPIOA->CRH |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
 8000814:	6848      	ldr	r0, [r1, #4]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	4303      	orrs	r3, r0
 800081c:	604b      	str	r3, [r1, #4]
			GPIOC->CRH &= ~(0b1111 << 4 * Copy_u8Pin);
			GPIOC->CRH |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
		}
		break;
	}
}
 800081e:	bd10      	pop	{r4, pc}
		if (Copy_u8Pin <= 7)
 8000820:	2907      	cmp	r1, #7
 8000822:	d801      	bhi.n	8000828 <MDIO_voidSetPinDirection+0x5c>
			GPIOB->CRL &= ~(0b1111 << 4 * Copy_u8Pin);
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MDIO_voidSetPinDirection+0xb0>)
 8000826:	e7db      	b.n	80007e0 <MDIO_voidSetPinDirection+0x14>
		else if (Copy_u8Pin > 7 && Copy_u8Pin <= 15)
 8000828:	3908      	subs	r1, #8
 800082a:	b2c9      	uxtb	r1, r1
 800082c:	2907      	cmp	r1, #7
 800082e:	d8f6      	bhi.n	800081e <MDIO_voidSetPinDirection+0x52>
			GPIOB->CRH &= ~(0b1111 << 4 * Copy_u8Pin);
 8000830:	240f      	movs	r4, #15
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MDIO_voidSetPinDirection+0xb0>)
 8000834:	0089      	lsls	r1, r1, #2
 8000836:	6858      	ldr	r0, [r3, #4]
 8000838:	408c      	lsls	r4, r1
 800083a:	ea20 0004 	bic.w	r0, r0, r4
 800083e:	6058      	str	r0, [r3, #4]
			GPIOB->CRH |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
 8000840:	6858      	ldr	r0, [r3, #4]
 8000842:	fa02 f101 	lsl.w	r1, r2, r1
 8000846:	4301      	orrs	r1, r0
 8000848:	6059      	str	r1, [r3, #4]
 800084a:	e7e8      	b.n	800081e <MDIO_voidSetPinDirection+0x52>
		if (Copy_u8Pin <= 7)
 800084c:	2907      	cmp	r1, #7
 800084e:	d801      	bhi.n	8000854 <MDIO_voidSetPinDirection+0x88>
			GPIOC->CRL &= ~(0b1111 << 4 * Copy_u8Pin);
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MDIO_voidSetPinDirection+0xb4>)
 8000852:	e7c5      	b.n	80007e0 <MDIO_voidSetPinDirection+0x14>
		else if (Copy_u8Pin > 7 && Copy_u8Pin <= 15)
 8000854:	3908      	subs	r1, #8
 8000856:	b2c9      	uxtb	r1, r1
 8000858:	2907      	cmp	r1, #7
 800085a:	d8e0      	bhi.n	800081e <MDIO_voidSetPinDirection+0x52>
			GPIOC->CRH &= ~(0b1111 << 4 * Copy_u8Pin);
 800085c:	240f      	movs	r4, #15
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MDIO_voidSetPinDirection+0xb4>)
 8000860:	0089      	lsls	r1, r1, #2
 8000862:	6858      	ldr	r0, [r3, #4]
 8000864:	408c      	lsls	r4, r1
 8000866:	ea20 0004 	bic.w	r0, r0, r4
 800086a:	6058      	str	r0, [r3, #4]
			GPIOC->CRH |= (u8Copy_u8Mode << 4 * Copy_u8Pin);
 800086c:	6858      	ldr	r0, [r3, #4]
 800086e:	408a      	lsls	r2, r1
 8000870:	4302      	orrs	r2, r0
 8000872:	605a      	str	r2, [r3, #4]
}
 8000874:	e7d3      	b.n	800081e <MDIO_voidSetPinDirection+0x52>
 8000876:	bf00      	nop
 8000878:	40010800 	.word	0x40010800
 800087c:	40010c00 	.word	0x40010c00
 8000880:	40011000 	.word	0x40011000

08000884 <MDIO_voidSetPinValue>:
void MDIO_voidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 u8Copy_u8Value)
{

	switch (Copy_u8Port)
 8000884:	2802      	cmp	r0, #2
 8000886:	d016      	beq.n	80008b6 <MDIO_voidSetPinValue+0x32>
 8000888:	2803      	cmp	r0, #3
 800088a:	d021      	beq.n	80008d0 <MDIO_voidSetPinValue+0x4c>
 800088c:	2801      	cmp	r0, #1
 800088e:	d11e      	bne.n	80008ce <MDIO_voidSetPinValue+0x4a>
	{
	case DIOA:
		if (u8Copy_u8Value == DIO_HIGH)
 8000890:	2a01      	cmp	r2, #1
 8000892:	d105      	bne.n	80008a0 <MDIO_voidSetPinValue+0x1c>
		{
			SET_BIT(GPIOA->ODR, Copy_u8Pin);
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MDIO_voidSetPinValue+0x5c>)
		}
		break;
	case DIOB:
		if (u8Copy_u8Value == DIO_HIGH)
		{
			SET_BIT(GPIOB->ODR, Copy_u8Pin);
 8000896:	68d8      	ldr	r0, [r3, #12]
 8000898:	408a      	lsls	r2, r1
 800089a:	4302      	orrs	r2, r0
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	4770      	bx	lr
		else if (u8Copy_u8Value == DIO_LOW)
 80008a0:	b9aa      	cbnz	r2, 80008ce <MDIO_voidSetPinValue+0x4a>
			CLR_BIT(GPIOA->ODR, Copy_u8Pin);
 80008a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80008a6:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 80008aa:	68d3      	ldr	r3, [r2, #12]
 80008ac:	4088      	lsls	r0, r1
 80008ae:	ea23 0300 	bic.w	r3, r3, r0
 80008b2:	60d3      	str	r3, [r2, #12]
 80008b4:	4770      	bx	lr
		if (u8Copy_u8Value == DIO_HIGH)
 80008b6:	2a01      	cmp	r2, #1
 80008b8:	d101      	bne.n	80008be <MDIO_voidSetPinValue+0x3a>
			SET_BIT(GPIOB->ODR, Copy_u8Pin);
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MDIO_voidSetPinValue+0x60>)
 80008bc:	e7eb      	b.n	8000896 <MDIO_voidSetPinValue+0x12>
		}
		else if (u8Copy_u8Value == DIO_LOW)
 80008be:	b932      	cbnz	r2, 80008ce <MDIO_voidSetPinValue+0x4a>
		{
			CLR_BIT(GPIOB->ODR, Copy_u8Pin);
 80008c0:	4808      	ldr	r0, [pc, #32]	; (80008e4 <MDIO_voidSetPinValue+0x60>)
		{
			SET_BIT(GPIOC->ODR, Copy_u8Pin);
		}
		else if (u8Copy_u8Value == DIO_LOW)
		{
			CLR_BIT(GPIOC->ODR, Copy_u8Pin);
 80008c2:	2201      	movs	r2, #1
 80008c4:	68c3      	ldr	r3, [r0, #12]
 80008c6:	408a      	lsls	r2, r1
 80008c8:	ea23 0302 	bic.w	r3, r3, r2
 80008cc:	60c3      	str	r3, [r0, #12]
		}
		break;
	}
}
 80008ce:	4770      	bx	lr
		if (u8Copy_u8Value == DIO_HIGH)
 80008d0:	2a01      	cmp	r2, #1
 80008d2:	d101      	bne.n	80008d8 <MDIO_voidSetPinValue+0x54>
			SET_BIT(GPIOC->ODR, Copy_u8Pin);
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <MDIO_voidSetPinValue+0x64>)
 80008d6:	e7de      	b.n	8000896 <MDIO_voidSetPinValue+0x12>
		else if (u8Copy_u8Value == DIO_LOW)
 80008d8:	2a00      	cmp	r2, #0
 80008da:	d1f8      	bne.n	80008ce <MDIO_voidSetPinValue+0x4a>
			CLR_BIT(GPIOC->ODR, Copy_u8Pin);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <MDIO_voidSetPinValue+0x64>)
 80008de:	e7f0      	b.n	80008c2 <MDIO_voidSetPinValue+0x3e>
 80008e0:	40010800 	.word	0x40010800
 80008e4:	40010c00 	.word	0x40010c00
 80008e8:	40011000 	.word	0x40011000

080008ec <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{

	u8 LOC_u8Result = 0;

	switch (Copy_u8Port)
 80008ec:	2802      	cmp	r0, #2
 80008ee:	d009      	beq.n	8000904 <MDIO_u8GetPinValue+0x18>
 80008f0:	2803      	cmp	r0, #3
 80008f2:	d009      	beq.n	8000908 <MDIO_u8GetPinValue+0x1c>
 80008f4:	2801      	cmp	r0, #1
 80008f6:	d109      	bne.n	800090c <MDIO_u8GetPinValue+0x20>
	{
	case DIOA:
		LOC_u8Result = GET_BIT(GPIOA->IDR, Copy_u8Pin);
 80008f8:	4b05      	ldr	r3, [pc, #20]	; (8000910 <MDIO_u8GetPinValue+0x24>)

		break;
	case DIOB:

		LOC_u8Result = GET_BIT(GPIOB->IDR, Copy_u8Pin);
 80008fa:	6898      	ldr	r0, [r3, #8]
 80008fc:	40c8      	lsrs	r0, r1
 80008fe:	f000 0001 	and.w	r0, r0, #1

		break;
 8000902:	4770      	bx	lr
		LOC_u8Result = GET_BIT(GPIOB->IDR, Copy_u8Pin);
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <MDIO_u8GetPinValue+0x28>)
 8000906:	e7f8      	b.n	80008fa <MDIO_u8GetPinValue+0xe>
	case DIOC:

		LOC_u8Result = GET_BIT(GPIOC->IDR, Copy_u8Pin);
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <MDIO_u8GetPinValue+0x2c>)
 800090a:	e7f6      	b.n	80008fa <MDIO_u8GetPinValue+0xe>
	switch (Copy_u8Port)
 800090c:	2000      	movs	r0, #0

		break;
	}
	return LOC_u8Result;
}
 800090e:	4770      	bx	lr
 8000910:	40010800 	.word	0x40010800
 8000914:	40010c00 	.word	0x40010c00
 8000918:	40011000 	.word	0x40011000

0800091c <RCC_voidInitSysClock>:
	RCC_CR = 0x00000081; /* Enable HSI + Trimming = 0 */
	RCC_CFGR = 0x00000000;

#elif RCC_CLOCK_TYPE == RCC_PLL
#if RCC_PLL_INPUT == RCC_PLL_IN_HSI_DIV_2
	RCC_CFGR |= (0b10 << 0);
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <RCC_voidInitSysClock+0x1c>)
 800091e:	685a      	ldr	r2, [r3, #4]
 8000920:	f042 0202 	orr.w	r2, r2, #2
 8000924:	605a      	str	r2, [r3, #4]
	RCC_CFGR |= (0b0111 << 18);
 8000926:	685a      	ldr	r2, [r3, #4]
 8000928:	f442 12e0 	orr.w	r2, r2, #1835008	; 0x1c0000
 800092c:	605a      	str	r2, [r3, #4]
	// RCC_CFGR|=(0b100<<8);
	// RCC_CFGR|=(0b101<<11);
	RCC_CR |= (1 << 24);
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000934:	601a      	str	r2, [r3, #0]
#endif

#else
#error("You chosed Wrong Clock type")
#endif
}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000

0800093c <RCC_voidEnablePeripheralClock>:
//==============================================================================================================

void RCC_voidEnablePeripheralClock(u8 Copy_u8BusId, u8 Copy_u8PeripheralId)
{

	if (Copy_u8BusId <= 31)
 800093c:	281f      	cmp	r0, #31
 800093e:	d817      	bhi.n	8000970 <RCC_voidEnablePeripheralClock+0x34>
	{
		switch (Copy_u8BusId)
 8000940:	2801      	cmp	r0, #1
 8000942:	d009      	beq.n	8000958 <RCC_voidEnablePeripheralClock+0x1c>
 8000944:	2802      	cmp	r0, #2
 8000946:	d00d      	beq.n	8000964 <RCC_voidEnablePeripheralClock+0x28>
 8000948:	b990      	cbnz	r0, 8000970 <RCC_voidEnablePeripheralClock+0x34>
		{

		case AHB_BUS:
			SET_BIT(RCC_AHBENR, Copy_u8PeripheralId);
 800094a:	2301      	movs	r3, #1
 800094c:	4a09      	ldr	r2, [pc, #36]	; (8000974 <RCC_voidEnablePeripheralClock+0x38>)
 800094e:	408b      	lsls	r3, r1
 8000950:	6950      	ldr	r0, [r2, #20]
 8000952:	4303      	orrs	r3, r0
 8000954:	6153      	str	r3, [r2, #20]
			break;
 8000956:	4770      	bx	lr
		case APB1_BUS:
			SET_BIT(RCC_APB1ENR, Copy_u8PeripheralId);
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <RCC_voidEnablePeripheralClock+0x38>)
 800095a:	4088      	lsls	r0, r1
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	4310      	orrs	r0, r2
 8000960:	61d8      	str	r0, [r3, #28]
			break;
 8000962:	4770      	bx	lr
		case APB2_BUS:
			SET_BIT(RCC_APB2ENR, Copy_u8PeripheralId);
 8000964:	2301      	movs	r3, #1
 8000966:	4a03      	ldr	r2, [pc, #12]	; (8000974 <RCC_voidEnablePeripheralClock+0x38>)
 8000968:	408b      	lsls	r3, r1
 800096a:	6990      	ldr	r0, [r2, #24]
 800096c:	4303      	orrs	r3, r0
 800096e:	6193      	str	r3, [r2, #24]

	else
	{
		/* Return Error*/
	}
}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <SERVO_voidInit>:
#include "../Src/DIO_interface.h"
#include "../Src/RCC_interface.h"
#include "../Src/RCC_private.h"

void SERVO_voidInit()
{
 8000978:	b508      	push	{r3, lr}
    RCC_voidEnablePeripheralClock(APB1_BUS, TIM2_RCC);
 800097a:	2100      	movs	r1, #0
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff ffdd 	bl	800093c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, SERVO_PORT_RCC);
 8000982:	2102      	movs	r1, #2
 8000984:	4608      	mov	r0, r1
 8000986:	f7ff ffd9 	bl	800093c <RCC_voidEnablePeripheralClock>

    MDIO_voidSetPinDirection(SERVO_PORT, PIN0, OUTPUT_SPEED_50MHZ_AFPP);
 800098a:	220b      	movs	r2, #11
 800098c:	2100      	movs	r1, #0
 800098e:	2001      	movs	r0, #1
 8000990:	f7ff ff1c 	bl	80007cc <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(SERVO_PORT, PIN1, OUTPUT_SPEED_50MHZ_AFPP);
 8000994:	2101      	movs	r1, #1
 8000996:	220b      	movs	r2, #11
 8000998:	4608      	mov	r0, r1
 800099a:	f7ff ff17 	bl	80007cc <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(SERVO_PORT, PIN2, OUTPUT_SPEED_50MHZ_AFPP);
 800099e:	220b      	movs	r2, #11
 80009a0:	2102      	movs	r1, #2
 80009a2:	2001      	movs	r0, #1
 80009a4:	f7ff ff12 	bl	80007cc <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(SERVO_PORT, PIN3, OUTPUT_SPEED_50MHZ_AFPP);
 80009a8:	220b      	movs	r2, #11
 80009aa:	2103      	movs	r1, #3
 80009ac:	2001      	movs	r0, #1
 80009ae:	f7ff ff0d 	bl	80007cc <MDIO_voidSetPinDirection>

    TIM2_voidInit();
}
 80009b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TIM2_voidInit();
 80009b6:	f000 b88d 	b.w	8000ad4 <TIM2_voidInit>
	...

080009bc <SERVO_voidSetAngle>:

void SERVO_voidSetAngle(u8 servoNumber, u16 angle)
{
 80009bc:	b510      	push	{r4, lr}
 80009be:	4604      	mov	r4, r0
    TIM2_voidGeneratePwm(servoNumber, (0.094f / 180) * angle + 0.03f);
 80009c0:	4608      	mov	r0, r1
 80009c2:	f7ff fc7f 	bl	80002c4 <__aeabi_i2f>
 80009c6:	4906      	ldr	r1, [pc, #24]	; (80009e0 <SERVO_voidSetAngle+0x24>)
 80009c8:	f7ff fcd0 	bl	800036c <__aeabi_fmul>
 80009cc:	4905      	ldr	r1, [pc, #20]	; (80009e4 <SERVO_voidSetAngle+0x28>)
 80009ce:	f7ff fbc5 	bl	800015c <__addsf3>
 80009d2:	4601      	mov	r1, r0
 80009d4:	4620      	mov	r0, r4
}
 80009d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TIM2_voidGeneratePwm(servoNumber, (0.094f / 180) * angle + 0.03f);
 80009da:	f000 b8df 	b.w	8000b9c <TIM2_voidGeneratePwm>
 80009de:	bf00      	nop
 80009e0:	3a08e5bd 	.word	0x3a08e5bd
 80009e4:	3cf5c28f 	.word	0x3cf5c28f

080009e8 <TIM1_voidInit>:
TIM_MasterConfigTypeDef sMasterConfig = {0};
TIM_OC_InitTypeDef sConfigOC = {0};
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

void TIM1_voidInit()
{
 80009e8:	b538      	push	{r3, r4, r5, lr}
    htim11.Instance = TIM1;
    htim11.Init.Prescaler = 16;
 80009ea:	2310      	movs	r3, #16
    htim11.Instance = TIM1;
 80009ec:	4d1f      	ldr	r5, [pc, #124]	; (8000a6c <TIM1_voidInit+0x84>)
    htim11.Init.Prescaler = 16;
 80009ee:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <TIM1_voidInit+0x88>)
    htim11.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
    htim11.Init.Period = 45000;
    htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f0:	2400      	movs	r4, #0
    htim11.Init.Prescaler = 16;
 80009f2:	e9c5 2300 	strd	r2, r3, [r5]
    htim11.Init.Period = 45000;
 80009f6:	2120      	movs	r1, #32
 80009f8:	f64a 73c8 	movw	r3, #45000	; 0xafc8
    htim11.Init.RepetitionCounter = 0;
    htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    HAL_TIM_Base_Init(&htim11);
 80009fc:	4628      	mov	r0, r5
    htim11.Init.Period = 45000;
 80009fe:	e9c5 1302 	strd	r1, r3, [r5, #8]
    htim11.Init.RepetitionCounter = 0;
 8000a02:	e9c5 4404 	strd	r4, r4, [r5, #16]
    htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	61ac      	str	r4, [r5, #24]
    HAL_TIM_Base_Init(&htim11);
 8000a08:	f000 fd7a 	bl	8001500 <HAL_TIM_Base_Init>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	4918      	ldr	r1, [pc, #96]	; (8000a74 <TIM1_voidInit+0x8c>)
    HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig);
 8000a12:	4628      	mov	r0, r5
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	600b      	str	r3, [r1, #0]
    HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig);
 8000a16:	f000 fe5a 	bl	80016ce <HAL_TIM_ConfigClockSource>
    HAL_TIM_PWM_Init(&htim11);
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	f000 fd9c 	bl	8001558 <HAL_TIM_PWM_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	4915      	ldr	r1, [pc, #84]	; (8000a78 <TIM1_voidInit+0x90>)
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    HAL_TIMEx_MasterConfigSynchronization(&htim11, &sMasterConfig);
 8000a22:	4628      	mov	r0, r5
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	e9c1 4400 	strd	r4, r4, [r1]
    HAL_TIMEx_MasterConfigSynchronization(&htim11, &sMasterConfig);
 8000a28:	f000 ff46 	bl	80018b8 <HAL_TIMEx_MasterConfigSynchronization>
    sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a2c:	2370      	movs	r3, #112	; 0x70
 8000a2e:	4913      	ldr	r1, [pc, #76]	; (8000a7c <TIM1_voidInit+0x94>)
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
    HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1);
 8000a30:	4622      	mov	r2, r4
 8000a32:	4628      	mov	r0, r5
    sConfigOC.Pulse = 0;
 8000a34:	e9c1 3400 	strd	r3, r4, [r1]
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a38:	e9c1 4402 	strd	r4, r4, [r1, #8]
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a3c:	e9c1 4404 	strd	r4, r4, [r1, #16]
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a40:	618c      	str	r4, [r1, #24]
    HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1);
 8000a42:	f000 fde1 	bl	8001608 <HAL_TIM_PWM_ConfigChannel>
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
    sBreakDeadTimeConfig.DeadTime = 0;
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a4a:	490d      	ldr	r1, [pc, #52]	; (8000a80 <TIM1_voidInit+0x98>)
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
    HAL_TIMEx_ConfigBreakDeadTime(&htim11, &sBreakDeadTimeConfig);
 8000a4c:	4628      	mov	r0, r5
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a4e:	e9c1 4400 	strd	r4, r4, [r1]
    sBreakDeadTimeConfig.DeadTime = 0;
 8000a52:	e9c1 4402 	strd	r4, r4, [r1, #8]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a56:	610c      	str	r4, [r1, #16]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a58:	614b      	str	r3, [r1, #20]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a5a:	61cc      	str	r4, [r1, #28]
    HAL_TIMEx_ConfigBreakDeadTime(&htim11, &sBreakDeadTimeConfig);
 8000a5c:	f000 ff56 	bl	800190c <HAL_TIMEx_ConfigBreakDeadTime>
    HAL_TIM_MspPostInit(&htim11);
 8000a60:	4628      	mov	r0, r5
}
 8000a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_TIM_MspPostInit(&htim11);
 8000a66:	f000 bb1f 	b.w	80010a8 <HAL_TIM_MspPostInit>
 8000a6a:	bf00      	nop
 8000a6c:	20000084 	.word	0x20000084
 8000a70:	40012c00 	.word	0x40012c00
 8000a74:	200000ec 	.word	0x200000ec
 8000a78:	20000118 	.word	0x20000118
 8000a7c:	200000fc 	.word	0x200000fc
 8000a80:	200000cc 	.word	0x200000cc

08000a84 <TIM1_voidStart>:

void TIM1_voidStart()
{
    HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000a84:	2100      	movs	r1, #0
 8000a86:	4801      	ldr	r0, [pc, #4]	; (8000a8c <TIM1_voidStart+0x8>)
 8000a88:	f000 bf14 	b.w	80018b4 <HAL_TIM_PWM_Start>
 8000a8c:	20000084 	.word	0x20000084

08000a90 <TIM1_voidGeneratePwm>:
}

void TIM1_voidGeneratePwm(u8 channel, f32 dutyCycle)
{
    u16 compareValue = 45000 * (1 - dutyCycle) - 1;
    switch (channel)
 8000a90:	2801      	cmp	r0, #1
{
 8000a92:	b510      	push	{r4, lr}
    switch (channel)
 8000a94:	d116      	bne.n	8000ac4 <TIM1_voidGeneratePwm+0x34>
    u16 compareValue = 45000 * (1 - dutyCycle) - 1;
 8000a96:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000a9a:	f7ff fb5d 	bl	8000158 <__aeabi_fsub>
 8000a9e:	490a      	ldr	r1, [pc, #40]	; (8000ac8 <TIM1_voidGeneratePwm+0x38>)
 8000aa0:	f7ff fc64 	bl	800036c <__aeabi_fmul>
 8000aa4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000aa8:	f7ff fb56 	bl	8000158 <__aeabi_fsub>
 8000aac:	f7ff fe24 	bl	80006f8 <__aeabi_f2uiz>
    {
    case PWM_CHANNEL_1:
        sConfigOC.Pulse = compareValue;
 8000ab0:	4c06      	ldr	r4, [pc, #24]	; (8000acc <TIM1_voidGeneratePwm+0x3c>)
 8000ab2:	b280      	uxth	r0, r0
 8000ab4:	6060      	str	r0, [r4, #4]
        HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1);
 8000ab6:	4621      	mov	r1, r4
        break;
    }
}
 8000ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1);
 8000abc:	2200      	movs	r2, #0
 8000abe:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <TIM1_voidGeneratePwm+0x40>)
 8000ac0:	f000 bda2 	b.w	8001608 <HAL_TIM_PWM_ConfigChannel>
}
 8000ac4:	bd10      	pop	{r4, pc}
 8000ac6:	bf00      	nop
 8000ac8:	472fc800 	.word	0x472fc800
 8000acc:	200000fc 	.word	0x200000fc
 8000ad0:	20000084 	.word	0x20000084

08000ad4 <TIM2_voidInit>:
TIM_MasterConfigTypeDef sMasterConfig2 = {0};
TIM_OC_InitTypeDef sConfigOC2 = {0};
TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig2 = {0};

void TIM2_voidInit()
{
 8000ad4:	b570      	push	{r4, r5, r6, lr}
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	2610      	movs	r6, #16
{
 8000ad8:	b086      	sub	sp, #24
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	4632      	mov	r2, r6
 8000adc:	2100      	movs	r1, #0
 8000ade:	a802      	add	r0, sp, #8
 8000ae0:	f001 fccc 	bl	800247c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
	htim22.Instance = TIM2;
 8000ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ae8:	4c1f      	ldr	r4, [pc, #124]	; (8000b68 <TIM2_voidInit+0x94>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aea:	2500      	movs	r5, #0
	htim22.Init.Prescaler = 16;
 8000aec:	e9c4 3600 	strd	r3, r6, [r4]
	htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim22.Init.Period = 45000;
 8000af0:	f64a 73c8 	movw	r3, #45000	; 0xafc8
	htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000af8:	2380      	movs	r3, #128	; 0x80
	HAL_TIM_Base_Init(&htim22);
 8000afa:	4620      	mov	r0, r4
	htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000afc:	61a3      	str	r3, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afe:	e9cd 5500 	strd	r5, r5, [sp]
	htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b02:	60a5      	str	r5, [r4, #8]
	HAL_TIM_Base_Init(&htim22);
 8000b04:	f000 fcfc 	bl	8001500 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig);
 8000b0c:	a902      	add	r1, sp, #8
 8000b0e:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	9302      	str	r3, [sp, #8]
	HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig);
 8000b12:	f000 fddc 	bl	80016ce <HAL_TIM_ConfigClockSource>
	HAL_TIM_PWM_Init(&htim22);
 8000b16:	4620      	mov	r0, r4
 8000b18:	f000 fd1e 	bl	8001558 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig);
 8000b1c:	4669      	mov	r1, sp
 8000b1e:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b20:	e9cd 5500 	strd	r5, r5, [sp]
	HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig);
 8000b24:	f000 fec8 	bl	80018b8 <HAL_TIMEx_MasterConfigSynchronization>
	sConfigOC2.OCMode = TIM_OCMODE_PWM2;
 8000b28:	2370      	movs	r3, #112	; 0x70
 8000b2a:	4e10      	ldr	r6, [pc, #64]	; (8000b6c <TIM2_voidInit+0x98>)
	sConfigOC2.Pulse = 0;
	sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
	HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_1);
 8000b2c:	462a      	mov	r2, r5
 8000b2e:	4631      	mov	r1, r6
 8000b30:	4620      	mov	r0, r4
	sConfigOC2.Pulse = 0;
 8000b32:	e9c6 3500 	strd	r3, r5, [r6]
	sConfigOC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b36:	60b5      	str	r5, [r6, #8]
	sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
 8000b38:	6135      	str	r5, [r6, #16]
	HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_1);
 8000b3a:	f000 fd65 	bl	8001608 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_2);
 8000b3e:	4631      	mov	r1, r6
 8000b40:	2204      	movs	r2, #4
 8000b42:	4620      	mov	r0, r4
 8000b44:	f000 fd60 	bl	8001608 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_3);
 8000b48:	4631      	mov	r1, r6
 8000b4a:	2208      	movs	r2, #8
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	f000 fd5b 	bl	8001608 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_4);
 8000b52:	220c      	movs	r2, #12
 8000b54:	4631      	mov	r1, r6
 8000b56:	4620      	mov	r0, r4
 8000b58:	f000 fd56 	bl	8001608 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_MspPostInit(&htim22);
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f000 faa3 	bl	80010a8 <HAL_TIM_MspPostInit>
}
 8000b62:	b006      	add	sp, #24
 8000b64:	bd70      	pop	{r4, r5, r6, pc}
 8000b66:	bf00      	nop
 8000b68:	20000120 	.word	0x20000120
 8000b6c:	20000168 	.word	0x20000168

08000b70 <TIM2_voidStart>:

void TIM2_voidStart()
{
 8000b70:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_1);
 8000b72:	4c09      	ldr	r4, [pc, #36]	; (8000b98 <TIM2_voidStart+0x28>)
 8000b74:	2100      	movs	r1, #0
 8000b76:	4620      	mov	r0, r4
 8000b78:	f000 fe9c 	bl	80018b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2);
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f000 fe98 	bl	80018b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_3);
 8000b84:	2108      	movs	r1, #8
 8000b86:	4620      	mov	r0, r4
 8000b88:	f000 fe94 	bl	80018b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_4);
 8000b8c:	4620      	mov	r0, r4
}
 8000b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_4);
 8000b92:	210c      	movs	r1, #12
 8000b94:	f000 be8e 	b.w	80018b4 <HAL_TIM_PWM_Start>
 8000b98:	20000120 	.word	0x20000120

08000b9c <TIM2_voidGeneratePwm>:
{
	return TIMER_2->TIM_CNT;
}

void TIM2_voidGeneratePwm(u8 channel, f32 dutyCycle)
{
 8000b9c:	b510      	push	{r4, lr}
 8000b9e:	4604      	mov	r4, r0
	u16 compareValue = 45000 * (1 - dutyCycle) - 1;
 8000ba0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8000ba4:	f7ff fad8 	bl	8000158 <__aeabi_fsub>
 8000ba8:	4910      	ldr	r1, [pc, #64]	; (8000bec <TIM2_voidGeneratePwm+0x50>)
 8000baa:	f7ff fbdf 	bl	800036c <__aeabi_fmul>
 8000bae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000bb2:	f7ff fad1 	bl	8000158 <__aeabi_fsub>
 8000bb6:	f7ff fd9f 	bl	80006f8 <__aeabi_f2uiz>
	sConfigOC2.Pulse = compareValue;
 8000bba:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <TIM2_voidGeneratePwm+0x54>)
 8000bbc:	b280      	uxth	r0, r0
 8000bbe:	6058      	str	r0, [r3, #4]
	switch (channel)
 8000bc0:	1e60      	subs	r0, r4, #1
 8000bc2:	2803      	cmp	r0, #3
 8000bc4:	d810      	bhi.n	8000be8 <TIM2_voidGeneratePwm+0x4c>
 8000bc6:	e8df f000 	tbb	[pc, r0]
 8000bca:	0902      	.short	0x0902
 8000bcc:	0d0b      	.short	0x0d0b
	{
	case PWM_CHANNEL_1:
		HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_1);
 8000bce:	2200      	movs	r2, #0
		break;
	case PWM_CHANNEL_4:
		HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_4);
		break;
	}
}
 8000bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_4);
 8000bd4:	4906      	ldr	r1, [pc, #24]	; (8000bf0 <TIM2_voidGeneratePwm+0x54>)
 8000bd6:	4807      	ldr	r0, [pc, #28]	; (8000bf4 <TIM2_voidGeneratePwm+0x58>)
 8000bd8:	f000 bd16 	b.w	8001608 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_2);
 8000bdc:	2204      	movs	r2, #4
 8000bde:	e7f7      	b.n	8000bd0 <TIM2_voidGeneratePwm+0x34>
		HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_3);
 8000be0:	2208      	movs	r2, #8
 8000be2:	e7f5      	b.n	8000bd0 <TIM2_voidGeneratePwm+0x34>
		HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC2, TIM_CHANNEL_4);
 8000be4:	220c      	movs	r2, #12
 8000be6:	e7f3      	b.n	8000bd0 <TIM2_voidGeneratePwm+0x34>
}
 8000be8:	bd10      	pop	{r4, pc}
 8000bea:	bf00      	nop
 8000bec:	472fc800 	.word	0x472fc800
 8000bf0:	20000168 	.word	0x20000168
 8000bf4:	20000120 	.word	0x20000120

08000bf8 <TIM3_voidInit>:
TIM_HandleTypeDef htim33;
TIM_ClockConfigTypeDef sClockSourceConfig3 = {0};
TIM_MasterConfigTypeDef sMasterConfig3 = {0};

void TIM3_voidInit()
{
 8000bf8:	b538      	push	{r3, r4, r5, lr}
    htim33.Instance = TIM3;
    htim33.Init.Prescaler = 72;
 8000bfa:	2348      	movs	r3, #72	; 0x48
    htim33.Instance = TIM3;
 8000bfc:	4c0e      	ldr	r4, [pc, #56]	; (8000c38 <TIM3_voidInit+0x40>)
    htim33.Init.Prescaler = 72;
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <TIM3_voidInit+0x44>)
    htim33.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim33.Init.Period = 65535;
 8000c00:	2500      	movs	r5, #0
    htim33.Init.Prescaler = 72;
 8000c02:	e9c4 2300 	strd	r2, r3, [r4]
    htim33.Init.Period = 65535;
 8000c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
    htim33.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim33.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    HAL_TIM_Base_Init(&htim33);
 8000c0a:	4620      	mov	r0, r4
    htim33.Init.Period = 65535;
 8000c0c:	e9c4 5302 	strd	r5, r3, [r4, #8]
    htim33.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	6125      	str	r5, [r4, #16]
    htim33.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c12:	61a5      	str	r5, [r4, #24]
    HAL_TIM_Base_Init(&htim33);
 8000c14:	f000 fc74 	bl	8001500 <HAL_TIM_Base_Init>
    sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1c:	4908      	ldr	r1, [pc, #32]	; (8000c40 <TIM3_voidInit+0x48>)
    HAL_TIM_ConfigClockSource(&htim33, &sClockSourceConfig3);
 8000c1e:	4620      	mov	r0, r4
    sClockSourceConfig3.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	600b      	str	r3, [r1, #0]
    HAL_TIM_ConfigClockSource(&htim33, &sClockSourceConfig3);
 8000c22:	f000 fd54 	bl	80016ce <HAL_TIM_ConfigClockSource>
    sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c26:	4907      	ldr	r1, [pc, #28]	; (8000c44 <TIM3_voidInit+0x4c>)
    sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    HAL_TIMEx_MasterConfigSynchronization(&htim33, &sMasterConfig3);
 8000c28:	4620      	mov	r0, r4
    sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2a:	e9c1 5500 	strd	r5, r5, [r1]
}
 8000c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_TIMEx_MasterConfigSynchronization(&htim33, &sMasterConfig3);
 8000c32:	f000 be41 	b.w	80018b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	bf00      	nop
 8000c38:	20000184 	.word	0x20000184
 8000c3c:	40000400 	.word	0x40000400
 8000c40:	200001cc 	.word	0x200001cc
 8000c44:	200001dc 	.word	0x200001dc

08000c48 <TIM3_voidStart>:

void TIM3_voidStart()
{
    HAL_TIM_Base_Start(&htim33);
 8000c48:	4801      	ldr	r0, [pc, #4]	; (8000c50 <TIM3_voidStart+0x8>)
 8000c4a:	f000 bbef 	b.w	800142c <HAL_TIM_Base_Start>
 8000c4e:	bf00      	nop
 8000c50:	20000184 	.word	0x20000184

08000c54 <TIM3_voidStop>:
}

void TIM3_voidStop()
{
    HAL_TIM_Base_Stop(&htim33);
 8000c54:	4801      	ldr	r0, [pc, #4]	; (8000c5c <TIM3_voidStop+0x8>)
 8000c56:	f000 bc0b 	b.w	8001470 <HAL_TIM_Base_Stop>
 8000c5a:	bf00      	nop
 8000c5c:	20000184 	.word	0x20000184

08000c60 <TIM3_voidSetTimerValue>:
}

void TIM3_voidSetTimerValue(u16 value)
{
    TIM3_CNT = value;
 8000c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c64:	f8c3 0424 	str.w	r0, [r3, #1060]	; 0x424
}
 8000c68:	4770      	bx	lr

08000c6a <TIM3_u16GetTimerValue>:

u16 TIM3_u16GetTimerValue()
{
    return TIM3_CNT & MASK_16_BITS;
 8000c6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c6e:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
}
 8000c72:	b280      	uxth	r0, r0
 8000c74:	4770      	bx	lr
	...

08000c78 <TIM3_voidDelay>:

void TIM3_voidDelay(f32 delayTime)
{
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f32 tickTime = TIM3_PRESCALER / (f32)CLOCK;
    f32 overflowTime = 65536 * tickTime;
    if (delayTime >= overflowTime)
 8000c7a:	4935      	ldr	r1, [pc, #212]	; (8000d50 <TIM3_voidDelay+0xd8>)
{
 8000c7c:	4604      	mov	r4, r0
    if (delayTime >= overflowTime)
 8000c7e:	f7ff fd27 	bl	80006d0 <__aeabi_fcmpge>
 8000c82:	2800      	cmp	r0, #0
 8000c84:	d04f      	beq.n	8000d26 <TIM3_voidDelay+0xae>
    {
        u32 numOfOverflows = delayTime / overflowTime, n = 0;
 8000c86:	4932      	ldr	r1, [pc, #200]	; (8000d50 <TIM3_voidDelay+0xd8>)
 8000c88:	4620      	mov	r0, r4
 8000c8a:	f7ff fc23 	bl	80004d4 <__aeabi_fdiv>
 8000c8e:	f7ff fd33 	bl	80006f8 <__aeabi_f2uiz>
 8000c92:	4607      	mov	r7, r0
        f32 fraction = delayTime - numOfOverflows * overflowTime;
 8000c94:	f7ff fb12 	bl	80002bc <__aeabi_ui2f>
 8000c98:	492d      	ldr	r1, [pc, #180]	; (8000d50 <TIM3_voidDelay+0xd8>)
 8000c9a:	f7ff fb67 	bl	800036c <__aeabi_fmul>
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f7ff fa59 	bl	8000158 <__aeabi_fsub>
    TIM3_CNT = value;
 8000ca6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 8000caa:	2400      	movs	r4, #0
        f32 fraction = delayTime - numOfOverflows * overflowTime;
 8000cac:	4605      	mov	r5, r0
    TIM3_CNT = value;
 8000cae:	f8c6 4424 	str.w	r4, [r6, #1060]	; 0x424
        TIM3_voidSetTimerValue(0);
        while (n < numOfOverflows)
 8000cb2:	42bc      	cmp	r4, r7
 8000cb4:	d127      	bne.n	8000d06 <TIM3_voidDelay+0x8e>
                ;
            TIM3_voidStop();
            CLR_BIT(TIM3_SR, 0);
            n++;
        }
        if (fraction)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f7ff fceb 	bl	8000694 <__aeabi_fcmpeq>
 8000cbe:	bb08      	cbnz	r0, 8000d04 <TIM3_voidDelay+0x8c>
        {
            TIM3_voidSetTimerValue(65536 - 65536 * (fraction / 10));
 8000cc0:	4924      	ldr	r1, [pc, #144]	; (8000d54 <TIM3_voidDelay+0xdc>)
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	f7ff fc06 	bl	80004d4 <__aeabi_fdiv>
 8000cc8:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8000ccc:	f7ff fb4e 	bl	800036c <__aeabi_fmul>
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	f04f 408f 	mov.w	r0, #1199570944	; 0x47800000
 8000cd6:	f7ff fa3f 	bl	8000158 <__aeabi_fsub>
 8000cda:	f7ff fd0d 	bl	80006f8 <__aeabi_f2uiz>
    TIM3_CNT = value;
 8000cde:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000ce2:	b280      	uxth	r0, r0
 8000ce4:	f8c4 0424 	str.w	r0, [r4, #1060]	; 0x424
            TIM3_voidStart();
 8000ce8:	f7ff ffae 	bl	8000c48 <TIM3_voidStart>
            while (!GET_BIT(TIM3_SR, 0))
 8000cec:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 8000cf0:	07da      	lsls	r2, r3, #31
 8000cf2:	d5fb      	bpl.n	8000cec <TIM3_voidDelay+0x74>
    {
        TIM3_voidSetTimerValue((overflowTime - delayTime) / tickTime);
        TIM3_voidStart();
        while (!GET_BIT(TIM3_SR, 0))
            ;
        TIM3_voidStop();
 8000cf4:	f7ff ffae 	bl	8000c54 <TIM3_voidStop>
        CLR_BIT(TIM3_SR, 0);
 8000cf8:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
    }
}
 8000d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            TIM3_voidStart();
 8000d06:	f7ff ff9f 	bl	8000c48 <TIM3_voidStart>
            while (!GET_BIT(TIM3_SR, 0))
 8000d0a:	f8d6 3410 	ldr.w	r3, [r6, #1040]	; 0x410
 8000d0e:	07d9      	lsls	r1, r3, #31
 8000d10:	d5fb      	bpl.n	8000d0a <TIM3_voidDelay+0x92>
            TIM3_voidStop();
 8000d12:	f7ff ff9f 	bl	8000c54 <TIM3_voidStop>
            CLR_BIT(TIM3_SR, 0);
 8000d16:	f8d6 3410 	ldr.w	r3, [r6, #1040]	; 0x410
            n++;
 8000d1a:	3401      	adds	r4, #1
            CLR_BIT(TIM3_SR, 0);
 8000d1c:	f023 0301 	bic.w	r3, r3, #1
 8000d20:	f8c6 3410 	str.w	r3, [r6, #1040]	; 0x410
            n++;
 8000d24:	e7c5      	b.n	8000cb2 <TIM3_voidDelay+0x3a>
        TIM3_voidSetTimerValue((overflowTime - delayTime) / tickTime);
 8000d26:	4621      	mov	r1, r4
 8000d28:	4809      	ldr	r0, [pc, #36]	; (8000d50 <TIM3_voidDelay+0xd8>)
 8000d2a:	f7ff fa15 	bl	8000158 <__aeabi_fsub>
 8000d2e:	490a      	ldr	r1, [pc, #40]	; (8000d58 <TIM3_voidDelay+0xe0>)
 8000d30:	f7ff fbd0 	bl	80004d4 <__aeabi_fdiv>
 8000d34:	f7ff fce0 	bl	80006f8 <__aeabi_f2uiz>
    TIM3_CNT = value;
 8000d38:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8000d3c:	b280      	uxth	r0, r0
 8000d3e:	f8c4 0424 	str.w	r0, [r4, #1060]	; 0x424
        TIM3_voidStart();
 8000d42:	f7ff ff81 	bl	8000c48 <TIM3_voidStart>
        while (!GET_BIT(TIM3_SR, 0))
 8000d46:	f8d4 3410 	ldr.w	r3, [r4, #1040]	; 0x410
 8000d4a:	07db      	lsls	r3, r3, #31
 8000d4c:	d5fb      	bpl.n	8000d46 <TIM3_voidDelay+0xce>
 8000d4e:	e7d1      	b.n	8000cf4 <TIM3_voidDelay+0x7c>
 8000d50:	3e0637bd 	.word	0x3e0637bd
 8000d54:	41200000 	.word	0x41200000
 8000d58:	360637bd 	.word	0x360637bd

08000d5c <ULTRASONIC_voidInit>:
#include "../Src/RCC_interface.h"
#include "../Src/RCC_private.h"

void ULTRASONIC_voidInit()
{
    RCC_voidEnablePeripheralClock(APB1_BUS, TIM3_RCC);
 8000d5c:	2101      	movs	r1, #1
{
 8000d5e:	b508      	push	{r3, lr}
    RCC_voidEnablePeripheralClock(APB1_BUS, TIM3_RCC);
 8000d60:	4608      	mov	r0, r1
 8000d62:	f7ff fdeb 	bl	800093c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, ULTRASONIC_PORT_RCC);
 8000d66:	2102      	movs	r1, #2
 8000d68:	4608      	mov	r0, r1
 8000d6a:	f7ff fde7 	bl	800093c <RCC_voidEnablePeripheralClock>
    TIM3_voidInit();
 8000d6e:	f7ff ff43 	bl	8000bf8 <TIM3_voidInit>
    MDIO_voidSetPinDirection(ULTRASONIC_PORT, ULTRASONIC_TRIG, OUTPUT_SPEED_2MHZ_PP);
 8000d72:	2202      	movs	r2, #2
 8000d74:	2104      	movs	r1, #4
 8000d76:	2001      	movs	r0, #1
 8000d78:	f7ff fd28 	bl	80007cc <MDIO_voidSetPinDirection>
    MDIO_voidSetPinDirection(ULTRASONIC_PORT, ULTRASONIC_ECHO, INPUT_PULLUP_PULLDOWN);
 8000d7c:	2208      	movs	r2, #8
 8000d7e:	2105      	movs	r1, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff fd23 	bl	80007cc <MDIO_voidSetPinDirection>
    MDIO_voidSetPinValue(ULTRASONIC_PORT, ULTRASONIC_ECHO, DIO_LOW);
}
 8000d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MDIO_voidSetPinValue(ULTRASONIC_PORT, ULTRASONIC_ECHO, DIO_LOW);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2105      	movs	r1, #5
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f7ff bd78 	b.w	8000884 <MDIO_voidSetPinValue>

08000d94 <ULTRASONIC_f32GetDistance>:

f32 ULTRASONIC_f32GetDistance()
{
    MDIO_voidSetPinValue(ULTRASONIC_PORT, ULTRASONIC_TRIG, DIO_HIGH);
 8000d94:	2201      	movs	r2, #1
 8000d96:	2104      	movs	r1, #4
 8000d98:	4610      	mov	r0, r2
{
 8000d9a:	b510      	push	{r4, lr}
    MDIO_voidSetPinValue(ULTRASONIC_PORT, ULTRASONIC_TRIG, DIO_HIGH);
 8000d9c:	f7ff fd72 	bl	8000884 <MDIO_voidSetPinValue>
    TIM3_voidDelay(0.000015f);
 8000da0:	4815      	ldr	r0, [pc, #84]	; (8000df8 <ULTRASONIC_f32GetDistance+0x64>)
 8000da2:	f7ff ff69 	bl	8000c78 <TIM3_voidDelay>
    MDIO_voidSetPinValue(ULTRASONIC_PORT, ULTRASONIC_TRIG, DIO_LOW);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2104      	movs	r1, #4
 8000daa:	2001      	movs	r0, #1
 8000dac:	f7ff fd6a 	bl	8000884 <MDIO_voidSetPinValue>
    while (!MDIO_u8GetPinValue(ULTRASONIC_PORT, ULTRASONIC_ECHO))
 8000db0:	2105      	movs	r1, #5
 8000db2:	2001      	movs	r0, #1
 8000db4:	f7ff fd9a 	bl	80008ec <MDIO_u8GetPinValue>
 8000db8:	2800      	cmp	r0, #0
 8000dba:	d0f9      	beq.n	8000db0 <ULTRASONIC_f32GetDistance+0x1c>
        ;
    TIM3_voidSetTimerValue(0);
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f7ff ff4f 	bl	8000c60 <TIM3_voidSetTimerValue>
    TIM3_voidStart();
    while (MDIO_u8GetPinValue(ULTRASONIC_PORT, ULTRASONIC_ECHO))
        if (TIM3_u16GetTimerValue() > 11764)
 8000dc2:	f642 54f4 	movw	r4, #11764	; 0x2df4
    TIM3_voidStart();
 8000dc6:	f7ff ff3f 	bl	8000c48 <TIM3_voidStart>
    while (MDIO_u8GetPinValue(ULTRASONIC_PORT, ULTRASONIC_ECHO))
 8000dca:	2105      	movs	r1, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f7ff fd8d 	bl	80008ec <MDIO_u8GetPinValue>
 8000dd2:	b118      	cbz	r0, 8000ddc <ULTRASONIC_f32GetDistance+0x48>
        if (TIM3_u16GetTimerValue() > 11764)
 8000dd4:	f7ff ff49 	bl	8000c6a <TIM3_u16GetTimerValue>
 8000dd8:	42a0      	cmp	r0, r4
 8000dda:	d9f6      	bls.n	8000dca <ULTRASONIC_f32GetDistance+0x36>
            break;
    TIM3_voidStop();
 8000ddc:	f7ff ff3a 	bl	8000c54 <TIM3_voidStop>
    return 340.0f * TIM3_u16GetTimerValue() * 0.000001f;
 8000de0:	f7ff ff43 	bl	8000c6a <TIM3_u16GetTimerValue>
 8000de4:	f7ff fa6e 	bl	80002c4 <__aeabi_i2f>
 8000de8:	4904      	ldr	r1, [pc, #16]	; (8000dfc <ULTRASONIC_f32GetDistance+0x68>)
 8000dea:	f7ff fabf 	bl	800036c <__aeabi_fmul>
 8000dee:	4904      	ldr	r1, [pc, #16]	; (8000e00 <ULTRASONIC_f32GetDistance+0x6c>)
 8000df0:	f7ff fabc 	bl	800036c <__aeabi_fmul>
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	bf00      	nop
 8000df8:	377ba882 	.word	0x377ba882
 8000dfc:	43aa0000 	.word	0x43aa0000
 8000e00:	358637bd 	.word	0x358637bd

08000e04 <USART_voidInit>:
#include "USART_private.h"
#include "../Common/bit_math.h"

void USART_voidInit()
{
    USART_CR1 = USART_CR1_MASK;
 8000e04:	f242 4220 	movw	r2, #9248	; 0x2420
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <USART_voidInit+0x20>)
 8000e0a:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    USART_BRR = USART_BAUD_9600_MASK;
 8000e0e:	f640 62a6 	movw	r2, #3750	; 0xea6
 8000e12:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
    USART_RX_ENABLE();
 8000e16:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8000e1a:	f042 0204 	orr.w	r2, r2, #4
 8000e1e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
}
 8000e22:	4770      	bx	lr
 8000e24:	40013000 	.word	0x40013000

08000e28 <USART_u8ReceiveData>:

u8 USART_u8ReceiveData()
{
    if (GET_BIT(USART_SR, RXNE_BIT))
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <USART_u8ReceiveData+0x14>)
 8000e2a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8000e2e:	0692      	lsls	r2, r2, #26
        return USART_DR & 0xFF;
 8000e30:	bf46      	itte	mi
 8000e32:	f8d3 0804 	ldrmi.w	r0, [r3, #2052]	; 0x804
 8000e36:	b2c0      	uxtbmi	r0, r0
    else
        return EMPTY_DATA;
 8000e38:	20ff      	movpl	r0, #255	; 0xff
 8000e3a:	4770      	bx	lr
 8000e3c:	40013000 	.word	0x40013000

08000e40 <appInit>:
static f32 distance = 4.0f;
static s8 speed = INITIAL_SPEED;
static volatile u8 data = EMPTY_DATA;

void appInit()
{
 8000e40:	b508      	push	{r3, lr}
    RCC_voidInitSysClock();
 8000e42:	f7ff fd6b 	bl	800091c <RCC_voidInitSysClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, DIOA_RCC);
 8000e46:	2102      	movs	r1, #2
 8000e48:	4608      	mov	r0, r1
 8000e4a:	f7ff fd77 	bl	800093c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, DIOB_RCC);
 8000e4e:	2103      	movs	r1, #3
 8000e50:	2002      	movs	r0, #2
 8000e52:	f7ff fd73 	bl	800093c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, USART1_RCC);
 8000e56:	210e      	movs	r1, #14
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fd6f 	bl	800093c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB2_BUS, TIM1_RCC);
 8000e5e:	210b      	movs	r1, #11
 8000e60:	2002      	movs	r0, #2
 8000e62:	f7ff fd6b 	bl	800093c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB1_BUS, TIM2_RCC);
 8000e66:	2100      	movs	r1, #0
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff fd67 	bl	800093c <RCC_voidEnablePeripheralClock>
    RCC_voidEnablePeripheralClock(APB1_BUS, TIM3_RCC);
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4608      	mov	r0, r1
 8000e72:	f7ff fd63 	bl	800093c <RCC_voidEnablePeripheralClock>

    MDIO_voidSetPinDirection(DIOA, PIN10, INPUT_FLOATING);
 8000e76:	2204      	movs	r2, #4
 8000e78:	210a      	movs	r1, #10
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	f7ff fca6 	bl	80007cc <MDIO_voidSetPinDirection>

    USART_voidInit();
 8000e80:	f7ff ffc0 	bl	8000e04 <USART_voidInit>
    DC_voidInit();
 8000e84:	f7ff fc58 	bl	8000738 <DC_voidInit>
    SERVO_voidInit();
 8000e88:	f7ff fd76 	bl	8000978 <SERVO_voidInit>
    ULTRASONIC_voidInit();
 8000e8c:	f7ff ff66 	bl	8000d5c <ULTRASONIC_voidInit>

    SERVO_voidSetAngle(SERVO_STEERING, INITIAL_ANGLE);
 8000e90:	2001      	movs	r0, #1
 8000e92:	215a      	movs	r1, #90	; 0x5a
 8000e94:	f7ff fd92 	bl	80009bc <SERVO_voidSetAngle>
    TIM3_voidDelay(5.0f);
}
 8000e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TIM3_voidDelay(5.0f);
 8000e9c:	4801      	ldr	r0, [pc, #4]	; (8000ea4 <appInit+0x64>)
 8000e9e:	f7ff beeb 	b.w	8000c78 <TIM3_voidDelay>
 8000ea2:	bf00      	nop
 8000ea4:	40a00000 	.word	0x40a00000

08000ea8 <applyDriverProfile>:

void applyDriverProfile()
{
 8000ea8:	b508      	push	{r3, lr}
    u8 driver;
    do
    {
        driver = USART_u8ReceiveData();
 8000eaa:	f7ff ffbd 	bl	8000e28 <USART_u8ReceiveData>
    } while (driver == EMPTY_DATA);
 8000eae:	28ff      	cmp	r0, #255	; 0xff
 8000eb0:	d0fb      	beq.n	8000eaa <applyDriverProfile+0x2>
    if (driver == DRIVER_1)
 8000eb2:	28bf      	cmp	r0, #191	; 0xbf
 8000eb4:	d10f      	bne.n	8000ed6 <applyDriverProfile+0x2e>
    {
        SERVO_voidSetAngle(SERVO_RIGHT_MIRROR, 20);
 8000eb6:	2114      	movs	r1, #20
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f7ff fd7f 	bl	80009bc <SERVO_voidSetAngle>
        SERVO_voidSetAngle(SERVO_LEFT_MIRROR, 20);
 8000ebe:	2114      	movs	r1, #20
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f7ff fd7b 	bl	80009bc <SERVO_voidSetAngle>
        SERVO_voidSetAngle(SERVO_CHAIR, 20);
 8000ec6:	2114      	movs	r1, #20
    }
    else
    {
        SERVO_voidSetAngle(SERVO_RIGHT_MIRROR, 60);
        SERVO_voidSetAngle(SERVO_LEFT_MIRROR, 60);
        SERVO_voidSetAngle(SERVO_CHAIR, 60);
 8000ec8:	2004      	movs	r0, #4
 8000eca:	f7ff fd77 	bl	80009bc <SERVO_voidSetAngle>
    }
    TIM2_voidStart();
}
 8000ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TIM2_voidStart();
 8000ed2:	f7ff be4d 	b.w	8000b70 <TIM2_voidStart>
    else if (driver == DRIVER_2)
 8000ed6:	28c0      	cmp	r0, #192	; 0xc0
 8000ed8:	d109      	bne.n	8000eee <applyDriverProfile+0x46>
        SERVO_voidSetAngle(SERVO_RIGHT_MIRROR, 40);
 8000eda:	2128      	movs	r1, #40	; 0x28
 8000edc:	2002      	movs	r0, #2
 8000ede:	f7ff fd6d 	bl	80009bc <SERVO_voidSetAngle>
        SERVO_voidSetAngle(SERVO_LEFT_MIRROR, 40);
 8000ee2:	2128      	movs	r1, #40	; 0x28
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f7ff fd69 	bl	80009bc <SERVO_voidSetAngle>
        SERVO_voidSetAngle(SERVO_CHAIR, 40);
 8000eea:	2128      	movs	r1, #40	; 0x28
 8000eec:	e7ec      	b.n	8000ec8 <applyDriverProfile+0x20>
        SERVO_voidSetAngle(SERVO_RIGHT_MIRROR, 60);
 8000eee:	213c      	movs	r1, #60	; 0x3c
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f7ff fd63 	bl	80009bc <SERVO_voidSetAngle>
        SERVO_voidSetAngle(SERVO_LEFT_MIRROR, 60);
 8000ef6:	213c      	movs	r1, #60	; 0x3c
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f7ff fd5f 	bl	80009bc <SERVO_voidSetAngle>
        SERVO_voidSetAngle(SERVO_CHAIR, 60);
 8000efe:	213c      	movs	r1, #60	; 0x3c
 8000f00:	e7e2      	b.n	8000ec8 <applyDriverProfile+0x20>
	...

08000f04 <getDistance>:

void getDistance()
{
 8000f04:	b513      	push	{r0, r1, r4, lr}
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 200;
    xLastWakeTime = xTaskGetTickCount();
 8000f06:	f000 fef1 	bl	8001cec <xTaskGetTickCount>
    while (1)
    {
        distance = ULTRASONIC_f32GetDistance();
 8000f0a:	4c05      	ldr	r4, [pc, #20]	; (8000f20 <getDistance+0x1c>)
    xLastWakeTime = xTaskGetTickCount();
 8000f0c:	9001      	str	r0, [sp, #4]
        distance = ULTRASONIC_f32GetDistance();
 8000f0e:	f7ff ff41 	bl	8000d94 <ULTRASONIC_f32GetDistance>
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000f12:	21c8      	movs	r1, #200	; 0xc8
        distance = ULTRASONIC_f32GetDistance();
 8000f14:	6020      	str	r0, [r4, #0]
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000f16:	a801      	add	r0, sp, #4
 8000f18:	f000 fff6 	bl	8001f08 <vTaskDelayUntil>
    while (1)
 8000f1c:	e7f7      	b.n	8000f0e <getDistance+0xa>
 8000f1e:	bf00      	nop
 8000f20:	20000004 	.word	0x20000004

08000f24 <updateSpeedAndDirection>:
    }
}

void updateSpeedAndDirection()
{
 8000f24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 100;
    xLastWakeTime = xTaskGetTickCount();
 8000f28:	f000 fee0 	bl	8001cec <xTaskGetTickCount>
    while (1)
    {
        // processing distance and changing speed
        if (distance <= ACC_THRESHOLD)
 8000f2c:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
            speed -= 10;
        else if (distance <= AEB_THRESHOLD)
 8000f30:	f04f 567c 	mov.w	r6, #1056964608	; 0x3f000000
        if (distance <= ACC_THRESHOLD)
 8000f34:	4c18      	ldr	r4, [pc, #96]	; (8000f98 <updateSpeedAndDirection+0x74>)
    xLastWakeTime = xTaskGetTickCount();
 8000f36:	9001      	str	r0, [sp, #4]
        if (distance <= ACC_THRESHOLD)
 8000f38:	f8d4 9000 	ldr.w	r9, [r4]
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	4648      	mov	r0, r9
 8000f40:	f7ff fbbc 	bl	80006bc <__aeabi_fcmple>
 8000f44:	4f15      	ldr	r7, [pc, #84]	; (8000f9c <updateSpeedAndDirection+0x78>)
 8000f46:	4680      	mov	r8, r0
 8000f48:	b188      	cbz	r0, 8000f6e <updateSpeedAndDirection+0x4a>
            speed -= 10;
 8000f4a:	783b      	ldrb	r3, [r7, #0]
 8000f4c:	3b0a      	subs	r3, #10
            speed = 0;
        else
            speed += 5;
 8000f4e:	b25b      	sxtb	r3, r3

        // keeping speed in the range [0, MAX_SPEED]
        if (speed > MAX_SPEED)
 8000f50:	2b3c      	cmp	r3, #60	; 0x3c
            speed -= 10;
 8000f52:	703b      	strb	r3, [r7, #0]
        if (speed > MAX_SPEED)
 8000f54:	dd18      	ble.n	8000f88 <updateSpeedAndDirection+0x64>
            speed = MAX_SPEED;
 8000f56:	233c      	movs	r3, #60	; 0x3c
 8000f58:	703b      	strb	r3, [r7, #0]
            speed = 0;

        // applying speed changes
        if (speed)
        {
            DC_voidStart();
 8000f5a:	f7ff fc1d 	bl	8000798 <DC_voidStart>
            DC_voidSetSpeed(speed);
 8000f5e:	7838      	ldrb	r0, [r7, #0]
 8000f60:	f7ff fc0a 	bl	8000778 <DC_voidSetSpeed>
        else
            DC_voidStop();

        // direction controls to be added

        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000f64:	2164      	movs	r1, #100	; 0x64
 8000f66:	a801      	add	r0, sp, #4
 8000f68:	f000 ffce 	bl	8001f08 <vTaskDelayUntil>
        if (distance <= ACC_THRESHOLD)
 8000f6c:	e7e4      	b.n	8000f38 <updateSpeedAndDirection+0x14>
        else if (distance <= AEB_THRESHOLD)
 8000f6e:	4631      	mov	r1, r6
 8000f70:	4648      	mov	r0, r9
 8000f72:	f7ff fba3 	bl	80006bc <__aeabi_fcmple>
 8000f76:	b120      	cbz	r0, 8000f82 <updateSpeedAndDirection+0x5e>
            speed -= 10;
 8000f78:	f887 8000 	strb.w	r8, [r7]
            DC_voidStop();
 8000f7c:	f7ff fc19 	bl	80007b2 <DC_voidStop>
 8000f80:	e7f0      	b.n	8000f64 <updateSpeedAndDirection+0x40>
            speed += 5;
 8000f82:	783b      	ldrb	r3, [r7, #0]
 8000f84:	3305      	adds	r3, #5
 8000f86:	e7e2      	b.n	8000f4e <updateSpeedAndDirection+0x2a>
        else if (speed < 0)
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	da02      	bge.n	8000f92 <updateSpeedAndDirection+0x6e>
            speed = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	703b      	strb	r3, [r7, #0]
        if (speed)
 8000f90:	e7f4      	b.n	8000f7c <updateSpeedAndDirection+0x58>
 8000f92:	d1e2      	bne.n	8000f5a <updateSpeedAndDirection+0x36>
 8000f94:	e7f2      	b.n	8000f7c <updateSpeedAndDirection+0x58>
 8000f96:	bf00      	nop
 8000f98:	20000004 	.word	0x20000004
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <receiveUartFrame>:
    }
}

void receiveUartFrame()
{
 8000fa0:	b513      	push	{r0, r1, r4, lr}
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 100;
    xLastWakeTime = xTaskGetTickCount();
 8000fa2:	f000 fea3 	bl	8001cec <xTaskGetTickCount>
    while (1)
    {
        data = USART_u8ReceiveData();
 8000fa6:	4c0a      	ldr	r4, [pc, #40]	; (8000fd0 <receiveUartFrame+0x30>)
    xLastWakeTime = xTaskGetTickCount();
 8000fa8:	9001      	str	r0, [sp, #4]
        data = USART_u8ReceiveData();
 8000faa:	f7ff ff3d 	bl	8000e28 <USART_u8ReceiveData>
 8000fae:	7020      	strb	r0, [r4, #0]
        if (data != EMPTY_DATA)
 8000fb0:	7823      	ldrb	r3, [r4, #0]
 8000fb2:	2bff      	cmp	r3, #255	; 0xff
 8000fb4:	d006      	beq.n	8000fc4 <receiveUartFrame+0x24>
        {
            if (data == DRIVER_ASLEEP)
 8000fb6:	7823      	ldrb	r3, [r4, #0]
 8000fb8:	2bc8      	cmp	r3, #200	; 0xc8
 8000fba:	d103      	bne.n	8000fc4 <receiveUartFrame+0x24>
            {
                DC_voidStop();
 8000fbc:	f7ff fbf9 	bl	80007b2 <DC_voidStop>
                vTaskEndScheduler();
 8000fc0:	f000 fe7c 	bl	8001cbc <vTaskEndScheduler>
            }
        }

        // direction controls to be received

        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000fc4:	2164      	movs	r1, #100	; 0x64
 8000fc6:	a801      	add	r0, sp, #4
 8000fc8:	f000 ff9e 	bl	8001f08 <vTaskDelayUntil>
        data = USART_u8ReceiveData();
 8000fcc:	e7ed      	b.n	8000faa <receiveUartFrame+0xa>
 8000fce:	bf00      	nop
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <main>:
#include "../../Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
#include "../../Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
#include "DC_interface.h"

int main()
{
 8000fd4:	b507      	push	{r0, r1, r2, lr}
    appInit();
 8000fd6:	f7ff ff33 	bl	8000e40 <appInit>
    applyDriverProfile();
 8000fda:	f7ff ff65 	bl	8000ea8 <applyDriverProfile>
    DC_voidSetSpeed(INITIAL_SPEED);
 8000fde:	201e      	movs	r0, #30
    DC_voidStart();

    xTaskCreate(getDistance, "Measuring Distance", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 8000fe0:	2400      	movs	r4, #0
    DC_voidSetSpeed(INITIAL_SPEED);
 8000fe2:	f7ff fbc9 	bl	8000778 <DC_voidSetSpeed>
    DC_voidStart();
 8000fe6:	f7ff fbd7 	bl	8000798 <DC_voidStart>
    xTaskCreate(getDistance, "Measuring Distance", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
 8000fea:	2303      	movs	r3, #3
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	e9cd 3400 	strd	r3, r4, [sp]
 8000ff2:	490d      	ldr	r1, [pc, #52]	; (8001028 <main+0x54>)
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <main+0x58>)
 8000ff8:	f000 fd4c 	bl	8001a94 <xTaskCreate>
    xTaskCreate(updateSpeedAndDirection, "Managing AEB and ACC", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	490b      	ldr	r1, [pc, #44]	; (8001030 <main+0x5c>)
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	480b      	ldr	r0, [pc, #44]	; (8001034 <main+0x60>)
 8001006:	4623      	mov	r3, r4
 8001008:	9401      	str	r4, [sp, #4]
 800100a:	f000 fd43 	bl	8001a94 <xTaskCreate>
    xTaskCreate(receiveUartFrame, "Receiving Frames from ESP32", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 800100e:	2301      	movs	r3, #1
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	4909      	ldr	r1, [pc, #36]	; (8001038 <main+0x64>)
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	4809      	ldr	r0, [pc, #36]	; (800103c <main+0x68>)
 8001018:	4623      	mov	r3, r4
 800101a:	9401      	str	r4, [sp, #4]
 800101c:	f000 fd3a 	bl	8001a94 <xTaskCreate>

    vTaskStartScheduler();
 8001020:	f000 fe08 	bl	8001c34 <vTaskStartScheduler>
    while (1)
 8001024:	e7fe      	b.n	8001024 <main+0x50>
 8001026:	bf00      	nop
 8001028:	080024ec 	.word	0x080024ec
 800102c:	08000f05 	.word	0x08000f05
 8001030:	080024ff 	.word	0x080024ff
 8001034:	08000f25 	.word	0x08000f25
 8001038:	08002514 	.word	0x08002514
 800103c:	08000fa1 	.word	0x08000fa1

08001040 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001040:	6803      	ldr	r3, [r0, #0]
 8001042:	4a16      	ldr	r2, [pc, #88]	; (800109c <HAL_TIM_Base_MspInit+0x5c>)
{
 8001044:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8001046:	4293      	cmp	r3, r2
 8001048:	d10b      	bne.n	8001062 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_TIM_Base_MspInit+0x60>)
 800104c:	699a      	ldr	r2, [r3, #24]
 800104e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001052:	619a      	str	r2, [r3, #24]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800105e:	b004      	add	sp, #16
 8001060:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 8001062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001066:	d10b      	bne.n	8001080 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001068:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800106c:	69da      	ldr	r2, [r3, #28]
 800106e:	f042 0201 	orr.w	r2, r2, #1
 8001072:	61da      	str	r2, [r3, #28]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	9b02      	ldr	r3, [sp, #8]
 800107e:	e7ee      	b.n	800105e <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 8001080:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_TIM_Base_MspInit+0x64>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d1eb      	bne.n	800105e <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_TIM_Base_MspInit+0x60>)
 8001088:	69da      	ldr	r2, [r3, #28]
 800108a:	f042 0202 	orr.w	r2, r2, #2
 800108e:	61da      	str	r2, [r3, #28]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	9303      	str	r3, [sp, #12]
 8001098:	9b03      	ldr	r3, [sp, #12]
}
 800109a:	e7e0      	b.n	800105e <HAL_TIM_Base_MspInit+0x1e>
 800109c:	40012c00 	.word	0x40012c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40000400 	.word	0x40000400

080010a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a8:	b510      	push	{r4, lr}
 80010aa:	4604      	mov	r4, r0
 80010ac:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	2210      	movs	r2, #16
 80010b0:	2100      	movs	r1, #0
 80010b2:	a802      	add	r0, sp, #8
 80010b4:	f001 f9e2 	bl	800247c <memset>
  if(htim->Instance==TIM1)
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	4a14      	ldr	r2, [pc, #80]	; (800110c <HAL_TIM_MspPostInit+0x64>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d115      	bne.n	80010ec <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_TIM_MspPostInit+0x68>)
 80010c2:	699a      	ldr	r2, [r3, #24]
 80010c4:	f042 0204 	orr.w	r2, r2, #4
 80010c8:	619a      	str	r2, [r3, #24]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	9b00      	ldr	r3, [sp, #0]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010d4:	f44f 7380 	mov.w	r3, #256	; 0x100
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80010d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <HAL_TIM_MspPostInit+0x6c>)
 80010de:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f000 f858 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010e8:	b006      	add	sp, #24
 80010ea:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM2)
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d1fa      	bne.n	80010e8 <HAL_TIM_MspPostInit+0x40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80010f6:	699a      	ldr	r2, [r3, #24]
 80010f8:	f042 0204 	orr.w	r2, r2, #4
 80010fc:	619a      	str	r2, [r3, #24]
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	9301      	str	r3, [sp, #4]
 8001106:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001108:	230f      	movs	r3, #15
 800110a:	e7e5      	b.n	80010d8 <HAL_TIM_MspPostInit+0x30>
 800110c:	40012c00 	.word	0x40012c00
 8001110:	40021000 	.word	0x40021000
 8001114:	40010800 	.word	0x40010800

08001118 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler>

0800111a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler>

0800111c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler>

0800111e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler>

08001120 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler>

08001122 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	4770      	bx	lr

08001124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001124:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 f82b 	bl	8001180 <HAL_IncTick>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 800112e:	f001 b831 	b.w	8002194 <xPortSysTickHandler>

08001132 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001132:	4770      	bx	lr

08001134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001134:	f7ff fffd 	bl	8001132 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480b      	ldr	r0, [pc, #44]	; (8001168 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800113a:	490c      	ldr	r1, [pc, #48]	; (800116c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800113c:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <LoopFillZerobss+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a09      	ldr	r2, [pc, #36]	; (8001174 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001150:	4c09      	ldr	r4, [pc, #36]	; (8001178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115e:	f001 f995 	bl	800248c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001162:	f7ff ff37 	bl	8000fd4 <main>
  bx lr
 8001166:	4770      	bx	lr
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001170:	08002540 	.word	0x08002540
  ldr r2, =_sbss
 8001174:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001178:	20001040 	.word	0x20001040

0800117c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC1_2_IRQHandler>
	...

08001180 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001180:	4a03      	ldr	r2, [pc, #12]	; (8001190 <HAL_IncTick+0x10>)
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_IncTick+0x14>)
 8001184:	6811      	ldr	r1, [r2, #0]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	440b      	add	r3, r1
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200001e4 	.word	0x200001e4
 8001194:	20000010 	.word	0x20000010

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800119c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800119e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011a0:	4f61      	ldr	r7, [pc, #388]	; (8001328 <HAL_GPIO_Init+0x190>)
 80011a2:	4b62      	ldr	r3, [pc, #392]	; (800132c <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 80011a4:	f8df c188 	ldr.w	ip, [pc, #392]	; 8001330 <HAL_GPIO_Init+0x198>
 80011a8:	f8df e188 	ldr.w	lr, [pc, #392]	; 8001334 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ac:	680d      	ldr	r5, [r1, #0]
 80011ae:	fa35 f406 	lsrs.w	r4, r5, r6
 80011b2:	d102      	bne.n	80011ba <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80011b4:	b003      	add	sp, #12
 80011b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80011ba:	f04f 0801 	mov.w	r8, #1
 80011be:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011c2:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80011c6:	ea38 0505 	bics.w	r5, r8, r5
 80011ca:	d176      	bne.n	80012ba <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 80011cc:	684d      	ldr	r5, [r1, #4]
 80011ce:	2d03      	cmp	r5, #3
 80011d0:	d807      	bhi.n	80011e2 <HAL_GPIO_Init+0x4a>
 80011d2:	3d01      	subs	r5, #1
 80011d4:	2d02      	cmp	r5, #2
 80011d6:	f200 8081 	bhi.w	80012dc <HAL_GPIO_Init+0x144>
 80011da:	e8df f005 	tbb	[pc, r5]
 80011de:	9691      	.short	0x9691
 80011e0:	9c          	.byte	0x9c
 80011e1:	00          	.byte	0x00
 80011e2:	2d12      	cmp	r5, #18
 80011e4:	f000 8094 	beq.w	8001310 <HAL_GPIO_Init+0x178>
 80011e8:	d869      	bhi.n	80012be <HAL_GPIO_Init+0x126>
 80011ea:	2d11      	cmp	r5, #17
 80011ec:	f000 808a 	beq.w	8001304 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011f0:	2cff      	cmp	r4, #255	; 0xff
 80011f2:	bf98      	it	ls
 80011f4:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f6:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011fa:	bf88      	it	hi
 80011fc:	f100 0a04 	addhi.w	sl, r0, #4
 8001200:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001204:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001208:	bf88      	it	hi
 800120a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800120c:	fa09 fb05 	lsl.w	fp, r9, r5
 8001210:	ea28 080b 	bic.w	r8, r8, fp
 8001214:	fa02 f505 	lsl.w	r5, r2, r5
 8001218:	ea48 0505 	orr.w	r5, r8, r5
 800121c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001220:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001224:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001228:	d047      	beq.n	80012ba <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800122a:	69bd      	ldr	r5, [r7, #24]
 800122c:	f026 0803 	bic.w	r8, r6, #3
 8001230:	f045 0501 	orr.w	r5, r5, #1
 8001234:	61bd      	str	r5, [r7, #24]
 8001236:	69bd      	ldr	r5, [r7, #24]
 8001238:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800123c:	f005 0501 	and.w	r5, r5, #1
 8001240:	9501      	str	r5, [sp, #4]
 8001242:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001246:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800124a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800124c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001250:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001254:	fa09 f90b 	lsl.w	r9, r9, fp
 8001258:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800125c:	4d36      	ldr	r5, [pc, #216]	; (8001338 <HAL_GPIO_Init+0x1a0>)
 800125e:	42a8      	cmp	r0, r5
 8001260:	d05d      	beq.n	800131e <HAL_GPIO_Init+0x186>
 8001262:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001266:	42a8      	cmp	r0, r5
 8001268:	d05b      	beq.n	8001322 <HAL_GPIO_Init+0x18a>
 800126a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800126e:	42a8      	cmp	r0, r5
 8001270:	bf0c      	ite	eq
 8001272:	2502      	moveq	r5, #2
 8001274:	2503      	movne	r5, #3
 8001276:	fa05 f50b 	lsl.w	r5, r5, fp
 800127a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 800127e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001282:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001284:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001288:	bf14      	ite	ne
 800128a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800128c:	43a5      	biceq	r5, r4
 800128e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001290:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001292:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001296:	bf14      	ite	ne
 8001298:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800129a:	43a5      	biceq	r5, r4
 800129c:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800129e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a0:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80012a4:	bf14      	ite	ne
 80012a6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012a8:	43a5      	biceq	r5, r4
 80012aa:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80012ac:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ae:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80012b2:	bf14      	ite	ne
 80012b4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012b6:	43a5      	biceq	r5, r4
 80012b8:	601d      	str	r5, [r3, #0]
	position++;
 80012ba:	3601      	adds	r6, #1
 80012bc:	e776      	b.n	80011ac <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80012be:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800133c <HAL_GPIO_Init+0x1a4>
 80012c2:	454d      	cmp	r5, r9
 80012c4:	d00a      	beq.n	80012dc <HAL_GPIO_Init+0x144>
 80012c6:	d815      	bhi.n	80012f4 <HAL_GPIO_Init+0x15c>
 80012c8:	4575      	cmp	r5, lr
 80012ca:	d007      	beq.n	80012dc <HAL_GPIO_Init+0x144>
 80012cc:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 80012d0:	454d      	cmp	r5, r9
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x144>
 80012d4:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80012d8:	454d      	cmp	r5, r9
 80012da:	d189      	bne.n	80011f0 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012dc:	688a      	ldr	r2, [r1, #8]
 80012de:	b1e2      	cbz	r2, 800131a <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e0:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80012e2:	bf08      	it	eq
 80012e4:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012e8:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80012ec:	bf18      	it	ne
 80012ee:	f8c0 8014 	strne.w	r8, [r0, #20]
 80012f2:	e77d      	b.n	80011f0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80012f4:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001340 <HAL_GPIO_Init+0x1a8>
 80012f8:	454d      	cmp	r5, r9
 80012fa:	d0ef      	beq.n	80012dc <HAL_GPIO_Init+0x144>
 80012fc:	4565      	cmp	r5, ip
 80012fe:	e7ec      	b.n	80012da <HAL_GPIO_Init+0x142>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001300:	68ca      	ldr	r2, [r1, #12]
          break;
 8001302:	e775      	b.n	80011f0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001304:	68ca      	ldr	r2, [r1, #12]
 8001306:	3204      	adds	r2, #4
          break;
 8001308:	e772      	b.n	80011f0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800130a:	68ca      	ldr	r2, [r1, #12]
 800130c:	3208      	adds	r2, #8
          break;
 800130e:	e76f      	b.n	80011f0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001310:	68ca      	ldr	r2, [r1, #12]
 8001312:	320c      	adds	r2, #12
          break;
 8001314:	e76c      	b.n	80011f0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8001316:	2200      	movs	r2, #0
 8001318:	e76a      	b.n	80011f0 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800131a:	2204      	movs	r2, #4
 800131c:	e768      	b.n	80011f0 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800131e:	2500      	movs	r5, #0
 8001320:	e7a9      	b.n	8001276 <HAL_GPIO_Init+0xde>
 8001322:	2501      	movs	r5, #1
 8001324:	e7a7      	b.n	8001276 <HAL_GPIO_Init+0xde>
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	40010400 	.word	0x40010400
 8001330:	10320000 	.word	0x10320000
 8001334:	10120000 	.word	0x10120000
 8001338:	40010800 	.word	0x40010800
 800133c:	10220000 	.word	0x10220000
 8001340:	10310000 	.word	0x10310000

08001344 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001344:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001346:	6a02      	ldr	r2, [r0, #32]
{
 8001348:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001350:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001352:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001354:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001356:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800135a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800135c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800135e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001362:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001364:	4d0a      	ldr	r5, [pc, #40]	; (8001390 <TIM_OC1_SetConfig+0x4c>)
 8001366:	42a8      	cmp	r0, r5
 8001368:	d10b      	bne.n	8001382 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800136a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800136c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001370:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001372:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001376:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800137a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800137c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001380:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001382:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001384:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001386:	684a      	ldr	r2, [r1, #4]
 8001388:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800138a:	6203      	str	r3, [r0, #32]
}
 800138c:	bd70      	pop	{r4, r5, r6, pc}
 800138e:	bf00      	nop
 8001390:	40012c00 	.word	0x40012c00

08001394 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001394:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001396:	6a02      	ldr	r2, [r0, #32]
{
 8001398:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800139a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800139e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013a2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80013a6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80013aa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013ac:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80013ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80013b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80013b6:	4d0b      	ldr	r5, [pc, #44]	; (80013e4 <TIM_OC3_SetConfig+0x50>)
 80013b8:	42a8      	cmp	r0, r5
 80013ba:	d10d      	bne.n	80013d8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013bc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80013be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80013c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80013c6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013ca:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80013ce:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80013d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80013d4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80013da:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80013dc:	684a      	ldr	r2, [r1, #4]
 80013de:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013e0:	6203      	str	r3, [r0, #32]
}
 80013e2:	bd70      	pop	{r4, r5, r6, pc}
 80013e4:	40012c00 	.word	0x40012c00

080013e8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013e8:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80013ea:	6a02      	ldr	r2, [r0, #32]
{
 80013ec:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80013ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013f2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013f6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80013fa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80013fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001402:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001408:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800140c:	4d06      	ldr	r5, [pc, #24]	; (8001428 <TIM_OC4_SetConfig+0x40>)
 800140e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001410:	bf02      	ittt	eq
 8001412:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001414:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001418:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800141c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800141e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001420:	684a      	ldr	r2, [r1, #4]
 8001422:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001424:	6203      	str	r3, [r0, #32]
}
 8001426:	bd30      	pop	{r4, r5, pc}
 8001428:	40012c00 	.word	0x40012c00

0800142c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800142c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001430:	2b01      	cmp	r3, #1
 8001432:	d118      	bne.n	8001466 <HAL_TIM_Base_Start+0x3a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001434:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001436:	4a0d      	ldr	r2, [pc, #52]	; (800146c <HAL_TIM_Base_Start+0x40>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001438:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800143c:	6803      	ldr	r3, [r0, #0]
 800143e:	4293      	cmp	r3, r2
 8001440:	d006      	beq.n	8001450 <HAL_TIM_Base_Start+0x24>
 8001442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001446:	d003      	beq.n	8001450 <HAL_TIM_Base_Start+0x24>
 8001448:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800144c:	4293      	cmp	r3, r2
 800144e:	d104      	bne.n	800145a <HAL_TIM_Base_Start+0x2e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001456:	2a06      	cmp	r2, #6
 8001458:	d003      	beq.n	8001462 <HAL_TIM_Base_Start+0x36>
    __HAL_TIM_ENABLE(htim);
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	f042 0201 	orr.w	r2, r2, #1
 8001460:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001462:	2000      	movs	r0, #0
}
 8001464:	4770      	bx	lr
    return HAL_ERROR;
 8001466:	2001      	movs	r0, #1
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40012c00 	.word	0x40012c00

08001470 <HAL_TIM_Base_Stop>:
  __HAL_TIM_DISABLE(htim);
 8001470:	f241 1211 	movw	r2, #4369	; 0x1111
 8001474:	6803      	ldr	r3, [r0, #0]
 8001476:	6a19      	ldr	r1, [r3, #32]
 8001478:	4211      	tst	r1, r2
 800147a:	d108      	bne.n	800148e <HAL_TIM_Base_Stop+0x1e>
 800147c:	f240 4244 	movw	r2, #1092	; 0x444
 8001480:	6a19      	ldr	r1, [r3, #32]
 8001482:	4211      	tst	r1, r2
 8001484:	bf02      	ittt	eq
 8001486:	681a      	ldreq	r2, [r3, #0]
 8001488:	f022 0201 	biceq.w	r2, r2, #1
 800148c:	601a      	streq	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800148e:	2301      	movs	r3, #1
 8001490:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001494:	2000      	movs	r0, #0
 8001496:	4770      	bx	lr

08001498 <HAL_TIM_PWM_MspInit>:
 8001498:	4770      	bx	lr
	...

0800149c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800149c:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <TIM_Base_SetConfig+0x5c>)
{
 800149e:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014a0:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80014a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014a4:	d005      	beq.n	80014b2 <TIM_Base_SetConfig+0x16>
 80014a6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014aa:	d002      	beq.n	80014b2 <TIM_Base_SetConfig+0x16>
 80014ac:	4c13      	ldr	r4, [pc, #76]	; (80014fc <TIM_Base_SetConfig+0x60>)
 80014ae:	42a0      	cmp	r0, r4
 80014b0:	d110      	bne.n	80014d4 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= Structure->CounterMode;
 80014b2:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80014b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014b8:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 80014ba:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80014be:	d005      	beq.n	80014cc <TIM_Base_SetConfig+0x30>
 80014c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80014c4:	d002      	beq.n	80014cc <TIM_Base_SetConfig+0x30>
 80014c6:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <TIM_Base_SetConfig+0x60>)
 80014c8:	4290      	cmp	r0, r2
 80014ca:	d103      	bne.n	80014d4 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014cc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80014ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014d2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014d4:	694a      	ldr	r2, [r1, #20]
 80014d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014da:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80014dc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014de:	688b      	ldr	r3, [r1, #8]
 80014e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80014e2:	680b      	ldr	r3, [r1, #0]
 80014e4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014e6:	4b04      	ldr	r3, [pc, #16]	; (80014f8 <TIM_Base_SetConfig+0x5c>)
 80014e8:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80014ea:	bf04      	itt	eq
 80014ec:	690b      	ldreq	r3, [r1, #16]
 80014ee:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80014f0:	2301      	movs	r3, #1
 80014f2:	6143      	str	r3, [r0, #20]
}
 80014f4:	bd10      	pop	{r4, pc}
 80014f6:	bf00      	nop
 80014f8:	40012c00 	.word	0x40012c00
 80014fc:	40000400 	.word	0x40000400

08001500 <HAL_TIM_Base_Init>:
{
 8001500:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001502:	4604      	mov	r4, r0
 8001504:	b330      	cbz	r0, 8001554 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001506:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800150a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800150e:	b91b      	cbnz	r3, 8001518 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001510:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001514:	f7ff fd94 	bl	8001040 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001518:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800151a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800151c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001520:	1d21      	adds	r1, r4, #4
 8001522:	f7ff ffbb 	bl	800149c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001526:	2301      	movs	r3, #1
  return HAL_OK;
 8001528:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800152a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800152e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001532:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001536:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800153a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800153e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001546:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800154a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800154e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8001552:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001554:	2001      	movs	r0, #1
 8001556:	e7fc      	b.n	8001552 <HAL_TIM_Base_Init+0x52>

08001558 <HAL_TIM_PWM_Init>:
{
 8001558:	b510      	push	{r4, lr}
  if (htim == NULL)
 800155a:	4604      	mov	r4, r0
 800155c:	b330      	cbz	r0, 80015ac <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800155e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001562:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001566:	b91b      	cbnz	r3, 8001570 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001568:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800156c:	f7ff ff94 	bl	8001498 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001570:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001572:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001574:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001578:	1d21      	adds	r1, r4, #4
 800157a:	f7ff ff8f 	bl	800149c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800157e:	2301      	movs	r3, #1
  return HAL_OK;
 8001580:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001582:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001586:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800158a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800158e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001592:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001596:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800159a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800159e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80015a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80015a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80015aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
 80015ae:	e7fc      	b.n	80015aa <HAL_TIM_PWM_Init+0x52>

080015b0 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80015b0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015b2:	6a02      	ldr	r2, [r0, #32]
{
 80015b4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015b6:	f022 0210 	bic.w	r2, r2, #16
 80015ba:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80015bc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80015be:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80015c2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80015c6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80015ca:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80015cc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80015d0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80015d4:	4d0b      	ldr	r5, [pc, #44]	; (8001604 <TIM_OC2_SetConfig+0x54>)
 80015d6:	42a8      	cmp	r0, r5
 80015d8:	d10d      	bne.n	80015f6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80015da:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80015dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80015e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80015e4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80015e8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80015ec:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80015ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80015f2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80015f6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80015f8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80015fa:	684a      	ldr	r2, [r1, #4]
 80015fc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80015fe:	6203      	str	r3, [r0, #32]
}
 8001600:	bd70      	pop	{r4, r5, r6, pc}
 8001602:	bf00      	nop
 8001604:	40012c00 	.word	0x40012c00

08001608 <HAL_TIM_PWM_ConfigChannel>:
{
 8001608:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800160a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800160e:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8001610:	2b01      	cmp	r3, #1
 8001612:	d050      	beq.n	80016b6 <HAL_TIM_PWM_ConfigChannel+0xae>
 8001614:	2301      	movs	r3, #1
  switch (Channel)
 8001616:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001618:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800161c:	d03b      	beq.n	8001696 <HAL_TIM_PWM_ConfigChannel+0x8e>
 800161e:	d807      	bhi.n	8001630 <HAL_TIM_PWM_ConfigChannel+0x28>
 8001620:	b1c2      	cbz	r2, 8001654 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8001622:	2a04      	cmp	r2, #4
 8001624:	d027      	beq.n	8001676 <HAL_TIM_PWM_ConfigChannel+0x6e>
 8001626:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8001628:	2300      	movs	r3, #0
 800162a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800162e:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8001630:	2a0c      	cmp	r2, #12
 8001632:	d1f8      	bne.n	8001626 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001634:	6800      	ldr	r0, [r0, #0]
 8001636:	f7ff fed7 	bl	80013e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800163a:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800163c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800163e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001642:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001644:	69c3      	ldr	r3, [r0, #28]
 8001646:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800164a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800164c:	69c3      	ldr	r3, [r0, #28]
 800164e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001652:	e02e      	b.n	80016b2 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001654:	6800      	ldr	r0, [r0, #0]
 8001656:	f7ff fe75 	bl	8001344 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800165a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800165c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001664:	6983      	ldr	r3, [r0, #24]
 8001666:	f023 0304 	bic.w	r3, r3, #4
 800166a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800166c:	6983      	ldr	r3, [r0, #24]
 800166e:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001670:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001672:	2000      	movs	r0, #0
      break;
 8001674:	e7d8      	b.n	8001628 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001676:	6800      	ldr	r0, [r0, #0]
 8001678:	f7ff ff9a 	bl	80015b0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800167c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800167e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001684:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001686:	6983      	ldr	r3, [r0, #24]
 8001688:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800168c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800168e:	6983      	ldr	r3, [r0, #24]
 8001690:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001694:	e7ec      	b.n	8001670 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001696:	6800      	ldr	r0, [r0, #0]
 8001698:	f7ff fe7c 	bl	8001394 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800169c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800169e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80016a6:	69c3      	ldr	r3, [r0, #28]
 80016a8:	f023 0304 	bic.w	r3, r3, #4
 80016ac:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016ae:	69c3      	ldr	r3, [r0, #28]
 80016b0:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80016b2:	61c3      	str	r3, [r0, #28]
 80016b4:	e7dd      	b.n	8001672 <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 80016b6:	2002      	movs	r0, #2
 80016b8:	e7b9      	b.n	800162e <HAL_TIM_PWM_ConfigChannel+0x26>

080016ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80016ba:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80016bc:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016be:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016c0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80016c4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80016c8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80016ca:	6082      	str	r2, [r0, #8]
}
 80016cc:	bd10      	pop	{r4, pc}

080016ce <HAL_TIM_ConfigClockSource>:
{
 80016ce:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80016d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80016d4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	f04f 0002 	mov.w	r0, #2
 80016dc:	f000 808e 	beq.w	80017fc <HAL_TIM_ConfigClockSource+0x12e>
 80016e0:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80016e2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80016e6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80016e8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80016ec:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80016f6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80016f8:	680b      	ldr	r3, [r1, #0]
 80016fa:	2b60      	cmp	r3, #96	; 0x60
 80016fc:	d04f      	beq.n	800179e <HAL_TIM_ConfigClockSource+0xd0>
 80016fe:	d832      	bhi.n	8001766 <HAL_TIM_ConfigClockSource+0x98>
 8001700:	2b40      	cmp	r3, #64	; 0x40
 8001702:	d064      	beq.n	80017ce <HAL_TIM_ConfigClockSource+0x100>
 8001704:	d816      	bhi.n	8001734 <HAL_TIM_ConfigClockSource+0x66>
 8001706:	2b20      	cmp	r3, #32
 8001708:	d00d      	beq.n	8001726 <HAL_TIM_ConfigClockSource+0x58>
 800170a:	d80a      	bhi.n	8001722 <HAL_TIM_ConfigClockSource+0x54>
 800170c:	f033 0110 	bics.w	r1, r3, #16
 8001710:	d009      	beq.n	8001726 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8001712:	2301      	movs	r3, #1
 8001714:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001718:	2300      	movs	r3, #0
 800171a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800171e:	4610      	mov	r0, r2
 8001720:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8001722:	2b30      	cmp	r3, #48	; 0x30
 8001724:	d1f5      	bne.n	8001712 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8001726:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001728:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800172c:	4313      	orrs	r3, r2
 800172e:	f043 0307 	orr.w	r3, r3, #7
 8001732:	e028      	b.n	8001786 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8001734:	2b50      	cmp	r3, #80	; 0x50
 8001736:	d1ec      	bne.n	8001712 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8001738:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800173a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800173c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800173e:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001740:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800174a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800174c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800174e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001752:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001756:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001758:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800175a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800175c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001760:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8001764:	e00f      	b.n	8001786 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8001766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800176a:	d00d      	beq.n	8001788 <HAL_TIM_ConfigClockSource+0xba>
 800176c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001770:	d00c      	beq.n	800178c <HAL_TIM_ConfigClockSource+0xbe>
 8001772:	2b70      	cmp	r3, #112	; 0x70
 8001774:	d1cd      	bne.n	8001712 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8001776:	68cb      	ldr	r3, [r1, #12]
 8001778:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800177c:	f7ff ff9d 	bl	80016ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001780:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001782:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8001786:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001788:	2200      	movs	r2, #0
 800178a:	e7c2      	b.n	8001712 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800178c:	68cb      	ldr	r3, [r1, #12]
 800178e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8001792:	f7ff ff92 	bl	80016ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001796:	6883      	ldr	r3, [r0, #8]
 8001798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800179c:	e7f3      	b.n	8001786 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 800179e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017a0:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80017a2:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017a4:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 80017a8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017aa:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017ac:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80017ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017b2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80017b6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017ba:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80017be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80017c0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80017c2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80017c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017c8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80017cc:	e7db      	b.n	8001786 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 80017ce:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80017d0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80017d2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017d4:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017d6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017e0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80017e2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80017ec:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80017ee:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80017f0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80017f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80017f6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80017fa:	e7c4      	b.n	8001786 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 80017fc:	4602      	mov	r2, r0
 80017fe:	e78e      	b.n	800171e <HAL_TIM_ConfigClockSource+0x50>

08001800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001800:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001802:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001804:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001806:	f001 011f 	and.w	r1, r1, #31
 800180a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800180c:	ea23 0304 	bic.w	r3, r3, r4
 8001810:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001812:	6a03      	ldr	r3, [r0, #32]
 8001814:	408a      	lsls	r2, r1
 8001816:	431a      	orrs	r2, r3
 8001818:	6202      	str	r2, [r0, #32]
}
 800181a:	bd10      	pop	{r4, pc}

0800181c <HAL_TIM_OC_Start>:
{
 800181c:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800181e:	b929      	cbnz	r1, 800182c <HAL_TIM_OC_Start+0x10>
 8001820:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001824:	2b01      	cmp	r3, #1
 8001826:	d021      	beq.n	800186c <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 8001828:	2001      	movs	r0, #1
}
 800182a:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800182c:	2904      	cmp	r1, #4
 800182e:	d107      	bne.n	8001840 <HAL_TIM_OC_Start+0x24>
 8001830:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8001834:	2b01      	cmp	r3, #1
 8001836:	d1f7      	bne.n	8001828 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001838:	2302      	movs	r3, #2
 800183a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800183e:	e018      	b.n	8001872 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001840:	2908      	cmp	r1, #8
 8001842:	d107      	bne.n	8001854 <HAL_TIM_OC_Start+0x38>
 8001844:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001848:	2b01      	cmp	r3, #1
 800184a:	d1ed      	bne.n	8001828 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800184c:	2302      	movs	r3, #2
 800184e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8001852:	e00e      	b.n	8001872 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001854:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001858:	2b01      	cmp	r3, #1
 800185a:	d1e5      	bne.n	8001828 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800185c:	2904      	cmp	r1, #4
 800185e:	d0eb      	beq.n	8001838 <HAL_TIM_OC_Start+0x1c>
 8001860:	2908      	cmp	r1, #8
 8001862:	d0f3      	beq.n	800184c <HAL_TIM_OC_Start+0x30>
 8001864:	2302      	movs	r3, #2
 8001866:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800186a:	e002      	b.n	8001872 <HAL_TIM_OC_Start+0x56>
 800186c:	2302      	movs	r3, #2
 800186e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001872:	6800      	ldr	r0, [r0, #0]
 8001874:	2201      	movs	r2, #1
 8001876:	f7ff ffc3 	bl	8001800 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_TIM_OC_Start+0x90>)
 800187c:	4298      	cmp	r0, r3
 800187e:	d10a      	bne.n	8001896 <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 8001880:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001886:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001888:	6883      	ldr	r3, [r0, #8]
 800188a:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800188e:	2b06      	cmp	r3, #6
 8001890:	d107      	bne.n	80018a2 <HAL_TIM_OC_Start+0x86>
  return HAL_OK;
 8001892:	2000      	movs	r0, #0
 8001894:	e7c9      	b.n	800182a <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001896:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800189a:	d0f5      	beq.n	8001888 <HAL_TIM_OC_Start+0x6c>
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <HAL_TIM_OC_Start+0x94>)
 800189e:	4298      	cmp	r0, r3
 80018a0:	d0f2      	beq.n	8001888 <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 80018a2:	6803      	ldr	r3, [r0, #0]
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6003      	str	r3, [r0, #0]
 80018aa:	e7f2      	b.n	8001892 <HAL_TIM_OC_Start+0x76>
 80018ac:	40012c00 	.word	0x40012c00
 80018b0:	40000400 	.word	0x40000400

080018b4 <HAL_TIM_PWM_Start>:
 80018b4:	f7ff bfb2 	b.w	800181c <HAL_TIM_OC_Start>

080018b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80018b8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018ba:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 80018be:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80018c0:	2a01      	cmp	r2, #1
 80018c2:	f04f 0002 	mov.w	r0, #2
 80018c6:	d01e      	beq.n	8001906 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018c8:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80018ca:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80018ce:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018d0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80018d2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018d6:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80018d8:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80018da:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018dc:	4c0a      	ldr	r4, [pc, #40]	; (8001908 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 80018de:	42a2      	cmp	r2, r4
 80018e0:	d006      	beq.n	80018f0 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 80018e2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80018e6:	d003      	beq.n	80018f0 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 80018e8:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80018ec:	42a2      	cmp	r2, r4
 80018ee:	d104      	bne.n	80018fa <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80018f0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80018f2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80018f6:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80018f8:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80018fa:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 80018fc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80018fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001902:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8001906:	bd30      	pop	{r4, r5, pc}
 8001908:	40012c00 	.word	0x40012c00

0800190c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800190c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001910:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8001912:	2b01      	cmp	r3, #1
 8001914:	d01e      	beq.n	8001954 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001916:	68cb      	ldr	r3, [r1, #12]
 8001918:	6888      	ldr	r0, [r1, #8]
 800191a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800191e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001920:	6848      	ldr	r0, [r1, #4]
 8001922:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001926:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001928:	6808      	ldr	r0, [r1, #0]
 800192a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800192e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001930:	6908      	ldr	r0, [r1, #16]
 8001932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001936:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001938:	6948      	ldr	r0, [r1, #20]
 800193a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800193e:	4303      	orrs	r3, r0


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8001940:	2000      	movs	r0, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001942:	69c9      	ldr	r1, [r1, #28]
 8001944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001948:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800194a:	6811      	ldr	r1, [r2, #0]
 800194c:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800194e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
 8001952:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001954:	2002      	movs	r0, #2
}
 8001956:	4770      	bx	lr

08001958 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800195c:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001960:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001964:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001966:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800196c:	4770      	bx	lr

0800196e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800196e:	2300      	movs	r3, #0
 8001970:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001972:	4770      	bx	lr

08001974 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001974:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001976:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001978:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800197a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001980:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001982:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001984:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001986:	3301      	adds	r3, #1
 8001988:	6003      	str	r3, [r0, #0]
}
 800198a:	4770      	bx	lr

0800198c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800198c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800198e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001990:	1c63      	adds	r3, r4, #1
 8001992:	d10a      	bne.n	80019aa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001994:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800199a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800199c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800199e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80019a0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80019a2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80019a4:	3301      	adds	r3, #1
 80019a6:	6003      	str	r3, [r0, #0]
}
 80019a8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80019aa:	f100 0208 	add.w	r2, r0, #8
 80019ae:	4613      	mov	r3, r2
 80019b0:	6852      	ldr	r2, [r2, #4]
 80019b2:	6815      	ldr	r5, [r2, #0]
 80019b4:	42a5      	cmp	r5, r4
 80019b6:	d9fa      	bls.n	80019ae <vListInsert+0x22>
 80019b8:	e7ed      	b.n	8001996 <vListInsert+0xa>

080019ba <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80019ba:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019bc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80019c0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019c2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80019c4:	6859      	ldr	r1, [r3, #4]
 80019c6:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019c8:	bf08      	it	eq
 80019ca:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80019cc:	2200      	movs	r2, #0
 80019ce:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	3a01      	subs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019d6:	6818      	ldr	r0, [r3, #0]
}
 80019d8:	4770      	bx	lr
	...

080019dc <prvIdleTask>:
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 80019dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80019e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80019e4:	4905      	ldr	r1, [pc, #20]	; (80019fc <prvIdleTask+0x20>)
 80019e6:	6808      	ldr	r0, [r1, #0]
 80019e8:	2801      	cmp	r0, #1
 80019ea:	d9fc      	bls.n	80019e6 <prvIdleTask+0xa>
				taskYIELD();
 80019ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80019f0:	f3bf 8f4f 	dsb	sy
 80019f4:	f3bf 8f6f 	isb	sy
 80019f8:	e7f5      	b.n	80019e6 <prvIdleTask+0xa>
 80019fa:	bf00      	nop
 80019fc:	200001f4 	.word	0x200001f4

08001a00 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a00:	4a06      	ldr	r2, [pc, #24]	; (8001a1c <prvResetNextTaskUnblockTime+0x1c>)
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	6819      	ldr	r1, [r3, #0]
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <prvResetNextTaskUnblockTime+0x20>)
 8001a08:	b919      	cbnz	r1, 8001a12 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001a0a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001a0e:	601a      	str	r2, [r3, #0]
	}
}
 8001a10:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001a16:	68d2      	ldr	r2, [r2, #12]
 8001a18:	6852      	ldr	r2, [r2, #4]
 8001a1a:	e7f8      	b.n	8001a0e <prvResetNextTaskUnblockTime+0xe>
 8001a1c:	200001ec 	.word	0x200001ec
 8001a20:	200002c0 	.word	0x200002c0

08001a24 <prvAddCurrentTaskToDelayedList.constprop.0>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8001a24:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <prvAddCurrentTaskToDelayedList.constprop.0+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a28:	4d15      	ldr	r5, [pc, #84]	; (8001a80 <prvAddCurrentTaskToDelayedList.constprop.0+0x5c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8001a2a:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8001a2c:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a2e:	6828      	ldr	r0, [r5, #0]
 8001a30:	3004      	adds	r0, #4
 8001a32:	f7ff ffc2 	bl	80019ba <uxListRemove>
 8001a36:	b940      	cbnz	r0, 8001a4a <prvAddCurrentTaskToDelayedList.constprop.0+0x26>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001a38:	682a      	ldr	r2, [r5, #0]
 8001a3a:	4912      	ldr	r1, [pc, #72]	; (8001a84 <prvAddCurrentTaskToDelayedList.constprop.0+0x60>)
 8001a3c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8001a3e:	2201      	movs	r2, #1
 8001a40:	680b      	ldr	r3, [r1, #0]
 8001a42:	4082      	lsls	r2, r0
 8001a44:	ea23 0302 	bic.w	r3, r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a4a:	682b      	ldr	r3, [r5, #0]
 8001a4c:	19a4      	adds	r4, r4, r6
 8001a4e:	605c      	str	r4, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8001a50:	d307      	bcc.n	8001a62 <prvAddCurrentTaskToDelayedList.constprop.0+0x3e>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <prvAddCurrentTaskToDelayedList.constprop.0+0x64>)
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a5c:	3104      	adds	r1, #4
 8001a5e:	f7ff bf95 	b.w	800198c <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <prvAddCurrentTaskToDelayedList.constprop.0+0x68>)
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	6829      	ldr	r1, [r5, #0]
 8001a68:	3104      	adds	r1, #4
 8001a6a:	f7ff ff8f 	bl	800198c <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <prvAddCurrentTaskToDelayedList.constprop.0+0x6c>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4294      	cmp	r4, r2
				xNextTaskUnblockTime = xTimeToWake;
 8001a74:	bf38      	it	cc
 8001a76:	601c      	strcc	r4, [r3, #0]
}
 8001a78:	bd70      	pop	{r4, r5, r6, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200002e0 	.word	0x200002e0
 8001a80:	200001e8 	.word	0x200001e8
 8001a84:	20000290 	.word	0x20000290
 8001a88:	200001f0 	.word	0x200001f0
 8001a8c:	200001ec 	.word	0x200001ec
 8001a90:	200002c0 	.word	0x200002c0

08001a94 <xTaskCreate>:
	{
 8001a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a98:	0096      	lsls	r6, r2, #2
	{
 8001a9a:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a9c:	4630      	mov	r0, r6
	{
 8001a9e:	460f      	mov	r7, r1
 8001aa0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001aa2:	f000 fc21 	bl	80022e8 <pvPortMalloc>
			if( pxStack != NULL )
 8001aa6:	4605      	mov	r5, r0
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	f000 809d 	beq.w	8001be8 <xTaskCreate+0x154>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001aae:	2098      	movs	r0, #152	; 0x98
 8001ab0:	f000 fc1a 	bl	80022e8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001ab4:	4604      	mov	r4, r0
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	f000 8093 	beq.w	8001be2 <xTaskCreate+0x14e>
					pxNewTCB->pxStack = pxStack;
 8001abc:	1e7b      	subs	r3, r7, #1
 8001abe:	6305      	str	r5, [r0, #48]	; 0x30
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ac0:	f100 0233 	add.w	r2, r0, #51	; 0x33
 8001ac4:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ac6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001aca:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8001ace:	b109      	cbz	r1, 8001ad4 <xTaskCreate+0x40>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ad0:	42bb      	cmp	r3, r7
 8001ad2:	d1f8      	bne.n	8001ac6 <xTaskCreate+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001ad6:	f04f 0a00 	mov.w	sl, #0
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	bf28      	it	cs
 8001ade:	2306      	movcs	r3, #6
 8001ae0:	469b      	mov	fp, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ae2:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ae6:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ae8:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001aec:	f7ff ff3f 	bl	800196e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001af0:	f104 0018 	add.w	r0, r4, #24
 8001af4:	f7ff ff3b 	bl	800196e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001af8:	f1cb 0307 	rsb	r3, fp, #7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001afc:	224c      	movs	r2, #76	; 0x4c
 8001afe:	4651      	mov	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b00:	61a3      	str	r3, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8001b02:	f8c4 a090 	str.w	sl, [r4, #144]	; 0x90
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b06:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b08:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001b0a:	f884 a094 	strb.w	sl, [r4, #148]	; 0x94
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001b0e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8001b12:	f000 fcb3 	bl	800247c <memset>
 8001b16:	4b3b      	ldr	r3, [pc, #236]	; (8001c04 <xTaskCreate+0x170>)
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001b18:	3e04      	subs	r6, #4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001b1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001b1e:	64a3      	str	r3, [r4, #72]	; 0x48
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001b20:	4435      	add	r5, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8001b22:	33d0      	adds	r3, #208	; 0xd0
 8001b24:	64e2      	str	r2, [r4, #76]	; 0x4c
 8001b26:	6523      	str	r3, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b28:	464a      	mov	r2, r9
 8001b2a:	4641      	mov	r1, r8
 8001b2c:	f025 0007 	bic.w	r0, r5, #7
 8001b30:	f000 faa4 	bl	800207c <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 8001b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b36:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001b38:	b103      	cbz	r3, 8001b3c <xTaskCreate+0xa8>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b3a:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8001b3c:	f000 fad4 	bl	80020e8 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001b40:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <xTaskCreate+0x174>)
		if( pxCurrentTCB == NULL )
 8001b42:	4e32      	ldr	r6, [pc, #200]	; (8001c0c <xTaskCreate+0x178>)
		uxCurrentNumberOfTasks++;
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001c10 <xTaskCreate+0x17c>
 8001b4a:	3201      	adds	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001b4e:	6835      	ldr	r5, [r6, #0]
 8001b50:	2d00      	cmp	r5, #0
 8001b52:	d14c      	bne.n	8001bee <xTaskCreate+0x15a>
			pxCurrentTCB = pxNewTCB;
 8001b54:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d119      	bne.n	8001b90 <xTaskCreate+0xfc>
 8001b5c:	46c1      	mov	r9, r8
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b5e:	4648      	mov	r0, r9
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b60:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001b62:	f7ff fef9 	bl	8001958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b66:	2d07      	cmp	r5, #7
 8001b68:	f109 0914 	add.w	r9, r9, #20
 8001b6c:	d1f7      	bne.n	8001b5e <xTaskCreate+0xca>
	vListInitialise( &xDelayedTaskList1 );
 8001b6e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8001c14 <xTaskCreate+0x180>
	vListInitialise( &xDelayedTaskList2 );
 8001b72:	4d29      	ldr	r5, [pc, #164]	; (8001c18 <xTaskCreate+0x184>)
	vListInitialise( &xDelayedTaskList1 );
 8001b74:	4648      	mov	r0, r9
 8001b76:	f7ff feef 	bl	8001958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	f7ff feec 	bl	8001958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001b80:	4826      	ldr	r0, [pc, #152]	; (8001c1c <xTaskCreate+0x188>)
 8001b82:	f7ff fee9 	bl	8001958 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <xTaskCreate+0x18c>)
 8001b88:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <xTaskCreate+0x190>)
 8001b8e:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001b90:	2501      	movs	r5, #1
		uxTaskNumber++;
 8001b92:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <xTaskCreate+0x194>)
		prvAddTaskToReadyList( pxNewTCB );
 8001b94:	4925      	ldr	r1, [pc, #148]	; (8001c2c <xTaskCreate+0x198>)
		uxTaskNumber++;
 8001b96:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001b98:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001b9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ba0:	fa05 f302 	lsl.w	r3, r5, r2
 8001ba4:	4303      	orrs	r3, r0
 8001ba6:	2014      	movs	r0, #20
 8001ba8:	600b      	str	r3, [r1, #0]
 8001baa:	fb00 8002 	mla	r0, r0, r2, r8
 8001bae:	4639      	mov	r1, r7
 8001bb0:	f7ff fee0 	bl	8001974 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001bb4:	f000 fab8 	bl	8002128 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <xTaskCreate+0x19c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	b173      	cbz	r3, 8001bdc <xTaskCreate+0x148>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001bbe:	6833      	ldr	r3, [r6, #0]
 8001bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d209      	bcs.n	8001bdc <xTaskCreate+0x148>
			taskYIELD_IF_USING_PREEMPTION();
 8001bc8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bd0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001bd4:	f3bf 8f4f 	dsb	sy
 8001bd8:	f3bf 8f6f 	isb	sy
	}
 8001bdc:	4628      	mov	r0, r5
 8001bde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001be2:	4628      	mov	r0, r5
 8001be4:	f000 fc12 	bl	800240c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001be8:	f04f 35ff 	mov.w	r5, #4294967295
 8001bec:	e7f6      	b.n	8001bdc <xTaskCreate+0x148>
			if( xSchedulerRunning == pdFALSE )
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <xTaskCreate+0x19c>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001bf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			if( xSchedulerRunning == pdFALSE )
 8001bf4:	2a00      	cmp	r2, #0
 8001bf6:	d1cb      	bne.n	8001b90 <xTaskCreate+0xfc>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001bf8:	6832      	ldr	r2, [r6, #0]
 8001bfa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bfc:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001bfe:	bf98      	it	ls
 8001c00:	6034      	strls	r4, [r6, #0]
 8001c02:	e7c5      	b.n	8001b90 <xTaskCreate+0xfc>
 8001c04:	20000f08 	.word	0x20000f08
 8001c08:	20000280 	.word	0x20000280
 8001c0c:	200001e8 	.word	0x200001e8
 8001c10:	200001f4 	.word	0x200001f4
 8001c14:	20000294 	.word	0x20000294
 8001c18:	200002a8 	.word	0x200002a8
 8001c1c:	200002c8 	.word	0x200002c8
 8001c20:	200001ec 	.word	0x200001ec
 8001c24:	200001f0 	.word	0x200001f0
 8001c28:	2000028c 	.word	0x2000028c
 8001c2c:	20000290 	.word	0x20000290
 8001c30:	200002dc 	.word	0x200002dc

08001c34 <vTaskStartScheduler>:
{
 8001c34:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001c36:	2400      	movs	r4, #0
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <vTaskStartScheduler+0x68>)
 8001c3a:	2280      	movs	r2, #128	; 0x80
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	4918      	ldr	r1, [pc, #96]	; (8001ca0 <vTaskStartScheduler+0x6c>)
 8001c40:	4623      	mov	r3, r4
 8001c42:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <vTaskStartScheduler+0x70>)
 8001c44:	9400      	str	r4, [sp, #0]
 8001c46:	f7ff ff25 	bl	8001a94 <xTaskCreate>
	if( xReturn == pdPASS )
 8001c4a:	2801      	cmp	r0, #1
 8001c4c:	d119      	bne.n	8001c82 <vTaskStartScheduler+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001c5e:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <vTaskStartScheduler+0x74>)
 8001c60:	4a12      	ldr	r2, [pc, #72]	; (8001cac <vTaskStartScheduler+0x78>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3344      	adds	r3, #68	; 0x44
 8001c66:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <vTaskStartScheduler+0x7c>)
 8001c6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001c70:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <vTaskStartScheduler+0x80>)
 8001c72:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <vTaskStartScheduler+0x84>)
 8001c76:	601c      	str	r4, [r3, #0]
}
 8001c78:	b002      	add	sp, #8
 8001c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001c7e:	f000 bab1 	b.w	80021e4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c82:	3001      	adds	r0, #1
 8001c84:	d108      	bne.n	8001c98 <vTaskStartScheduler+0x64>
 8001c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8a:	f383 8811 	msr	BASEPRI, r3
 8001c8e:	f3bf 8f6f 	isb	sy
 8001c92:	f3bf 8f4f 	dsb	sy
 8001c96:	e7fe      	b.n	8001c96 <vTaskStartScheduler+0x62>
}
 8001c98:	b002      	add	sp, #8
 8001c9a:	bd10      	pop	{r4, pc}
 8001c9c:	200002bc 	.word	0x200002bc
 8001ca0:	08002530 	.word	0x08002530
 8001ca4:	080019dd 	.word	0x080019dd
 8001ca8:	200001e8 	.word	0x200001e8
 8001cac:	20000064 	.word	0x20000064
 8001cb0:	200002c0 	.word	0x200002c0
 8001cb4:	200002dc 	.word	0x200002dc
 8001cb8:	200002e0 	.word	0x200002e0

08001cbc <vTaskEndScheduler>:
 8001cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc0:	f383 8811 	msr	BASEPRI, r3
 8001cc4:	f3bf 8f6f 	isb	sy
 8001cc8:	f3bf 8f4f 	dsb	sy
	xSchedulerRunning = pdFALSE;
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <vTaskEndScheduler+0x1c>)
 8001cd0:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
 8001cd2:	f000 b9f7 	b.w	80020c4 <vPortEndScheduler>
 8001cd6:	bf00      	nop
 8001cd8:	200002dc 	.word	0x200002dc

08001cdc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001cdc:	4a02      	ldr	r2, [pc, #8]	; (8001ce8 <vTaskSuspendAll+0xc>)
 8001cde:	6813      	ldr	r3, [r2, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000288 	.word	0x20000288

08001cec <xTaskGetTickCount>:
		xTicks = xTickCount;
 8001cec:	4b01      	ldr	r3, [pc, #4]	; (8001cf4 <xTaskGetTickCount+0x8>)
 8001cee:	6818      	ldr	r0, [r3, #0]
}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	200002e0 	.word	0x200002e0

08001cf8 <xTaskIncrementTick>:
{
 8001cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cfc:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <xTaskIncrementTick+0xf8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d16e      	bne.n	8001de2 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001d04:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <xTaskIncrementTick+0xfc>)
 8001d06:	681d      	ldr	r5, [r3, #0]
 8001d08:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8001d0a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001d0c:	b9bd      	cbnz	r5, 8001d3e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <xTaskIncrementTick+0x100>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	6812      	ldr	r2, [r2, #0]
 8001d14:	b142      	cbz	r2, 8001d28 <xTaskIncrementTick+0x30>
 8001d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1a:	f383 8811 	msr	BASEPRI, r3
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	f3bf 8f4f 	dsb	sy
 8001d26:	e7fe      	b.n	8001d26 <xTaskIncrementTick+0x2e>
 8001d28:	4a34      	ldr	r2, [pc, #208]	; (8001dfc <xTaskIncrementTick+0x104>)
 8001d2a:	6819      	ldr	r1, [r3, #0]
 8001d2c:	6810      	ldr	r0, [r2, #0]
 8001d2e:	6018      	str	r0, [r3, #0]
 8001d30:	6011      	str	r1, [r2, #0]
 8001d32:	4a33      	ldr	r2, [pc, #204]	; (8001e00 <xTaskIncrementTick+0x108>)
 8001d34:	6813      	ldr	r3, [r2, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	f7ff fe61 	bl	8001a00 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d3e:	4e31      	ldr	r6, [pc, #196]	; (8001e04 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8001d40:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d42:	6833      	ldr	r3, [r6, #0]
 8001d44:	4f30      	ldr	r7, [pc, #192]	; (8001e08 <xTaskIncrementTick+0x110>)
 8001d46:	42ab      	cmp	r3, r5
 8001d48:	d910      	bls.n	8001d6c <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001d4a:	2214      	movs	r2, #20
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <xTaskIncrementTick+0x114>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	4353      	muls	r3, r2
 8001d54:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	bf28      	it	cs
 8001d5a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8001d5c:	4b2c      	ldr	r3, [pc, #176]	; (8001e10 <xTaskIncrementTick+0x118>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8001d60:	2b00      	cmp	r3, #0
}
 8001d62:	bf0c      	ite	eq
 8001d64:	4620      	moveq	r0, r4
 8001d66:	2001      	movne	r0, #1
 8001d68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d6c:	f8df a088 	ldr.w	sl, [pc, #136]	; 8001df8 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001d70:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8001e14 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d74:	f8da 3000 	ldr.w	r3, [sl]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	b91b      	cbnz	r3, 8001d84 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	6033      	str	r3, [r6, #0]
					break;
 8001d82:	e7e2      	b.n	8001d4a <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d84:	f8da 3000 	ldr.w	r3, [sl]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d8e:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8001d92:	4295      	cmp	r5, r2
 8001d94:	d201      	bcs.n	8001d9a <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8001d96:	6032      	str	r2, [r6, #0]
						break;
 8001d98:	e7d7      	b.n	8001d4a <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d9a:	f10b 0804 	add.w	r8, fp, #4
 8001d9e:	4640      	mov	r0, r8
 8001da0:	f7ff fe0b 	bl	80019ba <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001da4:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8001da8:	b11a      	cbz	r2, 8001db2 <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001daa:	f10b 0018 	add.w	r0, fp, #24
 8001dae:	f7ff fe04 	bl	80019ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001db2:	2201      	movs	r2, #1
 8001db4:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8001db8:	f8d9 3000 	ldr.w	r3, [r9]
 8001dbc:	4082      	lsls	r2, r0
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	f8c9 2000 	str.w	r2, [r9]
 8001dc4:	2214      	movs	r2, #20
 8001dc6:	4641      	mov	r1, r8
 8001dc8:	fb02 7000 	mla	r0, r2, r0, r7
 8001dcc:	f7ff fdd2 	bl	8001974 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <xTaskIncrementTick+0x114>)
 8001dd2:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	bf28      	it	cs
 8001dde:	2401      	movcs	r4, #1
 8001de0:	e7c8      	b.n	8001d74 <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 8001de2:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 8001de4:	2400      	movs	r4, #0
		++uxPendedTicks;
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	e7b6      	b.n	8001d5c <xTaskIncrementTick+0x64>
 8001dee:	bf00      	nop
 8001df0:	20000288 	.word	0x20000288
 8001df4:	200002e0 	.word	0x200002e0
 8001df8:	200001ec 	.word	0x200001ec
 8001dfc:	200001f0 	.word	0x200001f0
 8001e00:	200002c4 	.word	0x200002c4
 8001e04:	200002c0 	.word	0x200002c0
 8001e08:	200001f4 	.word	0x200001f4
 8001e0c:	200001e8 	.word	0x200001e8
 8001e10:	200002e4 	.word	0x200002e4
 8001e14:	20000290 	.word	0x20000290
 8001e18:	20000284 	.word	0x20000284

08001e1c <xTaskResumeAll>:
{
 8001e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001e20:	4c31      	ldr	r4, [pc, #196]	; (8001ee8 <xTaskResumeAll+0xcc>)
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	b943      	cbnz	r3, 8001e38 <xTaskResumeAll+0x1c>
 8001e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2a:	f383 8811 	msr	BASEPRI, r3
 8001e2e:	f3bf 8f6f 	isb	sy
 8001e32:	f3bf 8f4f 	dsb	sy
 8001e36:	e7fe      	b.n	8001e36 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001e38:	f000 f956 	bl	80020e8 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e42:	6824      	ldr	r4, [r4, #0]
 8001e44:	b12c      	cbz	r4, 8001e52 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001e46:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001e48:	f000 f96e 	bl	8002128 <vPortExitCritical>
}
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <xTaskResumeAll+0xd0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f5      	beq.n	8001e46 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e5a:	4d25      	ldr	r5, [pc, #148]	; (8001ef0 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8001e5c:	4e25      	ldr	r6, [pc, #148]	; (8001ef4 <xTaskResumeAll+0xd8>)
 8001e5e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001ef8 <xTaskResumeAll+0xdc>
 8001e62:	e01f      	b.n	8001ea4 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001e64:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8001e66:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001e68:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e6a:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e6e:	f104 0018 	add.w	r0, r4, #24
 8001e72:	f7ff fda2 	bl	80019ba <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e76:	4648      	mov	r0, r9
 8001e78:	f7ff fd9f 	bl	80019ba <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e7c:	2014      	movs	r0, #20
 8001e7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e80:	6831      	ldr	r1, [r6, #0]
 8001e82:	fa07 f302 	lsl.w	r3, r7, r2
 8001e86:	430b      	orrs	r3, r1
 8001e88:	fb00 8002 	mla	r0, r0, r2, r8
 8001e8c:	4649      	mov	r1, r9
 8001e8e:	6033      	str	r3, [r6, #0]
 8001e90:	f7ff fd70 	bl	8001974 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <xTaskResumeAll+0xe0>)
 8001e96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d301      	bcc.n	8001ea4 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8001ea0:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <xTaskResumeAll+0xe4>)
 8001ea2:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ea4:	682b      	ldr	r3, [r5, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1dc      	bne.n	8001e64 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8001eaa:	b10c      	cbz	r4, 8001eb0 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8001eac:	f7ff fda8 	bl	8001a00 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001eb0:	4d14      	ldr	r5, [pc, #80]	; (8001f04 <xTaskResumeAll+0xe8>)
 8001eb2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001eb4:	b144      	cbz	r4, 8001ec8 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8001eb6:	2701      	movs	r7, #1
 8001eb8:	4e11      	ldr	r6, [pc, #68]	; (8001f00 <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 8001eba:	f7ff ff1d 	bl	8001cf8 <xTaskIncrementTick>
 8001ebe:	b100      	cbz	r0, 8001ec2 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8001ec0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001ec2:	3c01      	subs	r4, #1
 8001ec4:	d1f9      	bne.n	8001eba <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8001ec6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <xTaskResumeAll+0xe4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ba      	beq.n	8001e46 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001ed0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001edc:	f3bf 8f4f 	dsb	sy
 8001ee0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001ee4:	2401      	movs	r4, #1
 8001ee6:	e7af      	b.n	8001e48 <xTaskResumeAll+0x2c>
 8001ee8:	20000288 	.word	0x20000288
 8001eec:	20000280 	.word	0x20000280
 8001ef0:	200002c8 	.word	0x200002c8
 8001ef4:	20000290 	.word	0x20000290
 8001ef8:	200001f4 	.word	0x200001f4
 8001efc:	200001e8 	.word	0x200001e8
 8001f00:	200002e4 	.word	0x200002e4
 8001f04:	20000284 	.word	0x20000284

08001f08 <vTaskDelayUntil>:
	{
 8001f08:	b510      	push	{r4, lr}
		configASSERT( pxPreviousWakeTime );
 8001f0a:	b940      	cbnz	r0, 8001f1e <vTaskDelayUntil+0x16>
 8001f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f10:	f383 8811 	msr	BASEPRI, r3
 8001f14:	f3bf 8f6f 	isb	sy
 8001f18:	f3bf 8f4f 	dsb	sy
 8001f1c:	e7fe      	b.n	8001f1c <vTaskDelayUntil+0x14>
		configASSERT( ( xTimeIncrement > 0U ) );
 8001f1e:	b941      	cbnz	r1, 8001f32 <vTaskDelayUntil+0x2a>
 8001f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f24:	f383 8811 	msr	BASEPRI, r3
 8001f28:	f3bf 8f6f 	isb	sy
 8001f2c:	f3bf 8f4f 	dsb	sy
 8001f30:	e7fe      	b.n	8001f30 <vTaskDelayUntil+0x28>
		configASSERT( uxSchedulerSuspended == 0 );
 8001f32:	4b17      	ldr	r3, [pc, #92]	; (8001f90 <vTaskDelayUntil+0x88>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	b143      	cbz	r3, 8001f4a <vTaskDelayUntil+0x42>
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
 8001f48:	e7fe      	b.n	8001f48 <vTaskDelayUntil+0x40>
		vTaskSuspendAll();
 8001f4a:	f7ff fec7 	bl	8001cdc <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <vTaskDelayUntil+0x8c>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001f50:	6802      	ldr	r2, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8001f52:	681b      	ldr	r3, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001f54:	1851      	adds	r1, r2, r1
 8001f56:	bf2c      	ite	cs
 8001f58:	2401      	movcs	r4, #1
 8001f5a:	2400      	movcc	r4, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d90f      	bls.n	8001f80 <vTaskDelayUntil+0x78>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8001f60:	b97c      	cbnz	r4, 8001f82 <vTaskDelayUntil+0x7a>
			*pxPreviousWakeTime = xTimeToWake;
 8001f62:	6001      	str	r1, [r0, #0]
		xAlreadyYielded = xTaskResumeAll();
 8001f64:	f7ff ff5a 	bl	8001e1c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001f68:	b948      	cbnz	r0, 8001f7e <vTaskDelayUntil+0x76>
			portYIELD_WITHIN_API();
 8001f6a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f72:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001f76:	f3bf 8f4f 	dsb	sy
 8001f7a:	f3bf 8f6f 	isb	sy
	}
 8001f7e:	bd10      	pop	{r4, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8001f80:	b90c      	cbnz	r4, 8001f86 <vTaskDelayUntil+0x7e>
 8001f82:	428b      	cmp	r3, r1
 8001f84:	d2ed      	bcs.n	8001f62 <vTaskDelayUntil+0x5a>
			*pxPreviousWakeTime = xTimeToWake;
 8001f86:	6001      	str	r1, [r0, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8001f88:	1ac8      	subs	r0, r1, r3
 8001f8a:	f7ff fd4b 	bl	8001a24 <prvAddCurrentTaskToDelayedList.constprop.0>
 8001f8e:	e7e9      	b.n	8001f64 <vTaskDelayUntil+0x5c>
 8001f90:	20000288 	.word	0x20000288
 8001f94:	200002e0 	.word	0x200002e0

08001f98 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <vTaskSwitchContext+0x6c>)
{
 8001f9a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <vTaskSwitchContext+0x70>)
 8001fa0:	b112      	cbz	r2, 8001fa8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
}
 8001fa6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001fa8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <vTaskSwitchContext+0x74>)
 8001fac:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001fae:	fab2 f282 	clz	r2, r2
 8001fb2:	2314      	movs	r3, #20
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	f1c2 021f 	rsb	r2, r2, #31
 8001fba:	4353      	muls	r3, r2
 8001fbc:	4914      	ldr	r1, [pc, #80]	; (8002010 <vTaskSwitchContext+0x78>)
 8001fbe:	58cc      	ldr	r4, [r1, r3]
 8001fc0:	18c8      	adds	r0, r1, r3
 8001fc2:	b944      	cbnz	r4, 8001fd6 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc8:	f383 8811 	msr	BASEPRI, r3
 8001fcc:	f3bf 8f6f 	isb	sy
 8001fd0:	f3bf 8f4f 	dsb	sy
 8001fd4:	e7fe      	b.n	8001fd4 <vTaskSwitchContext+0x3c>
 8001fd6:	6844      	ldr	r4, [r0, #4]
 8001fd8:	3308      	adds	r3, #8
 8001fda:	6864      	ldr	r4, [r4, #4]
 8001fdc:	440b      	add	r3, r1
 8001fde:	429c      	cmp	r4, r3
 8001fe0:	bf08      	it	eq
 8001fe2:	6863      	ldreq	r3, [r4, #4]
 8001fe4:	6044      	str	r4, [r0, #4]
 8001fe6:	bf08      	it	eq
 8001fe8:	6043      	streq	r3, [r0, #4]
 8001fea:	2314      	movs	r3, #20
 8001fec:	fb03 1102 	mla	r1, r3, r2, r1
 8001ff0:	684b      	ldr	r3, [r1, #4]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <vTaskSwitchContext+0x7c>)
 8001ff6:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a07      	ldr	r2, [pc, #28]	; (8002018 <vTaskSwitchContext+0x80>)
 8001ffc:	3344      	adds	r3, #68	; 0x44
 8001ffe:	6013      	str	r3, [r2, #0]
}
 8002000:	e7d1      	b.n	8001fa6 <vTaskSwitchContext+0xe>
 8002002:	bf00      	nop
 8002004:	20000288 	.word	0x20000288
 8002008:	200002e4 	.word	0x200002e4
 800200c:	20000290 	.word	0x20000290
 8002010:	200001f4 	.word	0x200001f4
 8002014:	200001e8 	.word	0x200001e8
 8002018:	20000064 	.word	0x20000064

0800201c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800201c:	4806      	ldr	r0, [pc, #24]	; (8002038 <prvPortStartFirstTask+0x1c>)
 800201e:	6800      	ldr	r0, [r0, #0]
 8002020:	6800      	ldr	r0, [r0, #0]
 8002022:	f380 8808 	msr	MSP, r0
 8002026:	b662      	cpsie	i
 8002028:	b661      	cpsie	f
 800202a:	f3bf 8f4f 	dsb	sy
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	df00      	svc	0
 8002034:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002036:	0000      	.short	0x0000
 8002038:	e000ed08 	.word	0xe000ed08

0800203c <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 800203c:	2300      	movs	r3, #0
{
 800203e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8002040:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <prvTaskExitError+0x3c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	3301      	adds	r3, #1
 8002048:	d008      	beq.n	800205c <prvTaskExitError+0x20>
 800204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800204e:	f383 8811 	msr	BASEPRI, r3
 8002052:	f3bf 8f6f 	isb	sy
 8002056:	f3bf 8f4f 	dsb	sy
 800205a:	e7fe      	b.n	800205a <prvTaskExitError+0x1e>
 800205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002060:	f383 8811 	msr	BASEPRI, r3
 8002064:	f3bf 8f6f 	isb	sy
 8002068:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0fc      	beq.n	800206c <prvTaskExitError+0x30>
}
 8002072:	b002      	add	sp, #8
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	20000014 	.word	0x20000014

0800207c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800207c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002080:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002086:	f021 0101 	bic.w	r1, r1, #1
 800208a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800208e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002092:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002096:	3840      	subs	r0, #64	; 0x40
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	0800203d 	.word	0x0800203d

080020a0 <SVC_Handler>:
	__asm volatile (
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <pxCurrentTCBConst2>)
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	6808      	ldr	r0, [r1, #0]
 80020a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80020aa:	f380 8809 	msr	PSP, r0
 80020ae:	f3bf 8f6f 	isb	sy
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f380 8811 	msr	BASEPRI, r0
 80020ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80020be:	4770      	bx	lr

080020c0 <pxCurrentTCBConst2>:
 80020c0:	200001e8 	.word	0x200001e8

080020c4 <vPortEndScheduler>:

void vPortEndScheduler( void )
{
	/* Not implemented in ports where there is nothing to return to.
	Artificially force an assert. */
	configASSERT( uxCriticalNesting == 1000UL );
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <vPortEndScheduler+0x20>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020cc:	d008      	beq.n	80020e0 <vPortEndScheduler+0x1c>
 80020ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d2:	f383 8811 	msr	BASEPRI, r3
 80020d6:	f3bf 8f6f 	isb	sy
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	e7fe      	b.n	80020de <vPortEndScheduler+0x1a>
}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000014 	.word	0x20000014

080020e8 <vPortEnterCritical>:
 80020e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <vPortEnterCritical+0x3c>)
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80020fe:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002102:	d10e      	bne.n	8002122 <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002104:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002108:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800210c:	b2db      	uxtb	r3, r3
 800210e:	b143      	cbz	r3, 8002122 <vPortEnterCritical+0x3a>
 8002110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	e7fe      	b.n	8002120 <vPortEnterCritical+0x38>
	}
}
 8002122:	4770      	bx	lr
 8002124:	20000014 	.word	0x20000014

08002128 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002128:	4a08      	ldr	r2, [pc, #32]	; (800214c <vPortExitCritical+0x24>)
 800212a:	6813      	ldr	r3, [r2, #0]
 800212c:	b943      	cbnz	r3, 8002140 <vPortExitCritical+0x18>
 800212e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002132:	f383 8811 	msr	BASEPRI, r3
 8002136:	f3bf 8f6f 	isb	sy
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	e7fe      	b.n	800213e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002140:	3b01      	subs	r3, #1
 8002142:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002144:	b90b      	cbnz	r3, 800214a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002146:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800214a:	4770      	bx	lr
 800214c:	20000014 	.word	0x20000014

08002150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002150:	f3ef 8009 	mrs	r0, PSP
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <pxCurrentTCBConst>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002160:	6010      	str	r0, [r2, #0]
 8002162:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002166:	f04f 0050 	mov.w	r0, #80	; 0x50
 800216a:	f380 8811 	msr	BASEPRI, r0
 800216e:	f7ff ff13 	bl	8001f98 <vTaskSwitchContext>
 8002172:	f04f 0000 	mov.w	r0, #0
 8002176:	f380 8811 	msr	BASEPRI, r0
 800217a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	6808      	ldr	r0, [r1, #0]
 8002182:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002186:	f380 8809 	msr	PSP, r0
 800218a:	f3bf 8f6f 	isb	sy
 800218e:	4770      	bx	lr

08002190 <pxCurrentTCBConst>:
 8002190:	200001e8 	.word	0x200001e8

08002194 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002194:	b508      	push	{r3, lr}
	__asm volatile
 8002196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219a:	f383 8811 	msr	BASEPRI, r3
 800219e:	f3bf 8f6f 	isb	sy
 80021a2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80021a6:	f7ff fda7 	bl	8001cf8 <xTaskIncrementTick>
 80021aa:	b128      	cbz	r0, 80021b8 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80021ac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80021b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80021b8:	2300      	movs	r3, #0
 80021ba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80021be:	bd08      	pop	{r3, pc}

080021c0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80021c0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80021c4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80021c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80021ca:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80021cc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <vPortSetupTimerInterrupt+0x20>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	3b01      	subs	r3, #1
 80021d8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80021da:	2307      	movs	r3, #7
 80021dc:	6113      	str	r3, [r2, #16]
}
 80021de:	4770      	bx	lr
 80021e0:	2000000c 	.word	0x2000000c

080021e4 <xPortStartScheduler>:
{
 80021e4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80021e6:	4b29      	ldr	r3, [pc, #164]	; (800228c <xPortStartScheduler+0xa8>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021e8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80021ea:	781a      	ldrb	r2, [r3, #0]
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80021f0:	22ff      	movs	r2, #255	; 0xff
 80021f2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80021f4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021f6:	4a26      	ldr	r2, [pc, #152]	; (8002290 <xPortStartScheduler+0xac>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80021fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002202:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002206:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002208:	2307      	movs	r3, #7
 800220a:	4a22      	ldr	r2, [pc, #136]	; (8002294 <xPortStartScheduler+0xb0>)
 800220c:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800220e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002212:	1e5c      	subs	r4, r3, #1
 8002214:	0600      	lsls	r0, r0, #24
 8002216:	d40c      	bmi.n	8002232 <xPortStartScheduler+0x4e>
 8002218:	b111      	cbz	r1, 8002220 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800221a:	2b03      	cmp	r3, #3
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	d011      	beq.n	8002244 <xPortStartScheduler+0x60>
	__asm volatile
 8002220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002224:	f383 8811 	msr	BASEPRI, r3
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	f3bf 8f4f 	dsb	sy
 8002230:	e7fe      	b.n	8002230 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002232:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002236:	2101      	movs	r1, #1
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f88d 3003 	strb.w	r3, [sp, #3]
 8002240:	4623      	mov	r3, r4
 8002242:	e7e4      	b.n	800220e <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002244:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002248:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800224a:	9b01      	ldr	r3, [sp, #4]
 800224c:	4a0f      	ldr	r2, [pc, #60]	; (800228c <xPortStartScheduler+0xa8>)
 800224e:	b2db      	uxtb	r3, r3
 8002250:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002252:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8002256:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002258:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800225c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002260:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002264:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8002268:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800226c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8002270:	f7ff ffa6 	bl	80021c0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <xPortStartScheduler+0xb4>)
 8002276:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8002278:	f7ff fed0 	bl	800201c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800227c:	f7ff fe8c 	bl	8001f98 <vTaskSwitchContext>
}
 8002280:	4620      	mov	r0, r4
	prvTaskExitError();
 8002282:	f7ff fedb 	bl	800203c <prvTaskExitError>
}
 8002286:	b002      	add	sp, #8
 8002288:	bd10      	pop	{r4, pc}
 800228a:	bf00      	nop
 800228c:	e000e400 	.word	0xe000e400
 8002290:	200002e8 	.word	0x200002e8
 8002294:	200002ec 	.word	0x200002ec
 8002298:	20000014 	.word	0x20000014

0800229c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800229c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <prvInsertBlockIntoFreeList+0x44>)
 80022a0:	461a      	mov	r2, r3
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4283      	cmp	r3, r0
 80022a6:	d3fb      	bcc.n	80022a0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80022a8:	6854      	ldr	r4, [r2, #4]
 80022aa:	1911      	adds	r1, r2, r4
 80022ac:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80022ae:	bf01      	itttt	eq
 80022b0:	6841      	ldreq	r1, [r0, #4]
 80022b2:	4610      	moveq	r0, r2
 80022b4:	1909      	addeq	r1, r1, r4
 80022b6:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80022b8:	6844      	ldr	r4, [r0, #4]
 80022ba:	1901      	adds	r1, r0, r4
 80022bc:	428b      	cmp	r3, r1
 80022be:	d10c      	bne.n	80022da <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80022c0:	4908      	ldr	r1, [pc, #32]	; (80022e4 <prvInsertBlockIntoFreeList+0x48>)
 80022c2:	6809      	ldr	r1, [r1, #0]
 80022c4:	428b      	cmp	r3, r1
 80022c6:	d003      	beq.n	80022d0 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80022c8:	6859      	ldr	r1, [r3, #4]
 80022ca:	4421      	add	r1, r4
 80022cc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80022ce:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80022d0:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80022d2:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80022d4:	bf18      	it	ne
 80022d6:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80022d8:	bd10      	pop	{r4, pc}
 80022da:	4619      	mov	r1, r3
 80022dc:	e7f8      	b.n	80022d0 <prvInsertBlockIntoFreeList+0x34>
 80022de:	bf00      	nop
 80022e0:	20000f00 	.word	0x20000f00
 80022e4:	200002f0 	.word	0x200002f0

080022e8 <pvPortMalloc>:
{
 80022e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022ec:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80022ee:	f7ff fcf5 	bl	8001cdc <vTaskSuspendAll>
		if( pxEnd == NULL )
 80022f2:	4940      	ldr	r1, [pc, #256]	; (80023f4 <pvPortMalloc+0x10c>)
 80022f4:	4d40      	ldr	r5, [pc, #256]	; (80023f8 <pvPortMalloc+0x110>)
 80022f6:	680b      	ldr	r3, [r1, #0]
 80022f8:	bb0b      	cbnz	r3, 800233e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80022fa:	4a40      	ldr	r2, [pc, #256]	; (80023fc <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022fc:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022fe:	bf1f      	itttt	ne
 8002300:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002302:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002306:	f502 6240 	addne.w	r2, r2, #3072	; 0xc00
 800230a:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800230c:	bf0c      	ite	eq
 800230e:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002312:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 8002314:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002316:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002318:	4e39      	ldr	r6, [pc, #228]	; (8002400 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 800231a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800231c:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002320:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002322:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8002324:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002328:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800232a:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 800232e:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002330:	4b34      	ldr	r3, [pc, #208]	; (8002404 <pvPortMalloc+0x11c>)
 8002332:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002334:	4b34      	ldr	r3, [pc, #208]	; (8002408 <pvPortMalloc+0x120>)
 8002336:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800233c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800233e:	682e      	ldr	r6, [r5, #0]
 8002340:	4226      	tst	r6, r4
 8002342:	d151      	bne.n	80023e8 <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8002344:	2c00      	cmp	r4, #0
 8002346:	d042      	beq.n	80023ce <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8002348:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800234c:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800234e:	bf1c      	itt	ne
 8002350:	f023 0307 	bicne.w	r3, r3, #7
 8002354:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002356:	2b00      	cmp	r3, #0
 8002358:	d046      	beq.n	80023e8 <pvPortMalloc+0x100>
 800235a:	4f2b      	ldr	r7, [pc, #172]	; (8002408 <pvPortMalloc+0x120>)
 800235c:	683c      	ldr	r4, [r7, #0]
 800235e:	429c      	cmp	r4, r3
 8002360:	d342      	bcc.n	80023e8 <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8002362:	4a27      	ldr	r2, [pc, #156]	; (8002400 <pvPortMalloc+0x118>)
 8002364:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002366:	6868      	ldr	r0, [r5, #4]
 8002368:	4298      	cmp	r0, r3
 800236a:	d204      	bcs.n	8002376 <pvPortMalloc+0x8e>
 800236c:	f8d5 c000 	ldr.w	ip, [r5]
 8002370:	f1bc 0f00 	cmp.w	ip, #0
 8002374:	d115      	bne.n	80023a2 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8002376:	6809      	ldr	r1, [r1, #0]
 8002378:	42a9      	cmp	r1, r5
 800237a:	d035      	beq.n	80023e8 <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800237c:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800237e:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002382:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002384:	1ac2      	subs	r2, r0, r3
 8002386:	2a10      	cmp	r2, #16
 8002388:	d912      	bls.n	80023b0 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800238a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800238c:	0741      	lsls	r1, r0, #29
 800238e:	d00b      	beq.n	80023a8 <pvPortMalloc+0xc0>
 8002390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	e7fe      	b.n	80023a0 <pvPortMalloc+0xb8>
 80023a2:	462a      	mov	r2, r5
 80023a4:	4665      	mov	r5, ip
 80023a6:	e7de      	b.n	8002366 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80023a8:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80023aa:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80023ac:	f7ff ff76 	bl	800229c <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 80023b0:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80023b2:	4914      	ldr	r1, [pc, #80]	; (8002404 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023b4:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80023b6:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023b8:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80023ba:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80023bc:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023c0:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80023c2:	bf38      	it	cc
 80023c4:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80023c6:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023c8:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 80023cc:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80023ce:	f7ff fd25 	bl	8001e1c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80023d2:	0763      	lsls	r3, r4, #29
 80023d4:	d00a      	beq.n	80023ec <pvPortMalloc+0x104>
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	e7fe      	b.n	80023e6 <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 80023e8:	2400      	movs	r4, #0
 80023ea:	e7f0      	b.n	80023ce <pvPortMalloc+0xe6>
}
 80023ec:	4620      	mov	r0, r4
 80023ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023f2:	bf00      	nop
 80023f4:	200002f0 	.word	0x200002f0
 80023f8:	20000ef4 	.word	0x20000ef4
 80023fc:	200002f4 	.word	0x200002f4
 8002400:	20000f00 	.word	0x20000f00
 8002404:	20000efc 	.word	0x20000efc
 8002408:	20000ef8 	.word	0x20000ef8

0800240c <vPortFree>:
{
 800240c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800240e:	4604      	mov	r4, r0
 8002410:	b370      	cbz	r0, 8002470 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002412:	4a18      	ldr	r2, [pc, #96]	; (8002474 <vPortFree+0x68>)
 8002414:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4213      	tst	r3, r2
 800241c:	d108      	bne.n	8002430 <vPortFree+0x24>
 800241e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	e7fe      	b.n	800242e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002430:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002434:	b141      	cbz	r1, 8002448 <vPortFree+0x3c>
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	e7fe      	b.n	8002446 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002448:	ea23 0302 	bic.w	r3, r3, r2
 800244c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002450:	f7ff fc44 	bl	8001cdc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002454:	4a08      	ldr	r2, [pc, #32]	; (8002478 <vPortFree+0x6c>)
 8002456:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800245a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800245c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002460:	440b      	add	r3, r1
 8002462:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002464:	f7ff ff1a 	bl	800229c <prvInsertBlockIntoFreeList>
}
 8002468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800246c:	f7ff bcd6 	b.w	8001e1c <xTaskResumeAll>
}
 8002470:	bd10      	pop	{r4, pc}
 8002472:	bf00      	nop
 8002474:	20000ef4 	.word	0x20000ef4
 8002478:	20000ef8 	.word	0x20000ef8

0800247c <memset>:
 800247c:	4603      	mov	r3, r0
 800247e:	4402      	add	r2, r0
 8002480:	4293      	cmp	r3, r2
 8002482:	d100      	bne.n	8002486 <memset+0xa>
 8002484:	4770      	bx	lr
 8002486:	f803 1b01 	strb.w	r1, [r3], #1
 800248a:	e7f9      	b.n	8002480 <memset+0x4>

0800248c <__libc_init_array>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	2600      	movs	r6, #0
 8002490:	4d0c      	ldr	r5, [pc, #48]	; (80024c4 <__libc_init_array+0x38>)
 8002492:	4c0d      	ldr	r4, [pc, #52]	; (80024c8 <__libc_init_array+0x3c>)
 8002494:	1b64      	subs	r4, r4, r5
 8002496:	10a4      	asrs	r4, r4, #2
 8002498:	42a6      	cmp	r6, r4
 800249a:	d109      	bne.n	80024b0 <__libc_init_array+0x24>
 800249c:	f000 f81a 	bl	80024d4 <_init>
 80024a0:	2600      	movs	r6, #0
 80024a2:	4d0a      	ldr	r5, [pc, #40]	; (80024cc <__libc_init_array+0x40>)
 80024a4:	4c0a      	ldr	r4, [pc, #40]	; (80024d0 <__libc_init_array+0x44>)
 80024a6:	1b64      	subs	r4, r4, r5
 80024a8:	10a4      	asrs	r4, r4, #2
 80024aa:	42a6      	cmp	r6, r4
 80024ac:	d105      	bne.n	80024ba <__libc_init_array+0x2e>
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
 80024b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024b4:	4798      	blx	r3
 80024b6:	3601      	adds	r6, #1
 80024b8:	e7ee      	b.n	8002498 <__libc_init_array+0xc>
 80024ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80024be:	4798      	blx	r3
 80024c0:	3601      	adds	r6, #1
 80024c2:	e7f2      	b.n	80024aa <__libc_init_array+0x1e>
 80024c4:	08002538 	.word	0x08002538
 80024c8:	08002538 	.word	0x08002538
 80024cc:	08002538 	.word	0x08002538
 80024d0:	0800253c 	.word	0x0800253c

080024d4 <_init>:
 80024d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d6:	bf00      	nop
 80024d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024da:	bc08      	pop	{r3}
 80024dc:	469e      	mov	lr, r3
 80024de:	4770      	bx	lr

080024e0 <_fini>:
 80024e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e2:	bf00      	nop
 80024e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e6:	bc08      	pop	{r3}
 80024e8:	469e      	mov	lr, r3
 80024ea:	4770      	bx	lr
